[{"D:\\labc-web\\labc-web-admin\\src\\index.tsx":"1","D:\\labc-web\\labc-web-admin\\src\\i18n.ts":"2","D:\\labc-web\\labc-web-admin\\src\\reportWebVitals.ts":"3","D:\\labc-web\\labc-web-admin\\src\\App.tsx":"4","D:\\labc-web\\labc-web-admin\\src\\store\\index.ts":"5","D:\\labc-web\\labc-web-admin\\src\\components\\Preloader\\index.tsx":"6","D:\\labc-web\\labc-web-admin\\src\\utils\\LoadableComponent.tsx":"7","D:\\labc-web\\labc-web-admin\\src\\components\\Login\\index.tsx":"8","D:\\labc-web\\labc-web-admin\\src\\components\\PrivateRoute\\index.tsx":"9","D:\\labc-web\\labc-web-admin\\src\\components\\ChangePassword\\index.tsx":"10","D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\index.tsx":"11","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\index.tsx":"12","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\index.tsx":"13","D:\\labc-web\\labc-web-admin\\src\\pages\\teacherPage\\index.tsx":"14","D:\\labc-web\\labc-web-admin\\src\\pages\\staffPage\\index.tsx":"15","D:\\labc-web\\labc-web-admin\\src\\components\\Preloader\\Preloader.tsx":"16","D:\\labc-web\\labc-web-admin\\src\\actions\\auth.ts":"17","D:\\labc-web\\labc-web-admin\\src\\graphql\\user.ts":"18","D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\ForgotPassword.tsx":"19","D:\\labc-web\\labc-web-admin\\src\\components\\ChangePassword\\ChangePassword.tsx":"20","D:\\labc-web\\labc-web-admin\\src\\components\\Login\\LoginForm.tsx":"21","D:\\labc-web\\labc-web-admin\\src\\components\\Loading\\index.tsx":"22","D:\\labc-web\\labc-web-admin\\src\\utils\\useWindowSize.tsx":"23","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MyHeader.tsx":"24","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MyContent.tsx":"25","D:\\labc-web\\labc-web-admin\\src\\actions\\actionTypes.ts":"26","D:\\labc-web\\labc-web-admin\\src\\graphql\\password.ts":"27","D:\\labc-web\\labc-web-admin\\src\\utils\\randomNum.ts":"28","D:\\labc-web\\labc-web-admin\\src\\components\\Loading\\Loading.tsx":"29","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\Setting.tsx":"30","D:\\labc-web\\labc-web-admin\\src\\components\\LanguageChanger\\index.tsx":"31","D:\\labc-web\\labc-web-admin\\src\\components\\Notice\\index.tsx":"32","D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\ForgotPasswordModal.tsx":"33","D:\\labc-web\\labc-web-admin\\src\\components\\LanguageChanger\\LanguageChanger.tsx":"34","D:\\labc-web\\labc-web-admin\\src\\components\\Notice\\Notice.tsx":"35","D:\\labc-web\\labc-web-admin\\src\\graphql\\notification.ts":"36","D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\index.tsx":"37","D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\NotificationIcon.tsx":"38","D:\\labc-web\\labc-web-admin\\src\\pages\\staffPage\\MySider.tsx":"39","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MySider.tsx":"40","D:\\labc-web\\labc-web-admin\\src\\pages\\teacherPage\\MySider.tsx":"41","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\MySider.tsx":"42","D:\\labc-web\\labc-web-admin\\src\\reducers\\index.ts":"43","D:\\labc-web\\labc-web-admin\\src\\utils\\renderMenu.tsx":"44","D:\\labc-web\\labc-web-admin\\src\\pages\\teacher_tabs.tsx":"45","D:\\labc-web\\labc-web-admin\\src\\pages\\tabs.tsx":"46","D:\\labc-web\\labc-web-admin\\src\\pages\\staff_tabs.tsx":"47","D:\\labc-web\\labc-web-admin\\src\\pages\\student_tabs.tsx":"48","D:\\labc-web\\labc-web-admin\\src\\reducers\\auth.ts":"49","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\StudentGradeIndex.tsx":"50","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\FeedbackAdminPage.tsx":"51","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\index.tsx":"52","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\index.tsx":"53","D:\\labc-web\\labc-web-admin\\src\\components\\Dashboard\\index.tsx":"54","D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\index.tsx":"55","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\index.tsx":"56","D:\\labc-web\\labc-web-admin\\src\\components\\Grade\\index.tsx":"57","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\index.tsx":"58","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\index.tsx":"59","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\index.tsx":"60","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\index.tsx":"61","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\index.tsx":"62","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\index.tsx":"63","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\index.tsx":"64","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\index.tsx":"65","D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\index.tsx":"66","D:\\labc-web\\labc-web-admin\\src\\components\\StudentCourses\\index.tsx":"67","D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\index.tsx":"68","D:\\labc-web\\labc-web-admin\\src\\graphql\\feedback.ts":"69","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\GradePage.tsx":"70","D:\\labc-web\\labc-web-admin\\src\\graphql\\academicYear.ts":"71","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\Feedbacks.tsx":"72","D:\\labc-web\\labc-web-admin\\src\\components\\Dashboard\\Dashboard.tsx":"73","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\DownloadPage.tsx":"74","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\Programme.tsx":"75","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Students.tsx":"76","D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\TeacherProfile.tsx":"77","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\Courses.tsx":"78","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Staffs.tsx":"79","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\Departments.tsx":"80","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\Teachers.tsx":"81","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\AdminDepartments.tsx":"82","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\AcademicDownloadPage.tsx":"83","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\AdminDownloadPage.tsx":"84","D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\StudentProfile.tsx":"85","D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\StaffProfile.tsx":"86","D:\\labc-web\\labc-web-admin\\src\\components\\StudentCourses\\StudentCourses.tsx":"87","D:\\labc-web\\labc-web-admin\\src\\components\\Grade\\StudentViewGrade.tsx":"88","D:\\labc-web\\labc-web-admin\\src\\graphql\\data.ts":"89","D:\\labc-web\\labc-web-admin\\src\\graphql\\download.ts":"90","D:\\labc-web\\labc-web-admin\\src\\graphql\\programme.ts":"91","D:\\labc-web\\labc-web-admin\\src\\graphql\\student.ts":"92","D:\\labc-web\\labc-web-admin\\src\\graphql\\teacher.ts":"93","D:\\labc-web\\labc-web-admin\\src\\graphql\\course.ts":"94","D:\\labc-web\\labc-web-admin\\src\\graphql\\staff.ts":"95","D:\\labc-web\\labc-web-admin\\src\\graphql\\department.ts":"96","D:\\labc-web\\labc-web-admin\\src\\graphql\\adminDepartment.ts":"97","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\EditFeedback.tsx":"98","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\CreateFeedback.tsx":"99","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\EditDownloadPage.tsx":"100","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\CreateDownloadPage.tsx":"101","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\EditProgramme.tsx":"102","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\CreateProgramme.tsx":"103","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Student.tsx":"104","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudent.tsx":"105","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\EditStudent.tsx":"106","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade.tsx":"107","D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\AvatarAndProfile.tsx":"108","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Staff.tsx":"109","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\CreateCourse.tsx":"110","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EditCourse.tsx":"111","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\EditStaff.tsx":"112","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaff.tsx":"113","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\EditDepartment.tsx":"114","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\Teacher.tsx":"115","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\CreateDepartment.tsx":"116","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\CreateTeacher.tsx":"117","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\CreateAdminDepartment.tsx":"118","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\EditTeacher.tsx":"119","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\EditDownloadPage.tsx":"120","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\EditAdminDepartment.tsx":"121","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\CreateAdminDownloadPage.tsx":"122","D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\AvatarAndProfile.tsx":"123","D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\AvatarAndProfile.tsx":"124","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\CreateACDownloadPage.tsx":"125","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\EditAdminDownloadPage.tsx":"126","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\UpdateEnrollStudent.tsx":"127","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewTranscript.tsx":"128","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewGrade.tsx":"129","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewProfile.tsx":"130","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Education\\StaffEducation.tsx":"131","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Experience\\StaffExperience.tsx":"132","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollTeacher\\UpdateEnrollTeacher.tsx":"133","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\index.tsx":"134","D:\\labc-web\\labc-web-admin\\src\\graphql\\upload.ts":"135","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\ProfilePage.tsx":"136","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\SelectedPerson.tsx":"137","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\TranscriptPage.tsx":"138","D:\\labc-web\\labc-web-admin\\src\\graphql\\semester.ts":"139","D:\\labc-web\\labc-web-admin\\src\\utils\\programmeTypes.ts":"140","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Avatar.tsx":"141","D:\\labc-web\\labc-web-admin\\src\\constants\\NottificationType.ts":"142","D:\\labc-web\\labc-web-admin\\src\\hooks\\useNotitications.ts":"143","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\CreateProfile.tsx":"144","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\EditProfile.tsx":"145","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaffEducation.tsx":"146","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateProfile.tsx":"147","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaffExperience.tsx":"148","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\EditProfile.tsx":"149","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudentEducation.tsx":"150","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudentAddress.tsx":"151","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Grade.tsx":"152","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateProfile.tsx":"153","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\EditProfile.tsx":"154","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentSemester\\UpdateStudentSemester.tsx":"155","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentSemester\\CreateStudentSemester.tsx":"156","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentAcademicYear\\UpdateStudentAcademicYear.tsx":"157","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentAcademicYear\\CreateStudentAcademicYear.tsx":"158","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Address\\StudentAddress.tsx":"159","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\AcademicQualification\\AcademicQualification.tsx":"160","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\EnrollStudent.tsx":"161","D:\\labc-web\\labc-web-admin\\src\\graphql\\grade.ts":"162","D:\\labc-web\\labc-web-admin\\src\\utils\\sum.ts":"163","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\EditStudentGrade.tsx":"164","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\GradeDetail.tsx":"165","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\CreateStudentGrade.tsx":"166","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentClassification\\index.tsx":"167","D:\\labc-web\\labc-web-admin\\src\\graphql\\gradeDetail.ts":"168","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\EditStudentGradeDetail.tsx":"169","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\CreateStudentGradeDetail.tsx":"170","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentClassification\\StudentClassification.tsx":"171","D:\\labc-web\\labc-web-admin\\src\\utils\\creditDefaultValue.ts":"172","D:\\labc-web\\labc-web-admin\\src\\utils\\assigmentTypes.ts":"173","D:\\labc-web\\labc-web-admin\\src\\utils\\classification.ts":"174","D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\index.tsx":"175","D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\CreatePost.tsx":"176","D:\\labc-web\\labc-web-admin\\src\\graphql\\category.ts":"177","D:\\labc-web\\labc-web-admin\\src\\graphql\\post.ts":"178","D:\\labc-web\\labc-web-admin\\src\\components\\MyUploadAdapter.tsx":"179","D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\AddIcon.tsx":"180","D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\CloudUploadIcon.tsx":"181","D:\\labc-web\\labc-web-admin\\src\\components\\Button\\index.tsx":"182","D:\\labc-web\\labc-web-admin\\src\\components\\Button\\Button.tsx":"183","D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\CloseIcon.tsx":"184","D:\\labc-web\\labc-web-admin\\src\\components\\Tag\\index.tsx":"185","D:\\labc-web\\labc-web-admin\\src\\components\\Tag\\Tag.tsx":"186","D:\\labc-web\\labc-web-admin\\src\\pages\\CreatePost\\index.tsx":"187","D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\CKEditor.tsx":"188","D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\LanguageData.ts":"189","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\index.tsx":"190","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\Category.tsx":"191","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\Categories.tsx":"192","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\CreateCategory.tsx":"193","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\EditCategory.tsx":"194","D:\\labc-web\\labc-web-admin\\src\\utils\\getLanguage.ts":"195","D:\\labc-web\\labc-web-admin\\src\\components\\User\\index.tsx":"196","D:\\labc-web\\labc-web-admin\\src\\components\\User\\Users.tsx":"197","D:\\labc-web\\labc-web-admin\\src\\components\\User\\EditUser.tsx":"198","D:\\labc-web\\labc-web-admin\\src\\components\\User\\CreateUser.tsx":"199","D:\\labc-web\\labc-web-admin\\src\\utils\\PrivilegesDetect.ts":"200","D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\index.tsx":"201","D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\GetNoticeAndEvents.tsx":"202","D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\UpdateNoticeandEvents.tsx":"203","D:\\labc-web\\labc-web-admin\\src\\components\\EditPost\\index.tsx":"204","D:\\labc-web\\labc-web-admin\\src\\components\\EditPost\\EditPost.tsx":"205","D:\\labc-web\\labc-web-admin\\src\\utils\\date.ts":"206","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\ViewFeedback.tsx":"207","D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\index.tsx":"208","D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\Labcs.tsx":"209","D:\\labc-web\\labc-web-admin\\src\\graphql\\labc.ts":"210","D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\CreateLabc.tsx":"211","D:\\KWARM\\antd-cms-dev\\src\\index.tsx":"212","D:\\KWARM\\antd-cms-dev\\src\\i18n.ts":"213","D:\\KWARM\\antd-cms-dev\\src\\reportWebVitals.ts":"214","D:\\KWARM\\antd-cms-dev\\src\\App.tsx":"215","D:\\KWARM\\antd-cms-dev\\src\\store\\index.ts":"216","D:\\KWARM\\antd-cms-dev\\src\\components\\Preloader\\index.tsx":"217","D:\\KWARM\\antd-cms-dev\\src\\utils\\LoadableComponent.tsx":"218","D:\\KWARM\\antd-cms-dev\\src\\components\\PrivateRoute\\index.tsx":"219","D:\\KWARM\\antd-cms-dev\\src\\components\\ChangePassword\\index.tsx":"220","D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\index.tsx":"221","D:\\KWARM\\antd-cms-dev\\src\\components\\Login\\index.tsx":"222","D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\index.tsx":"223","D:\\KWARM\\antd-cms-dev\\src\\components\\Preloader\\Preloader.tsx":"224","D:\\KWARM\\antd-cms-dev\\src\\reducers\\index.ts":"225","D:\\KWARM\\antd-cms-dev\\src\\components\\Login\\LoginForm.tsx":"226","D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\ForgotPassword.tsx":"227","D:\\KWARM\\antd-cms-dev\\src\\components\\ChangePassword\\ChangePassword.tsx":"228","D:\\KWARM\\antd-cms-dev\\src\\components\\Loading\\index.tsx":"229","D:\\KWARM\\antd-cms-dev\\src\\utils\\useWindowSize.tsx":"230","D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MyContent.tsx":"231","D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MyHeader.tsx":"232","D:\\KWARM\\antd-cms-dev\\src\\reducers\\auth.ts":"233","D:\\KWARM\\antd-cms-dev\\src\\utils\\randomNum.ts":"234","D:\\KWARM\\antd-cms-dev\\src\\graphql\\password.ts":"235","D:\\KWARM\\antd-cms-dev\\src\\graphql\\user.ts":"236","D:\\KWARM\\antd-cms-dev\\src\\actions\\auth.ts":"237","D:\\KWARM\\antd-cms-dev\\src\\components\\Loading\\Loading.tsx":"238","D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\Setting.tsx":"239","D:\\KWARM\\antd-cms-dev\\src\\actions\\actionTypes.ts":"240","D:\\KWARM\\antd-cms-dev\\src\\components\\LanguageChanger\\index.tsx":"241","D:\\KWARM\\antd-cms-dev\\src\\components\\Notice\\index.tsx":"242","D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\ForgotPasswordModal.tsx":"243","D:\\KWARM\\antd-cms-dev\\src\\components\\LanguageChanger\\LanguageChanger.tsx":"244","D:\\KWARM\\antd-cms-dev\\src\\components\\Notice\\Notice.tsx":"245","D:\\KWARM\\antd-cms-dev\\src\\graphql\\notification.ts":"246","D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\index.tsx":"247","D:\\KWARM\\antd-cms-dev\\src\\graphql\\teacher.ts":"248","D:\\KWARM\\antd-cms-dev\\src\\graphql\\staff.ts":"249","D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\CloseIcon.tsx":"250","D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\NotificationIcon.tsx":"251","D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MySider.tsx":"252","D:\\KWARM\\antd-cms-dev\\src\\utils\\renderMenu.tsx":"253","D:\\KWARM\\antd-cms-dev\\src\\pages\\tabs.tsx":"254","D:\\KWARM\\antd-cms-dev\\src\\components\\Dashboard\\index.tsx":"255","D:\\KWARM\\antd-cms-dev\\src\\pages\\CreatePost\\index.tsx":"256","D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\index.tsx":"257","D:\\KWARM\\antd-cms-dev\\src\\graphql\\feedback.ts":"258","D:\\KWARM\\antd-cms-dev\\src\\graphql\\academicYear.ts":"259","D:\\KWARM\\antd-cms-dev\\src\\components\\Dashboard\\Dashboard.tsx":"260","D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\Categories.tsx":"261","D:\\KWARM\\antd-cms-dev\\src\\graphql\\student.ts":"262","D:\\KWARM\\antd-cms-dev\\src\\graphql\\course.ts":"263","D:\\KWARM\\antd-cms-dev\\src\\graphql\\download.ts":"264","D:\\KWARM\\antd-cms-dev\\src\\graphql\\data.ts":"265","D:\\KWARM\\antd-cms-dev\\src\\utils\\date.ts":"266","D:\\KWARM\\antd-cms-dev\\src\\graphql\\post.ts":"267","D:\\KWARM\\antd-cms-dev\\src\\utils\\getLanguage.ts":"268","D:\\KWARM\\antd-cms-dev\\src\\graphql\\labc.ts":"269","D:\\KWARM\\antd-cms-dev\\src\\graphql\\category.ts":"270","D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\EditCategory.tsx":"271","D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\CreateCategory.tsx":"272","D:\\KWARM\\antd-cms-dev\\src\\graphql\\department.ts":"273","D:\\KWARM\\antd-cms-dev\\src\\graphql\\programme.ts":"274","D:\\KWARM\\antd-cms-dev\\src\\constants\\NottificationType.ts":"275","D:\\KWARM\\antd-cms-dev\\src\\hooks\\useNotitications.ts":"276","D:\\KWARM\\antd-cms-dev\\src\\graphql\\upload.ts":"277","D:\\KWARM\\antd-cms-dev\\src\\graphql\\semester.ts":"278","D:\\KWARM\\antd-cms-dev\\src\\utils\\PrivilegesDetect.ts":"279","D:\\KWARM\\antd-cms-dev\\src\\utils\\programmeTypes.ts":"280","D:\\KWARM\\antd-cms-dev\\src\\components\\EditPost\\index.tsx":"281","D:\\KWARM\\antd-cms-dev\\src\\graphql\\grade.ts":"282","D:\\KWARM\\antd-cms-dev\\src\\utils\\sum.ts":"283","D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\AddIcon.tsx":"284","D:\\KWARM\\antd-cms-dev\\src\\components\\MyUploadAdapter.tsx":"285","D:\\KWARM\\antd-cms-dev\\src\\components\\EditPost\\EditPost.tsx":"286","D:\\KWARM\\antd-cms-dev\\src\\components\\Button\\index.tsx":"287","D:\\KWARM\\antd-cms-dev\\src\\components\\Tag\\index.tsx":"288","D:\\KWARM\\antd-cms-dev\\src\\graphql\\gradeDetail.ts":"289","D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\CloudUploadIcon.tsx":"290","D:\\KWARM\\antd-cms-dev\\src\\components\\Button\\Button.tsx":"291","D:\\KWARM\\antd-cms-dev\\src\\utils\\assigmentTypes.ts":"292","D:\\KWARM\\antd-cms-dev\\src\\utils\\creditDefaultValue.ts":"293","D:\\KWARM\\antd-cms-dev\\src\\components\\Tag\\Tag.tsx":"294","D:\\KWARM\\antd-cms-dev\\src\\utils\\classification.ts":"295","D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\LanguageData.ts":"296","D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\index.tsx":"297","D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\CreatePost.tsx":"298"},{"size":4501,"mtime":1620835012171,"results":"299","hashOfConfig":"300"},{"size":1222,"mtime":1617763164726,"results":"301","hashOfConfig":"300"},{"size":440,"mtime":1617763164754,"results":"302","hashOfConfig":"300"},{"size":1575,"mtime":1620487480974,"results":"303","hashOfConfig":"300"},{"size":219,"mtime":1617763164755,"results":"304","hashOfConfig":"300"},{"size":38,"mtime":1617763164674,"results":"305","hashOfConfig":"300"},{"size":345,"mtime":1617763164757,"results":"306","hashOfConfig":"300"},{"size":514,"mtime":1617763164671,"results":"307","hashOfConfig":"300"},{"size":1247,"mtime":1620142434422,"results":"308","hashOfConfig":"300"},{"size":43,"mtime":1617763164644,"results":"309","hashOfConfig":"300"},{"size":43,"mtime":1617763164662,"results":"310","hashOfConfig":"300"},{"size":3160,"mtime":1617763164748,"results":"311","hashOfConfig":"300"},{"size":2587,"mtime":1620145025789,"results":"312","hashOfConfig":"300"},{"size":3162,"mtime":1617763164751,"results":"313","hashOfConfig":"300"},{"size":3166,"mtime":1617763164744,"results":"314","hashOfConfig":"300"},{"size":468,"mtime":1617763164673,"results":"315","hashOfConfig":"300"},{"size":1373,"mtime":1617763164635,"results":"316","hashOfConfig":"300"},{"size":2631,"mtime":1620462416914,"results":"317","hashOfConfig":"300"},{"size":4121,"mtime":1617763164661,"results":"318","hashOfConfig":"300"},{"size":4624,"mtime":1617763164644,"results":"319","hashOfConfig":"300"},{"size":10567,"mtime":1620841474253,"results":"320","hashOfConfig":"300"},{"size":36,"mtime":1617763164669,"results":"321","hashOfConfig":"300"},{"size":806,"mtime":1617763164760,"results":"322","hashOfConfig":"300"},{"size":6670,"mtime":1620184353813,"results":"323","hashOfConfig":"300"},{"size":2822,"mtime":1620186358588,"results":"324","hashOfConfig":"300"},{"size":1279,"mtime":1617763164634,"results":"325","hashOfConfig":"300"},{"size":450,"mtime":1620807026627,"results":"326","hashOfConfig":"300"},{"size":227,"mtime":1617763164759,"results":"327","hashOfConfig":"300"},{"size":944,"mtime":1620183663080,"results":"328","hashOfConfig":"300"},{"size":3123,"mtime":1617763164742,"results":"329","hashOfConfig":"300"},{"size":44,"mtime":1617763164668,"results":"330","hashOfConfig":"300"},{"size":35,"mtime":1617763164672,"results":"331","hashOfConfig":"300"},{"size":4640,"mtime":1617763164661,"results":"332","hashOfConfig":"300"},{"size":1692,"mtime":1617763164667,"results":"333","hashOfConfig":"300"},{"size":5882,"mtime":1620923195855,"results":"334","hashOfConfig":"300"},{"size":1521,"mtime":1620922975447,"results":"335","hashOfConfig":"300"},{"size":97,"mtime":1620198328170,"results":"336","hashOfConfig":"300"},{"size":1856,"mtime":1617763164666,"results":"337","hashOfConfig":"300"},{"size":2081,"mtime":1617763164743,"results":"338","hashOfConfig":"300"},{"size":3249,"mtime":1620185910797,"results":"339","hashOfConfig":"300"},{"size":3579,"mtime":1617763164750,"results":"340","hashOfConfig":"300"},{"size":2417,"mtime":1617763164745,"results":"341","hashOfConfig":"300"},{"size":163,"mtime":1617763164754,"results":"342","hashOfConfig":"300"},{"size":1084,"mtime":1617763164759,"results":"343","hashOfConfig":"300"},{"size":487,"mtime":1617763164752,"results":"344","hashOfConfig":"300"},{"size":4478,"mtime":1620922277770,"results":"345","hashOfConfig":"300"},{"size":485,"mtime":1617763164744,"results":"346","hashOfConfig":"300"},{"size":1464,"mtime":1617763164749,"results":"347","hashOfConfig":"300"},{"size":1326,"mtime":1617763164753,"results":"348","hashOfConfig":"300"},{"size":947,"mtime":1617763164746,"results":"349","hashOfConfig":"300"},{"size":6637,"mtime":1620840719645,"results":"350","hashOfConfig":"300"},{"size":40,"mtime":1617763164660,"results":"351","hashOfConfig":"300"},{"size":41,"mtime":1617763164657,"results":"352","hashOfConfig":"300"},{"size":38,"mtime":1617763164652,"results":"353","hashOfConfig":"300"},{"size":43,"mtime":1617763164711,"results":"354","hashOfConfig":"300"},{"size":36,"mtime":1617763164651,"results":"355","hashOfConfig":"300"},{"size":229,"mtime":1617763164664,"results":"356","hashOfConfig":"357"},{"size":37,"mtime":1617763164709,"results":"358","hashOfConfig":"300"},{"size":38,"mtime":1617763164676,"results":"359","hashOfConfig":"300"},{"size":40,"mtime":1617763164655,"results":"360","hashOfConfig":"300"},{"size":37,"mtime":1617763164716,"results":"361","hashOfConfig":"357"},{"size":35,"mtime":1617763164685,"results":"362","hashOfConfig":"357"},{"size":49,"mtime":1617763164639,"results":"363","hashOfConfig":"357"},{"size":45,"mtime":1617763164641,"results":"364","hashOfConfig":"357"},{"size":46,"mtime":1617763164643,"results":"365","hashOfConfig":"300"},{"size":41,"mtime":1617763164678,"results":"366","hashOfConfig":"300"},{"size":43,"mtime":1617763164686,"results":"367","hashOfConfig":"300"},{"size":43,"mtime":1617763164688,"results":"368","hashOfConfig":"300"},{"size":953,"mtime":1620465067262,"results":"369","hashOfConfig":"300"},{"size":2915,"mtime":1617763164745,"results":"370","hashOfConfig":"300"},{"size":1421,"mtime":1617763164717,"results":"371","hashOfConfig":"300"},{"size":8723,"mtime":1620840477692,"results":"372","hashOfConfig":"300"},{"size":2404,"mtime":1620461636703,"results":"373","hashOfConfig":"300"},{"size":7974,"mtime":1617763164656,"results":"374","hashOfConfig":"300"},{"size":7500,"mtime":1617763164676,"results":"375","hashOfConfig":"300"},{"size":13384,"mtime":1617763164705,"results":"376","hashOfConfig":"300"},{"size":2589,"mtime":1617763164711,"results":"377","hashOfConfig":"300"},{"size":10719,"mtime":1620350677942,"results":"378","hashOfConfig":"300"},{"size":9546,"mtime":1617763164684,"results":"379","hashOfConfig":"357"},{"size":7484,"mtime":1620840026176,"results":"380","hashOfConfig":"300"},{"size":9591,"mtime":1617763164715,"results":"381","hashOfConfig":"357"},{"size":7375,"mtime":1617763164640,"results":"382","hashOfConfig":"357"},{"size":7910,"mtime":1617763164637,"results":"383","hashOfConfig":"357"},{"size":7694,"mtime":1617763164642,"results":"384","hashOfConfig":"300"},{"size":2282,"mtime":1617763164687,"results":"385","hashOfConfig":"300"},{"size":2524,"mtime":1617763164677,"results":"386","hashOfConfig":"300"},{"size":4967,"mtime":1617763164685,"results":"387","hashOfConfig":"300"},{"size":1416,"mtime":1617763164663,"results":"388","hashOfConfig":"300"},{"size":318,"mtime":1620461667897,"results":"389","hashOfConfig":"300"},{"size":1240,"mtime":1617763164719,"results":"390","hashOfConfig":"300"},{"size":989,"mtime":1617763164722,"results":"391","hashOfConfig":"300"},{"size":4714,"mtime":1617763164723,"results":"392","hashOfConfig":"300"},{"size":2879,"mtime":1617763164724,"results":"393","hashOfConfig":"300"},{"size":2068,"mtime":1617763164718,"results":"394","hashOfConfig":"300"},{"size":4961,"mtime":1617763164723,"results":"395","hashOfConfig":"300"},{"size":943,"mtime":1617763164719,"results":"396","hashOfConfig":"300"},{"size":991,"mtime":1617763164718,"results":"397","hashOfConfig":"357"},{"size":7230,"mtime":1617763164659,"results":"398","hashOfConfig":"300"},{"size":7827,"mtime":1620619595633,"results":"399","hashOfConfig":"300"},{"size":8653,"mtime":1617763164657,"results":"400","hashOfConfig":"300"},{"size":8636,"mtime":1617763164656,"results":"401","hashOfConfig":"300"},{"size":6070,"mtime":1617763164675,"results":"402","hashOfConfig":"300"},{"size":7020,"mtime":1617763164675,"results":"403","hashOfConfig":"300"},{"size":6744,"mtime":1617763164697,"results":"404","hashOfConfig":"300"},{"size":12462,"mtime":1617763164693,"results":"405","hashOfConfig":"300"},{"size":12725,"mtime":1617763164695,"results":"406","hashOfConfig":"300"},{"size":11556,"mtime":1617763164700,"results":"407","hashOfConfig":"300"},{"size":1375,"mtime":1617763164711,"results":"408","hashOfConfig":"300"},{"size":7960,"mtime":1617763164684,"results":"409","hashOfConfig":"357"},{"size":6536,"mtime":1620840361023,"results":"410","hashOfConfig":"300"},{"size":6372,"mtime":1617763164647,"results":"411","hashOfConfig":"300"},{"size":11196,"mtime":1617763164682,"results":"412","hashOfConfig":"357"},{"size":11078,"mtime":1617763164679,"results":"413","hashOfConfig":"357"},{"size":4637,"mtime":1617763164654,"results":"414","hashOfConfig":"300"},{"size":5696,"mtime":1617763164715,"results":"415","hashOfConfig":"357"},{"size":5202,"mtime":1617763164653,"results":"416","hashOfConfig":"300"},{"size":11317,"mtime":1617763164712,"results":"417","hashOfConfig":"357"},{"size":5584,"mtime":1617763164640,"results":"418","hashOfConfig":"357"},{"size":12040,"mtime":1617763164714,"results":"419","hashOfConfig":"357"},{"size":8657,"mtime":1617763164638,"results":"420","hashOfConfig":"357"},{"size":4937,"mtime":1617763164641,"results":"421","hashOfConfig":"357"},{"size":8017,"mtime":1617763164642,"results":"422","hashOfConfig":"300"},{"size":1375,"mtime":1617763164677,"results":"423","hashOfConfig":"300"},{"size":1398,"mtime":1617763164687,"results":"424","hashOfConfig":"300"},{"size":9216,"mtime":1617763164638,"results":"425","hashOfConfig":"357"},{"size":8646,"mtime":1617763164643,"results":"426","hashOfConfig":"300"},{"size":8186,"mtime":1617763164649,"results":"427","hashOfConfig":"300"},{"size":2030,"mtime":1617763164708,"results":"428","hashOfConfig":"300"},{"size":1847,"mtime":1617763164707,"results":"429","hashOfConfig":"300"},{"size":1892,"mtime":1617763164707,"results":"430","hashOfConfig":"300"},{"size":3557,"mtime":1617763164683,"results":"431","hashOfConfig":"300"},{"size":3797,"mtime":1617763164683,"results":"432","hashOfConfig":"300"},{"size":8318,"mtime":1617763164650,"results":"433","hashOfConfig":"300"},{"size":42,"mtime":1617763164649,"results":"434","hashOfConfig":"300"},{"size":454,"mtime":1617763164724,"results":"435","hashOfConfig":"300"},{"size":1658,"mtime":1617763164746,"results":"436","hashOfConfig":"300"},{"size":1037,"mtime":1617763164648,"results":"437","hashOfConfig":"300"},{"size":3901,"mtime":1617763164747,"results":"438","hashOfConfig":"300"},{"size":1357,"mtime":1617763164722,"results":"439","hashOfConfig":"300"},{"size":247,"mtime":1617763164758,"results":"440","hashOfConfig":"300"},{"size":5469,"mtime":1617763164692,"results":"441","hashOfConfig":"300"},{"size":105,"mtime":1617763164716,"results":"442","hashOfConfig":"300"},{"size":2484,"mtime":1617763164725,"results":"443","hashOfConfig":"300"},{"size":8058,"mtime":1617763164712,"results":"444","hashOfConfig":"357"},{"size":8073,"mtime":1617763164713,"results":"445","hashOfConfig":"357"},{"size":7274,"mtime":1617763164680,"results":"446","hashOfConfig":"357"},{"size":8799,"mtime":1617763164679,"results":"447","hashOfConfig":"357"},{"size":7142,"mtime":1617763164681,"results":"448","hashOfConfig":"357"},{"size":10200,"mtime":1617763164681,"results":"449","hashOfConfig":"357"},{"size":5982,"mtime":1617763164694,"results":"450","hashOfConfig":"300"},{"size":5828,"mtime":1617763164694,"results":"451","hashOfConfig":"300"},{"size":5059,"mtime":1617763164696,"results":"452","hashOfConfig":"300"},{"size":8116,"mtime":1617763164692,"results":"453","hashOfConfig":"300"},{"size":7801,"mtime":1617763164695,"results":"454","hashOfConfig":"300"},{"size":3476,"mtime":1617763164705,"results":"455","hashOfConfig":"300"},{"size":3260,"mtime":1617763164704,"results":"456","hashOfConfig":"300"},{"size":3347,"mtime":1617763164699,"results":"457","hashOfConfig":"300"},{"size":3111,"mtime":1617763164698,"results":"458","hashOfConfig":"300"},{"size":3262,"mtime":1617763164691,"results":"459","hashOfConfig":"300"},{"size":3364,"mtime":1617763164690,"results":"460","hashOfConfig":"300"},{"size":7647,"mtime":1617763164648,"results":"461","hashOfConfig":"300"},{"size":1033,"mtime":1617763164720,"results":"462","hashOfConfig":"300"},{"size":627,"mtime":1617763164760,"results":"463","hashOfConfig":"300"},{"size":6391,"mtime":1617763164702,"results":"464","hashOfConfig":"300"},{"size":6581,"mtime":1617763164703,"results":"465","hashOfConfig":"300"},{"size":6639,"mtime":1617763164701,"results":"466","hashOfConfig":"300"},{"size":50,"mtime":1617763164700,"results":"467","hashOfConfig":"300"},{"size":940,"mtime":1617763164721,"results":"468","hashOfConfig":"300"},{"size":6820,"mtime":1617763164703,"results":"469","hashOfConfig":"300"},{"size":6576,"mtime":1617763164702,"results":"470","hashOfConfig":"300"},{"size":1052,"mtime":1617763164699,"results":"471","hashOfConfig":"300"},{"size":364,"mtime":1617763164758,"results":"472","hashOfConfig":"300"},{"size":850,"mtime":1617763164757,"results":"473","hashOfConfig":"300"},{"size":1148,"mtime":1617763164758,"results":"474","hashOfConfig":"300"},{"size":41,"mtime":1620200241988,"results":"475","hashOfConfig":"300"},{"size":15875,"mtime":1620838383952,"results":"476","hashOfConfig":"300"},{"size":1370,"mtime":1620317755123,"results":"477","hashOfConfig":"300"},{"size":2090,"mtime":1620445889747,"results":"478","hashOfConfig":"300"},{"size":3525,"mtime":1620196823564,"results":"479","hashOfConfig":"300"},{"size":1564,"mtime":1620197415680,"results":"480","hashOfConfig":"300"},{"size":1343,"mtime":1620197185330,"results":"481","hashOfConfig":"300"},{"size":35,"mtime":1620193915648,"results":"482","hashOfConfig":"300"},{"size":1029,"mtime":1620193623623,"results":"483","hashOfConfig":"300"},{"size":850,"mtime":1620198329249,"results":"484","hashOfConfig":"300"},{"size":32,"mtime":1620198515962,"results":"485","hashOfConfig":"300"},{"size":635,"mtime":1620198269397,"results":"486","hashOfConfig":"300"},{"size":56,"mtime":1620199512772,"results":"487","hashOfConfig":"300"},{"size":5209,"mtime":1620834069326,"results":"488","hashOfConfig":"300"},{"size":286,"mtime":1620296264397,"results":"489","hashOfConfig":"300"},{"size":39,"mtime":1620312465154,"results":"490","hashOfConfig":"300"},{"size":1510,"mtime":1620312425852,"results":"491","hashOfConfig":"300"},{"size":8358,"mtime":1620840454451,"results":"492","hashOfConfig":"300"},{"size":5625,"mtime":1620317697716,"results":"493","hashOfConfig":"300"},{"size":5359,"mtime":1620319138817,"results":"494","hashOfConfig":"300"},{"size":245,"mtime":1620318085445,"results":"495","hashOfConfig":"300"},{"size":34,"mtime":1620352594700,"results":"496","hashOfConfig":"300"},{"size":8882,"mtime":1620840926834,"results":"497","hashOfConfig":"300"},{"size":11645,"mtime":1620877896290,"results":"498","hashOfConfig":"300"},{"size":10877,"mtime":1620877801598,"results":"499","hashOfConfig":"300"},{"size":373,"mtime":1620377325883,"results":"500","hashOfConfig":"300"},{"size":47,"mtime":1620381701687,"results":"501","hashOfConfig":"300"},{"size":10825,"mtime":1620841021406,"results":"502","hashOfConfig":"300"},{"size":1080,"mtime":1620382044532,"results":"503","hashOfConfig":"300"},{"size":37,"mtime":1620402069950,"results":"504","hashOfConfig":"300"},{"size":21186,"mtime":1620922091804,"results":"505","hashOfConfig":"300"},{"size":555,"mtime":1620405324163,"results":"506","hashOfConfig":"300"},{"size":2332,"mtime":1620467484499,"results":"507","hashOfConfig":"300"},{"size":34,"mtime":1620898128405,"results":"508","hashOfConfig":"300"},{"size":2617,"mtime":1620922568777,"results":"509","hashOfConfig":"300"},{"size":567,"mtime":1620899360774,"results":"510","hashOfConfig":"300"},{"size":3652,"mtime":1620899015831,"results":"511","hashOfConfig":"300"},{"size":1266,"mtime":1633576821139,"results":"512","hashOfConfig":"513"},{"size":1222,"mtime":1617763164726,"results":"514","hashOfConfig":"513"},{"size":440,"mtime":1617763164754,"results":"515","hashOfConfig":"513"},{"size":1336,"mtime":1633615551467,"results":"516","hashOfConfig":"513"},{"size":219,"mtime":1617763164755,"results":"517","hashOfConfig":"513"},{"size":38,"mtime":1617763164674,"results":"518","hashOfConfig":"513"},{"size":345,"mtime":1617763164757,"results":"519","hashOfConfig":"513"},{"size":1122,"mtime":1633615595762,"results":"520","hashOfConfig":"513"},{"size":43,"mtime":1617763164644,"results":"521","hashOfConfig":"513"},{"size":43,"mtime":1617763164662,"results":"522","hashOfConfig":"513"},{"size":514,"mtime":1617763164671,"results":"523","hashOfConfig":"513"},{"size":2379,"mtime":1633616224406,"results":"524","hashOfConfig":"513"},{"size":468,"mtime":1617763164673,"results":"525","hashOfConfig":"513"},{"size":163,"mtime":1617763164754,"results":"526","hashOfConfig":"513"},{"size":10567,"mtime":1620841474253,"results":"527","hashOfConfig":"513"},{"size":2904,"mtime":1633616316655,"results":"528","hashOfConfig":"513"},{"size":3521,"mtime":1633617292952,"results":"529","hashOfConfig":"513"},{"size":36,"mtime":1617763164669,"results":"530","hashOfConfig":"513"},{"size":806,"mtime":1617763164760,"results":"531","hashOfConfig":"513"},{"size":2447,"mtime":1633617423363,"results":"532","hashOfConfig":"513"},{"size":5939,"mtime":1633620756139,"results":"533","hashOfConfig":"513"},{"size":1326,"mtime":1617763164753,"results":"534","hashOfConfig":"513"},{"size":227,"mtime":1617763164759,"results":"535","hashOfConfig":"513"},{"size":450,"mtime":1620807026627,"results":"536","hashOfConfig":"513"},{"size":2631,"mtime":1620462416914,"results":"537","hashOfConfig":"513"},{"size":1373,"mtime":1617763164635,"results":"538","hashOfConfig":"513"},{"size":944,"mtime":1620183663080,"results":"539","hashOfConfig":"513"},{"size":3123,"mtime":1617763164742,"results":"540","hashOfConfig":"513"},{"size":1279,"mtime":1617763164634,"results":"541","hashOfConfig":"513"},{"size":44,"mtime":1617763164668,"results":"542","hashOfConfig":"513"},{"size":35,"mtime":1617763164672,"results":"543","hashOfConfig":"513"},{"size":3653,"mtime":1633616312696,"results":"544","hashOfConfig":"513"},{"size":1377,"mtime":1633620428756,"results":"545","hashOfConfig":"513"},{"size":5949,"mtime":1633618362233,"results":"546","hashOfConfig":"513"},{"size":1521,"mtime":1620922975447,"results":"547","hashOfConfig":"513"},{"size":97,"mtime":1620198328170,"results":"548","hashOfConfig":"513"},{"size":2879,"mtime":1617763164724,"results":"549","hashOfConfig":"513"},{"size":4961,"mtime":1617763164723,"results":"550","hashOfConfig":"513"},{"size":850,"mtime":1620198329249,"results":"551","hashOfConfig":"513"},{"size":1856,"mtime":1617763164666,"results":"552","hashOfConfig":"513"},{"size":2267,"mtime":1633618021351,"results":"553","hashOfConfig":"513"},{"size":1084,"mtime":1617763164759,"results":"554","hashOfConfig":"513"},{"size":1306,"mtime":1633620278777,"results":"555","hashOfConfig":"513"},{"size":38,"mtime":1617763164652,"results":"556","hashOfConfig":"513"},{"size":56,"mtime":1620199512772,"results":"557","hashOfConfig":"513"},{"size":39,"mtime":1620312465154,"results":"558","hashOfConfig":"513"},{"size":953,"mtime":1620465067262,"results":"559","hashOfConfig":"513"},{"size":1421,"mtime":1617763164717,"results":"560","hashOfConfig":"513"},{"size":2011,"mtime":1633617459945,"results":"561","hashOfConfig":"513"},{"size":8358,"mtime":1620840454451,"results":"562","hashOfConfig":"513"},{"size":4714,"mtime":1617763164723,"results":"563","hashOfConfig":"513"},{"size":2068,"mtime":1617763164718,"results":"564","hashOfConfig":"513"},{"size":1240,"mtime":1617763164719,"results":"565","hashOfConfig":"513"},{"size":318,"mtime":1620461667897,"results":"566","hashOfConfig":"513"},{"size":555,"mtime":1620405324163,"results":"567","hashOfConfig":"513"},{"size":2090,"mtime":1620445889747,"results":"568","hashOfConfig":"513"},{"size":245,"mtime":1620318085445,"results":"569","hashOfConfig":"513"},{"size":567,"mtime":1620899360774,"results":"570","hashOfConfig":"513"},{"size":1370,"mtime":1620317755123,"results":"571","hashOfConfig":"513"},{"size":5359,"mtime":1620319138817,"results":"572","hashOfConfig":"513"},{"size":5625,"mtime":1620317697716,"results":"573","hashOfConfig":"513"},{"size":943,"mtime":1617763164719,"results":"574","hashOfConfig":"513"},{"size":989,"mtime":1617763164722,"results":"575","hashOfConfig":"513"},{"size":105,"mtime":1617763164716,"results":"576","hashOfConfig":"513"},{"size":2484,"mtime":1617763164725,"results":"577","hashOfConfig":"513"},{"size":454,"mtime":1617763164724,"results":"578","hashOfConfig":"513"},{"size":1357,"mtime":1617763164722,"results":"579","hashOfConfig":"513"},{"size":373,"mtime":1620377325883,"results":"580","hashOfConfig":"513"},{"size":247,"mtime":1617763164758,"results":"581","hashOfConfig":"513"},{"size":37,"mtime":1620402069950,"results":"582","hashOfConfig":"513"},{"size":1033,"mtime":1617763164720,"results":"583","hashOfConfig":"513"},{"size":627,"mtime":1617763164760,"results":"584","hashOfConfig":"513"},{"size":1564,"mtime":1620197415680,"results":"585","hashOfConfig":"513"},{"size":3525,"mtime":1620196823564,"results":"586","hashOfConfig":"513"},{"size":126,"mtime":1633577488008,"results":"587","hashOfConfig":"513"},{"size":35,"mtime":1620193915648,"results":"588","hashOfConfig":"513"},{"size":32,"mtime":1620198515962,"results":"589","hashOfConfig":"513"},{"size":940,"mtime":1617763164721,"results":"590","hashOfConfig":"513"},{"size":1343,"mtime":1620197185330,"results":"591","hashOfConfig":"513"},{"size":1029,"mtime":1620193623623,"results":"592","hashOfConfig":"513"},{"size":850,"mtime":1617763164757,"results":"593","hashOfConfig":"513"},{"size":364,"mtime":1617763164758,"results":"594","hashOfConfig":"513"},{"size":635,"mtime":1620198269397,"results":"595","hashOfConfig":"513"},{"size":1148,"mtime":1617763164758,"results":"596","hashOfConfig":"513"},{"size":286,"mtime":1620296264397,"results":"597","hashOfConfig":"513"},{"size":41,"mtime":1620200241988,"results":"598","hashOfConfig":"513"},{"size":127,"mtime":1633577328696,"results":"599","hashOfConfig":"513"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},"h10ig4",{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"602"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"602"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"602"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"602"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"602"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"602"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"602"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656","usedDeprecatedRules":"602"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"602"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"602"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"602"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"602"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"602"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"602"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"602"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"731"},"138k0n9",{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"602"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"763","usedDeprecatedRules":"602"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"602"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"769","usedDeprecatedRules":"602"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"602"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"775","usedDeprecatedRules":"602"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"731"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"602"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"731"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"731"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"794","usedDeprecatedRules":"731"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"797","usedDeprecatedRules":"602"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804","usedDeprecatedRules":"602"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"821","messages":"822","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827","usedDeprecatedRules":"602"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"602"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"602"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"602"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"841","usedDeprecatedRules":"602"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846","usedDeprecatedRules":"602"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"602"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"602"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"602"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"858","messages":"859","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"860","usedDeprecatedRules":"602"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"863","usedDeprecatedRules":"602"},{"filePath":"864","messages":"865","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"866","usedDeprecatedRules":"731"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"869","usedDeprecatedRules":"731"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872","usedDeprecatedRules":"602"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"731"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"602"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"881","usedDeprecatedRules":"731"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884","usedDeprecatedRules":"731"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887","usedDeprecatedRules":"731"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"890","usedDeprecatedRules":"731"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"893","usedDeprecatedRules":"731"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896","usedDeprecatedRules":"602"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"602"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"602"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"731"},{"filePath":"905","messages":"906","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907","usedDeprecatedRules":"602"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"910","usedDeprecatedRules":"602"},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"919","messages":"920","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"923","usedDeprecatedRules":"602"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"602"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"937","messages":"938","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"939","messages":"940","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"941","usedDeprecatedRules":"602"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948","usedDeprecatedRules":"731"},{"filePath":"949","messages":"950","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"951","usedDeprecatedRules":"731"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"954","usedDeprecatedRules":"731"},{"filePath":"955","messages":"956","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"957","usedDeprecatedRules":"731"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"731"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"731"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"602"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"602"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"602"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"982","usedDeprecatedRules":"602"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"985","usedDeprecatedRules":"602"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"602"},{"filePath":"993","messages":"994","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"995","messages":"996","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"997","messages":"998","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"999","usedDeprecatedRules":"602"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"602"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1009","messages":"1010","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1011","usedDeprecatedRules":"602"},{"filePath":"1012","messages":"1013","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1014","messages":"1015","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016","usedDeprecatedRules":"602"},{"filePath":"1017","messages":"1018","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1023","messages":"1024","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027","usedDeprecatedRules":"602"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1030","messages":"1031","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1032","messages":"1033","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1036","messages":"1037","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"602"},{"filePath":"1039","messages":"1040","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1041","messages":"1042","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1045","messages":"1046","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1047","messages":"1048","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1051","messages":"1052","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1053","messages":"1054","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1057","messages":"1058","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1059","messages":"1060","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061","usedDeprecatedRules":"602"},{"filePath":"1062","messages":"1063","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064","usedDeprecatedRules":"602"},{"filePath":"1065","messages":"1066","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1067","usedDeprecatedRules":"602"},{"filePath":"1068","messages":"1069","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1072","messages":"1073","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1074","usedDeprecatedRules":"602"},{"filePath":"1075","messages":"1076","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1077","usedDeprecatedRules":"602"},{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1080","usedDeprecatedRules":"602"},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1083","messages":"1084","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087","usedDeprecatedRules":"602"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1090","messages":"1091","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1092","messages":"1093","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1094","usedDeprecatedRules":"602"},{"filePath":"1095","messages":"1096","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1099","usedDeprecatedRules":"602"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1102","messages":"1103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1104"},{"filePath":"1105","messages":"1106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"602"},{"filePath":"1107","messages":"1108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1109","usedDeprecatedRules":"602"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112","usedDeprecatedRules":"1113"},"1r4v220",{"filePath":"1114","messages":"1115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1116","messages":"1117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1120","usedDeprecatedRules":"1113"},{"filePath":"1121","messages":"1122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1123","messages":"1124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1125","messages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"1113"},{"filePath":"1129","messages":"1130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"1113"},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1141","messages":"1142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"1113"},{"filePath":"1143","messages":"1144","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1147","usedDeprecatedRules":"1113"},{"filePath":"1148","messages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1150","messages":"1151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1152","messages":"1153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1156","messages":"1157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1158","messages":"1159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1160","messages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1162","messages":"1163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1164","messages":"1165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1168","messages":"1169","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"1113"},{"filePath":"1170","messages":"1171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1174","messages":"1175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1176","messages":"1177","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1178","messages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"1113"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183","usedDeprecatedRules":"1113"},{"filePath":"1184","messages":"1185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1186","messages":"1187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1188","messages":"1189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1191","messages":"1192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1193","messages":"1194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1195","messages":"1196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1197","messages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1199","messages":"1200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203","usedDeprecatedRules":"1113"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1206","messages":"1207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1208","messages":"1209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1210","messages":"1211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1212","messages":"1213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1214","messages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1113"},{"filePath":"1216","messages":"1217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061","usedDeprecatedRules":"1190"},{"filePath":"1218","messages":"1219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1220","messages":"1221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1222","messages":"1223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1224","messages":"1225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1226"},{"filePath":"1227","messages":"1228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1229","messages":"1230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1231","messages":"1232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1233","messages":"1234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1235","messages":"1236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1237","messages":"1238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1067","usedDeprecatedRules":"1190"},{"filePath":"1239","messages":"1240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064","usedDeprecatedRules":"1190"},{"filePath":"1241","messages":"1242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1243","messages":"1244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1245","messages":"1246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1247","messages":"1248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1249","messages":"1250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1251","messages":"1252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1253","messages":"1254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1255","messages":"1256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1257","messages":"1258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1259","messages":"1260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1261","messages":"1262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1263","messages":"1264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1265","messages":"1266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1267","messages":"1268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1269","messages":"1270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1271","messages":"1272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1273","messages":"1274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1275","messages":"1276","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"1190"},{"filePath":"1277","messages":"1278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1279","messages":"1280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1281","messages":"1282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1283","messages":"1284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1285","messages":"1286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1287","messages":"1288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1289","messages":"1290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},{"filePath":"1291","messages":"1292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1190"},"D:\\labc-web\\labc-web-admin\\src\\index.tsx",[],["1293","1294"],"D:\\labc-web\\labc-web-admin\\src\\i18n.ts",[],"D:\\labc-web\\labc-web-admin\\src\\reportWebVitals.ts",[],"D:\\labc-web\\labc-web-admin\\src\\App.tsx",["1295","1296","1297"],"import  { FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\r\nimport { Login } from './components/Login';\r\n\r\nimport { LoadableComponent } from './utils/LoadableComponent';\r\nimport './App.less';\r\nimport 'nprogress/nprogress.css';\r\n\r\nimport PrivateRoute from './components/PrivateRoute';\r\n\r\n// import Loading from './components/Loading';\r\nconst IndexPage = LoadableComponent(import('./pages/IndexPage'));\r\nconst StudentPage = LoadableComponent(import('./pages/studentPage'));\r\nconst StaffPage = LoadableComponent(import('./pages/staffPage'));\r\nconst TeacherPage = LoadableComponent(import('./pages/teacherPage'));\r\nconst ChangePasswordPage = LoadableComponent(import('./components/ChangePassword'));\r\nconst ForgotPasswordPage = LoadableComponent(import('./components/ForgotPassword'));\r\n\r\n\r\nconst App: FC = () => {\r\n \r\n  return(\r\n    <div className=\"App\">\r\n\r\n       <BrowserRouter>\r\n         <Switch>\r\n            <Route path={'/login'} component={Login} />\r\n            <Route path={'/change-password/:token'}  component={ChangePasswordPage}/>\r\n            \r\n            <Route path={'/forgot-password'} component={ForgotPasswordPage}/>\r\n          \r\n            {/* <Route path={'/' } component={IndexPage}  /> */}\r\n              \r\n            <PrivateRoute path={'/' } component={IndexPage}  />\r\n              \r\n         </Switch>\r\n       </BrowserRouter>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nconst MapStateToProps = (state: any) => ({\r\n   auth: state.auth,\r\n})\r\nexport default connect(MapStateToProps)(App);","D:\\labc-web\\labc-web-admin\\src\\store\\index.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Preloader\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\LoadableComponent.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Login\\index.tsx",["1298"],"import React from 'react'\r\nimport './login.less';\r\nimport  LoginForm  from './LoginForm';\r\ninterface LoginProps {\r\n\r\n}\r\n\r\nexport const Login: React.FC<LoginProps> = ({}) => {\r\n            return (<>\r\n               <div style={{backgroundColor: '#8888'}}>\r\n                <div className=\"login-container\">\r\n                    <div className={`l-box active}`}>\r\n                  \r\n                       <LoginForm  />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>);\r\n}","D:\\labc-web\\labc-web-admin\\src\\components\\PrivateRoute\\index.tsx",["1299"],"\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { GET_ME } from '../../graphql/user';\r\nimport Loading from '../Loading';\r\nimport { loadUser } from \"../../actions/auth\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth: { isAuthenticated} , loadUser, ...rest  }: any) => {\r\n         \r\n      const { data, loading, error } = useQuery(GET_ME);\r\n      useEffect(() => {\r\n           \r\n           \r\n\r\n            if(!error&&data?.getMe?.user) {\r\n                  loadUser(data?.getMe?.user);\r\n            }\r\n      \r\n     }, [data?.getMe?.user]);\r\n     \r\n  \r\n         if(loading) {\r\n\r\n            return <Loading />;\r\n          }\r\n          if(!data&&error) {\r\n                return <Loading />\r\n          }\r\n      \r\n          const { getMe } = data;\r\n\r\n        \r\n      return(\r\n            <Route {...rest} render={ props => !getMe?.user ? (<Redirect to=\"/login\">\r\n      \r\n            </Redirect>): (<Component {...props} />) \r\n            }/>\r\n      )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n      auth: state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps, { loadUser })(PrivateRoute);","D:\\labc-web\\labc-web-admin\\src\\components\\ChangePassword\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\index.tsx",["1300","1301"],"\r\n\r\nimport React, { useState } from 'react'\r\nimport { Layout } from 'antd';\r\nimport { connect  } from \"react-redux\";\r\nimport { MySider } from './MySider';\r\nimport MyHeader from './MyHeader';\r\nimport MyContent from './MyContent';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { useWindowSize } from '../../utils/useWindowSize';\r\nimport './style.less';\r\nconst { Header, Content, Sider } = Layout;\r\n\r\n\r\nconst IndexPage = ({ authUser }: any) => {\r\n       const windowSize = useWindowSize();\r\n      const isDesktop = windowSize.width >= 680;\r\n\r\n      const [activeMenu, setActiveMenu] = useState('');\r\n\r\n      const [collapsed, setCollapsed] = useState(false);\r\n      const [panes, setPanes] = useState([]);\r\n \r\n\r\n\r\n    const handleCollapsed = (): void => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    const handleState = (obj:any) => {\r\n   \r\n       setActiveMenu(obj._activeMenu)\r\n       setPanes(obj._panes)\r\n    }\r\n    \r\n    const checkC = !collapsed?'block': 'none';\r\n    return (\r\n        <div>\r\n       \r\n        <Layout style={{ height: '100vh',  background: `${collapsed?'rgba(0, 0, 0, 0.8)':null}` }}>\r\n       \r\n     <div className={`${!collapsed&&!isDesktop?'bg_cover': null}`}>\r\n\r\n     </div>\r\n\r\n\r\n       <Sider      theme={'dark'} trigger={null} collapsible collapsed={collapsed}\r\n        style={{\r\n            display: `${!isDesktop&&checkC}`,\r\n            transition: 'opacity 1s ease-in 1s',\r\n            zIndex: 2\r\n            \r\n        }}\r\n      >\r\n          <MySider\r\n              theme={\"dark\"}\r\n              panes={panes}\r\n              activeMenu={activeMenu}\r\n              authUser={authUser}\r\n              onChangeState={handleState}\r\n          />\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n          <Header  className=\"site-layout-background\" style={{ padding: 0 }}  >\r\n       \r\n             <MyHeader\r\n                \r\n                \r\n                  collapsed={collapsed}\r\n                  onChangeCollapsed={handleCollapsed} \r\n                  onChangeState={handleState} \r\n            />\r\n          </Header>\r\n                 \r\n          <Content >\r\n                \r\n              <MyContent\r\n              \r\n                  panes={panes}\r\n                  activeMenu={activeMenu}\r\n                  onChangeState={handleState} />\r\n              \r\n          </Content>\r\n\r\n      </Layout >\r\n\r\n      </Layout>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ((state: any) => (\r\n    {\r\n     \r\n        authUser: state?.auth?.user\r\n        \r\n   }\r\n))\r\n\r\nexport default connect(mapStateToProps, {})(IndexPage)\r\n","D:\\labc-web\\labc-web-admin\\src\\pages\\teacherPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\staffPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Preloader\\Preloader.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\actions\\auth.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\user.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\ForgotPassword.tsx",["1302","1303"],"import React, { useEffect, useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport {  Form, Input, message, Button, Result } from 'antd';\r\nimport { MailOutlined } from '@ant-design/icons';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FORGOT_PASSWORD } from \"../../graphql/password\";\r\n\r\nimport './style.less';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst ForgotPassword = ({  }: any) => {\r\n    const [ForgotPasswordMutation] = useMutation(FORGOT_PASSWORD)\r\n    const [form] = Form.useForm();\r\n    const [success, setSuccess] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const { t } = useTranslation();\r\n\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n   const handleChangeEmail= (e: any) => {\r\n       setEmail(e.target.value)\r\n   }\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        setEmail(values?.email);\r\n\r\n        const { data, errors } = await ForgotPasswordMutation({\r\n            variables: {\r\n              email: values.email || email,\r\n              lang: localStorage.getItem('LANGUAGE') || 'en'\r\n            }\r\n        });\r\n\r\n        if(errors) {\r\n            message.error(`${errors}`)\r\n        }\r\n        if(data?.forgotPassword && !errors) {\r\n         \r\n              setSuccess(true);\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <div className=\"password-form\">\r\n      \r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n        \r\n\r\n\r\n                   {!success?<Form.Item \r\n\r\n                   label={t(\"forgot_password.email\")}\r\n                    name=\"email\"\r\n                        rules={[\r\n                        { required: true, message: t(\"forgot_password.req_msg_email\") },\r\n                        { min: 3, message: t('forgot_password.min_msg_email') }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                onChange={handleChangeEmail}\r\n                                maxLength={100}\r\n                                prefix={<MailOutlined className=\"site-form-item-icon\" />}\r\n                                type={'email'}\r\n                                placeholder={t(\"forgot_password.email\")} />\r\n                    \r\n                    </Form.Item>: <div>\r\n                        \r\n                    <Result\r\n                    status=\"success\"\r\n                    title={t(\"forgot_password.send_done\")}\r\n                    subTitle={t(\"forgot_password.send_done_detail\")}\r\n                    extra={[\r\n                    <Button type=\"primary\" key=\"console\">\r\n                     <Link to={'/'}>\r\n                     {t(\"return\")}\r\n                     </Link>\r\n                    </Button>,\r\n                       <Button \r\n                       key=\"buy\" \r\n                       onClick={handleOk}> \r\n                       {t(\"forgot_password.send_again\")} \r\n                       </Button>,\r\n                    ]}\r\n                />\r\n                        </div>}\r\n\r\n                    {!success&& <div className=\"submit-btn\">\r\n                   <Button key=\"link\" >\r\n                     <Link to={'/'}>\r\n                     {t(\"return\")}\r\n                     </Link>\r\n                    </Button>\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    {t(\"submit\")}\r\n                    </Button>\r\n                  </div>\r\n}\r\n\r\n                </Form>\r\n              \r\n                 \r\n      \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default ForgotPassword;","D:\\labc-web\\labc-web-admin\\src\\components\\ChangePassword\\ChangePassword.tsx",["1304"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport {  Form, Input, message, Button } from 'antd';\r\nimport { Redirect, useParams } from 'react-router';\r\nimport { CHANGE_PASSWORD } from \"../../graphql/password\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\n\r\nconst ChangePassword = ({ }: any) => {\r\n    \r\n    const [ChangePasswordMutation] = useMutation(CHANGE_PASSWORD);\r\n    const [password, setPassword] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n    const { token }: any = useParams();\r\n\r\n\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n const onHandlePasswordChange = (e: any) => {\r\n     setPassword(e.target.value);\r\n }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n\r\n        const { data, errors } = await ChangePasswordMutation({\r\n            variables: {\r\n                 token,\r\n                 newPassword: values.newPassword\r\n            }\r\n        });\r\n\r\n\r\n        if(data?.changePassword && !errors) {\r\n            message.success(t('forgot_password.msg_success'))\r\n            setSuccess(true);\r\n           \r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n        const layout = {\r\n            labelCol: { span: 8 },\r\n            wrapperCol: { span: 16 },\r\n          };\r\n\r\n         if(success) {\r\n            return <Redirect to={'/'} />\r\n         }\r\n\r\n\r\n        return (\r\n            <div className=\"password-form\">\r\n      \r\n                  \r\n                <Form\r\n                  {...layout}\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n\r\n                    <Form.Item label={t('forgot_password.new_password')}\r\n                    name=\"newPassword\"\r\n                    rules={[\r\n                        { required: true, message: 'New Password is empty.' },\r\n                        { min: 6, message: 'New Password must be at least 6 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                onChange={onHandlePasswordChange}\r\n                                maxLength={20}\r\n                                type={'password'}\r\n                                placeholder={t('forgot_password.new_password')} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t('forgot_password.comfirm_password')}\r\n                    name=\"comofirmPassword\"\r\n                    rules={[\r\n                        { required: true, message: t('forgot_password.req_msg_comfirm_password') },\r\n                        { min: 6, message: t(\"forgot_password.min_msg\") },\r\n                        {\r\n                            validator: async (_rule, value) => {\r\n                                if (value.length >= 6 && password.toUpperCase() !== value.toUpperCase()) {\r\n                                    throw new Error(t(\"forgot_password.p_not_eql\"));\r\n                                }\r\n                             \r\n                            }\r\n                        }\r\n                   \r\n                    ]}\r\n\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={20}\r\n                                type={'password'}\r\n\r\n                                placeholder={t('forgot_password.comfirm_password')} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <div className=\"submit-btn\">\r\n                   <Button key=\"link\" >\r\n                     <Link to={'/'}>\r\n                        {/* Return */}\r\n                        {t(\"return\")}\r\n                     </Link>\r\n                    </Button>\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                      {/* Submit */}\r\n                      {t(\"submit\")}\r\n                    </Button>\r\n                  </div>\r\n                </Form>\r\n              \r\n                  \r\n      \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default ChangePassword;","D:\\labc-web\\labc-web-admin\\src\\components\\Login\\LoginForm.tsx",["1305","1306","1307"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { withRouter, Link, Redirect, RouteComponentProps } from 'react-router-dom';\r\nimport { Form, Input, Row, Col, message } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { GET_ME, SIGN_IN } from '../../graphql/user';\r\nimport { randomNum } from '../../utils/randomNum'\r\nimport { loginAction } from \"../../actions/auth\";\r\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\r\n\r\nimport Logo from '../../../src/labc-logo.png';\r\nimport LanguageChanger from '../LanguageChanger';\r\n\r\n\r\ninterface LoginFormProps {\r\n      isAuthenticated?: boolean,\r\n      loginAction: any,\r\n      authUser: any,\r\n      authLoading: any\r\n   \r\n}\r\n\r\nexport interface LoginComponentProps extends RouteComponentProps<any> {\r\n      history: any\r\n}\r\ntype Props = LoginFormProps & LoginComponentProps;\r\ntype InputEvent = React.ChangeEvent<HTMLInputElement>;\r\n\r\n\r\n\r\n const LoginForm: React.FC<Props> = ({ isAuthenticated, authLoading, loginAction }) => {\r\n      const canvasRef = useRef(null);\r\n\r\n      const [loading, setLoading] = useState(true);\r\n      const [code,setCode] = useState(\"\");\r\n      const [LoginUser] = useMutation(SIGN_IN);\r\n      useEffect(() => {\r\n        createCode();\r\n        setLoading(false);\r\n    }, []);\r\n  \r\n      const { t } = useTranslation();\r\n\r\n            const [form] = Form.useForm();\r\n            const [email, setEmail] = useState('');\r\n            const [password, setPassword] = useState('');\r\n            const [enterCode, setEnterCode] = useState('');\r\n            const [focusItem, setFocusItem] = useState(-1);\r\n\r\n          \r\n  \r\n\r\n\r\n\r\n            \r\n        \r\n\r\n     /**\r\n     * 生成验证码\r\n     */\r\n\r\n\r\n    const createCode = () => {\r\n    const canvas = canvasRef?.current;\r\n    const ctx = canvas?.getContext('2d')   \r\n    const chars = [1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\r\n    let code = ''\r\n    ctx?.clearRect(0, 0, 80, 40)\r\n    for (let i = 0; i < 4; i++) {\r\n        const char = chars[randomNum(0, 57)]\r\n        code += char\r\n        ctx.font = randomNum(20, 25) + 'px SimHei'  //设置字体随机大小\r\n        ctx.fillStyle = '#666'\r\n        ctx.textBaseline = 'middle'\r\n        ctx.shadowOffsetX = randomNum(-3, 3)\r\n        ctx.shadowOffsetY = randomNum(-3, 3)\r\n        ctx.shadowBlur = randomNum(-3, 3)\r\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)'\r\n        let x = 80 / 5 * (i + 1)\r\n        let y = 40 / 2\r\n        let deg = randomNum(-25, 25)\r\n        /**设置旋转角度和坐标原点**/\r\n        ctx.translate(x, y)\r\n        ctx.rotate(deg * Math.PI / 180)\r\n        ctx.fillText(char, 0, 0)\r\n        /**恢复旋转角度和坐标原点**/\r\n        ctx.rotate(-deg * Math.PI / 180)\r\n        ctx.translate(-x, -y)\r\n    }\r\n     setCode(code);\r\n}\r\n\r\n            const handleChangePassword = (e: InputEvent) => {\r\n                  e.preventDefault();\r\n                  setPassword(e.target.value)\r\n            }\r\n\r\n            const handleChangeEmail = (e: InputEvent) => {\r\n                  e.preventDefault();\r\n                  setEmail(e.target.value)\r\n            }\r\n\r\n\r\n\r\n\r\n            const  onSubmitData =  async (e: InputEvent) => {\r\n                  e.preventDefault();\r\n                \r\n     \r\n                if(code.toUpperCase() !== enterCode.toUpperCase()) {\r\n                    message.warning('Please Enter Captcha Code Correctly!')\r\n                    return;\r\n                }\r\n\r\n\r\n    \r\n    \r\n                const { data } = await LoginUser({\r\n                    variables: {\r\n                        input: {\r\n                            emailOrID: email,\r\n                            password: password\r\n                        }\r\n                    },\r\n                    update: (cache, { data }) => {\r\n               \r\n                        cache.writeQuery({\r\n                            query: GET_ME,\r\n                            data: {\r\n                              __typename: \"Query\",\r\n                              getMe: data?.signin,\r\n                            },\r\n                          });\r\n                    }\r\n                });\r\n\r\n              \r\n             \r\n                if(data?.signin?.errors) {\r\n                    return message.error(`${data?.signin?.errors.map((error: any) => t(`login.${error.message}`))}`)\r\n                }\r\n\r\n                if(data&&data?.signin) {\r\n                    loginAction(data?.signin);\r\n                }\r\n\r\n             \r\n                \r\n                \r\n\r\n                \r\n            \r\n          \r\n                \r\n              \r\n         \r\n        }\r\n\r\n     \r\n     \r\n        const handleCaptchaChange = (e: InputEvent): void => {\r\n           e.preventDefault();\r\n           setEnterCode(e.target.value)\r\n        }\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n           \r\n//   emailOrUsername\r\n    if(isAuthenticated) {\r\n        return <Redirect to={`/`} />\r\n    } else {\r\n        return (\r\n                          \r\n        \r\n            <div>\r\n\r\n              \r\n            <div className=\"logo\">\r\n                <img src={Logo} />\r\n            </div>\r\n                {/* <h3 className=\"title\">Admin Login</h3> */}\r\n    \r\n    {/* {error&& message.error(`${error.message}`)} */}\r\n    <Form \r\n    form={form}\r\n    hideRequiredMark\r\n    className=\"login-form\"\r\n    name=\"normal_login\"\r\n    initialValues={{ remember: true }}\r\n\r\n  \r\n    >\r\n        <Form.Item\r\n          \r\n            // style={{ marginBottom: 10 }}\r\n            // wrapperCol={{ span: 20, pull:  0 }}\r\n            // labelCol={{ span: 3, pull:  0 }}\r\n            // label={<span className='iconfont icon-User'\r\n            //  style={{ opacity: focusItem === 0 ? 1 : 0.6 }} \r\n            //  />}\r\n            // colon={false}\r\n            name=\"email\" rules={[{ \r\n                required: true, \r\n                message: t(\"login.req_msg_emailOrID\")\r\n             }]}\r\n            >\r\n           \r\n                <Input\r\n                   prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                   onChange={e => handleChangeEmail(e)}\r\n                    // className=\"myInput\"\r\n                    // onFocus={() => this.setState({ focusItem: 0 })}\r\n                    // onBlur={() => this.setState({ focusItem: -1 })}\r\n                    // onPressEnter={this.onSubmit}\r\n                    placeholder={ t(\"login.emailOrID\")}\r\n                />\r\n        \r\n\r\n        </Form.Item>\r\n        <Form.Item\r\n        \r\n            // style={{ marginBottom: 10 }}\r\n            // wrapperCol={{ span: 20, pull:  0 }}\r\n            // labelCol={{ span: 3, pull:  0 }}\r\n            // label={<span className='iconfont icon-suo1' style={{ opacity: focusItem === 1 ? 1 : 0.6 }} />}\r\n            // colon={false}\r\n            \r\n            name=\"password\" rules={[{ \r\n                 required: true,\r\n                 message: t(\"login.req_msg_password\")\r\n                }]}\r\n            \r\n            >\r\n          \r\n                <Input\r\n                    // className=\"myInput\"\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                    onChange={e => handleChangePassword(e)}\r\n                    type=\"password\"\r\n                    // onFocus={() => this.setState({ focusItem: 1 })}\r\n                    // onBlur={() => this.setState({ focusItem: -1 })}\r\n                    // onPressEnter={this.onSubmit}\r\n                    placeholder={ t(\"login.password\")}\r\n                />\r\n           \r\n        </Form.Item>\r\n\r\n     \r\n        \r\n        <Form.Item \r\n        \r\n        >\r\n            \r\n        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n          <Checkbox>  { t(\"login.remember_me\")} </Checkbox>\r\n        </Form.Item>\r\n\r\n        <a className=\"login-form-forgot\" href=\"/forgot-password\">\r\n        { t(\"login.forgot_password\")}\r\n        </a>\r\n      </Form.Item>\r\n\r\n           {/* 验证码 */}\r\n        \r\n           <Form.Item\r\n         \r\n        //  style={{ marginBottom: 20 }}\r\n        //  wrapperCol={{ span: 20, pull:  0 }}\r\n        //  labelCol={{ span: 3, pull:  0 }}\r\n        //  label={<span className='iconfont icon-securityCode-b' style={{ opacity: focusItem === 2 ? 1 : 0.6 }} />}\r\n        //  colon={false}\r\n         \r\n         name=\"captcha\" \r\n         \r\n         rules={[\r\n             { required: true, message: t(\"login.req_msg_verify_code\") },\r\n             {\r\n                 validator: async (_rule, value) => {\r\n                     if (value.length >= 4 && code!== value) {\r\n                         throw new Error(`${t(\"login.verify_code_error\")}`);\r\n                     }\r\n                  \r\n                 }\r\n             }\r\n         ]}\r\n         >\r\n         <Row gutter={8}>\r\n             <Col span={15}\r\n             >\r\n                \r\n\r\n                      <Input\r\n                     // className=\"myInput\"\r\n                     onChange={handleCaptchaChange}\r\n                     onFocus={() => setFocusItem(2)}\r\n                     onBlur={() => setFocusItem(-1)}\r\n                     // onPressEnter={e => onSubmit(e, SignIn)}\r\n                     placeholder={t(\"login.verify_code\")}\r\n                 />\r\n             </Col>\r\n             <Col span={9}>\r\n                 <canvas\r\n                  onClick={createCode} \r\n                  width=\"80\" \r\n                  height='40'\r\n                  ref={canvasRef}\r\n                    />\r\n             </Col>\r\n         </Row>\r\n     </Form.Item>\r\n\r\n     <Form.Item>\r\n            <div className=\"btn-box\">\r\n                <div className=\"loginBtn\" \r\n                onClick={(e: any) => onSubmitData(e)}> { t(\"login.submit\")} </div>\r\n                {/* <div className=\"registerBtn\">\r\n                    <Link to=\"/\">Signup</Link>\r\n                </div> */}\r\n            </div>\r\n        </Form.Item>\r\n\r\n        \r\n\r\n\r\n    </Form>\r\n          {!loading&& <LanguageChanger />}\r\n     \r\n       \r\n          </div>\r\n   \r\n);\r\n\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: any) => ({\r\n    authUser: state.auth?.user,\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    authLoading: state?.auth\r\n })\r\n\r\n const MyLogin =  withRouter(LoginForm);\r\nexport default connect(MapStateToProps, { loginAction })(MyLogin);","D:\\labc-web\\labc-web-admin\\src\\components\\Loading\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\useWindowSize.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MyHeader.tsx",["1308","1309"],"import React, { useEffect, useState } from 'react';\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport {  Menu, Avatar, Switch } from 'antd';\r\nimport {\r\n      MenuUnfoldOutlined,\r\n      CloseCircleFilled,\r\n      MenuFoldOutlined,\r\n      LogoutOutlined,\r\n      SettingOutlined\r\n\r\n    } from '@ant-design/icons';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { logoutAction } from '../../actions/auth';\r\nimport { SIGN_OUT, GET_ME  } from \"../../graphql/user\";\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { useWindowSize } from '../../utils/useWindowSize';\r\nimport SettingModal from \"./Setting\";\r\nimport HeaderNoticeComponent from '../../components/Notice';\r\nimport LanguageChanger from '../../components/LanguageChanger';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\ninterface MyHeaderProps {\r\n      collapsed: any,\r\n      onChangeCollapsed: any,\r\n      onChangeState: any,\r\n      authUser: any,\r\n      loading: boolean,\r\n      \r\n      logoutAction: any\r\n}\r\n\r\ntype MyProps = MyHeaderProps & React.HTMLProps<HTMLButtonElement> & React.HTMLAttributes<HTMLButtonElement>;\r\n \r\nconst stringToBoolean = (string: string) => string === 'false' ? false : !!string;\r\n\r\n\r\nconst MyHeader: React.FC<MyProps> = ({ collapsed, onChangeCollapsed, logoutAction }) => {\r\n     \r\n\r\n  const windowSize = useWindowSize();\r\n  \r\n  const { t } = useTranslation();\r\n  \r\n  const isDesktop = windowSize.width >= 680;\r\n\r\n  const [isDarkMode, setIsDarkMode] = React.useState( stringToBoolean(localStorage.getItem('darkMode')) || false);\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n\r\n  const toggleTheme = (isChecked: any) => {\r\n    setIsDarkMode(isChecked);\r\n    localStorage.setItem('darkMode', isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n  \r\n  useEffect(() => {\r\n     switcher({ theme: isDarkMode ? themes.dark : themes.light })\r\n  }, [isDarkMode]);\r\n  \r\n\r\n\r\n      const [signout] = useMutation(SIGN_OUT);\r\n\r\n       const [isShowSetting, setIsShowSetting] = useState(false);\r\n\r\n       const { data, loading } = useQuery(GET_ME);\r\n\r\n      const authUser = data&&data?.getMe?.user\r\n      // if(error) {\r\n      //       return <p>{error}</p>\r\n      // }\r\n    /**\r\n     * expanding of the sidebar\r\n     */\r\n        const toggleCollapsed = () => {\r\n            onChangeCollapsed(!collapsed)\r\n        }\r\n\r\n        const toggleShowSetting = (visible: boolean) => {\r\n            setIsShowSetting(visible);\r\n        }\r\n   \r\n        /**\r\n         * Logout\r\n         */\r\n         \r\n        const onLogout = async () => {\r\n      \r\n          await signout();\r\n       \r\n          logoutAction();\r\n          \r\n          return window.location.href = process.env.REACT_APP_BASE_URL\r\n\r\n      }\r\n\r\n        // Avoid theme change flicker\r\n        if (status === \"loading\") {\r\n            return null;\r\n        }\r\n      const checkAvatar = collapsed?'block': 'none';\r\n\r\n         return ( <>\r\n             \r\n         <div style={{\r\n           zIndex: 3,\r\n           position: 'relative',\r\n           color: `${collapsed?'#888':`${isDesktop?'#666': '#fff'}`}`\r\n         }}>\r\n         {React.createElement(collapsed ? MenuUnfoldOutlined : (isDesktop?MenuFoldOutlined:CloseCircleFilled), {\r\n          className: 'trigger',\r\n          onClick: toggleCollapsed,\r\n          \r\n        })}\r\n         </div>\r\n\r\n        <div style={\r\n              {\r\n                float: 'right',\r\n                display: 'flex',\r\n                height: 46,\r\n                paddingRight: `${isDesktop?\"60px\":\"0px\"}`\r\n             \r\n           \r\n           \r\n        }} >\r\n\r\n         \r\n          \r\n            <div style={styles.headerItem} >\r\n\r\n                <HeaderNoticeComponent authUser={authUser} />\r\n            \r\n              \r\n\r\n                 <LanguageChanger />\r\n\r\n                 <div className={'switch_theme'}>\r\n                 <Switch checkedChildren=\" ☀\" unCheckedChildren=\"☾\" checked={isDarkMode} onChange={toggleTheme} />\r\n                 </div>\r\n                <Menu mode=\"horizontal\" selectable={false} \r\n                  \r\n                >\r\n                    <SubMenu title={<div style={styles.avatarBox}>\r\n                        <Avatar\r\n                         src={authUser?.avatar_url}\r\n                        style={{ \r\n                          \r\n                          backgroundColor: 'rgb(0, 162, 174)',\r\n                          display: `${!isDesktop&&checkAvatar}`,\r\n                          verticalAlign: 'middle', }} size={42}>\r\n                            {!authUser?.avatar_url&&!loading&&(authUser?.fullName[0]).toUpperCase()}\r\n                        </Avatar>\r\n                        {/* &nbsp;<span>{user.username}</span> */}\r\n                        </div>}>\r\n                        <MenuItemGroup>\r\n                            <Menu.Item key={1} onClick={() => toggleShowSetting(true)}>\r\n                            <SettingOutlined />\r\n\r\n                                {t(\"setting\")}\r\n                                \r\n                            </Menu.Item>\r\n                            {/* <Menu.Item key={77} onClick={() => this.togglePasswordVisible(true)}><Icon type=\"edit\" />Edit Password</Menu.Item> */}\r\n                              <Menu.Item key={2} onClick={onLogout}>\r\n                                {/* icons */}\r\n                               <LogoutOutlined />\r\n                                \r\n                                {t(\"logout\")}\r\n                                </Menu.Item>\r\n                        </MenuItemGroup>\r\n                      \r\n                    </SubMenu>\r\n                </Menu>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <SettingModal toggleVisible={toggleShowSetting} authUser={authUser} visible={isShowSetting} />\r\n        {/* <EditInfoModal toggleVisible={this.toggleInfoVisible} visible={infoVisible} />\r\n        <EditPasswordModal toggleVisible={this.togglePasswordVisible} visible={passwordVisible} /> */}\r\n    </>);\r\n}\r\n\r\nconst styles = {\r\n    headerRight: {\r\n        float: 'right',\r\n        display: 'flex',\r\n        height: '46' ,\r\n\r\n      \r\n       \r\n    },\r\n    headerItem: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n   \r\n     \r\n    },\r\n    avatarBox: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    textname: {\r\n        fontSize: '20px'\r\n    }\r\n}\r\n\r\n\r\n\r\nconst MapStateToProps = (state: any ) => ({\r\n      authUser: state.auth.user as object,\r\n      loading: state.auth.loading as boolean\r\n})\r\nexport default connect(MapStateToProps, { logoutAction })(MyHeader);\r\n","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MyContent.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\actions\\actionTypes.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\password.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\randomNum.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Loading\\Loading.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\Setting.tsx",["1310","1311","1312"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n   LockOutlined\r\n\r\n  } from '@ant-design/icons';\r\n\r\nimport ForgotPasswordModal from \"../../components/ForgotPassword/ForgotPasswordModal\";\r\n\r\nconst SettingModal = ({  toggleVisible, visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [changePasswordView, setChangePasswordView] = useState(false);\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n        //   departmentId: departmentInfo.departmentId,\r\n        //   name: props.departmentInfo.name,\r\n        //   introduction: props.departmentInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, []);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const toggleShowChangePassword = (visible: boolean) => {\r\n      setChangePasswordView(visible);\r\n  }\r\n\r\n   const handleChangePassword = () => {\r\n       toggleShowChangePassword(true);\r\n   }\r\n\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n\r\n    }\r\n  \r\n      \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Setting'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                      {/* Return */}\r\n                      {t(\"return\")}\r\n                    </Button>,\r\n                    // <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    //   Submit\r\n                    // </Button>\r\n                  ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                   \r\n                   \r\n                          <LockOutlined />\r\n                          {'  '}\r\n                       <Button onClick={handleChangePassword}> \r\n                     \r\n                         {/* Change Password */}\r\n                         {t(\"change_password\")}\r\n                       </Button>\r\n                    \r\n        \r\n\r\n\r\n\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n\r\n              <ForgotPasswordModal visible={changePasswordView} toggleVisible={toggleShowChangePassword} />\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default SettingModal;","D:\\labc-web\\labc-web-admin\\src\\components\\LanguageChanger\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Notice\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\ForgotPassword\\ForgotPasswordModal.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\LanguageChanger\\LanguageChanger.tsx",["1313","1314"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport { GlobalOutlined } from '@ant-design/icons';\r\nimport './style.less';\r\nimport { Menu } from 'antd';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\n\r\nconst LanguageChanger = () => {\r\n    let [lang, setLang] = useState(localStorage.getItem('LANGUAGE') || 'en');\r\n    const {i18n} = useTranslation();\r\n\r\n    const handleChangeLang = useCallback(lang => {\r\n        i18n.changeLanguage(lang);\r\n        setLang(lang);\r\n      }, []);\r\n\r\n      \r\n    useEffect(() => {\r\n        i18n.changeLanguage(lang);\r\n        // @ts-ignore\r\n        // setData(MyProjectsData[lang]);\r\n        localStorage.setItem('LANGUAGE', lang);\r\n    }, [lang]);\r\n\r\n     const displayLanguage = (lang: string) => {\r\n         if(lang === 'en') {\r\n             return \"English\"\r\n         }\r\n         if(lang === 'shn') {\r\n             return \"Tai\"\r\n         }\r\n     }\r\n\r\n    return (\r\n        <div className=\"notice\">\r\n             <Menu mode=\"horizontal\">\r\n    \r\n         \r\n            <SubMenu\r\n            icon={ <GlobalOutlined />}\r\n            title={displayLanguage(lang)\r\n                // <Avatar\r\n                //   size=\"small\"\r\n                //   src={require(`../static/images/${currentLang}.svg`)}\r\n                // />\r\n            }\r\n            >\r\n\r\n            <Menu.Item key=\"en\" onClick={() => handleChangeLang('en')}>\r\n                English\r\n            </Menu.Item>\r\n            <Menu.Item key=\"shn\" onClick={() => handleChangeLang('shn')}>\r\n                Tai\r\n            </Menu.Item>\r\n\r\n            </SubMenu>\r\n        </Menu>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LanguageChanger\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Notice\\Notice.tsx",["1315"],"D:\\labc-web\\labc-web-admin\\src\\graphql\\notification.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\NotificationIcon.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\staffPage\\MySider.tsx",["1316"],"import React, { useEffect } from 'react'\r\nimport { Menu } from 'antd';\r\n\r\nimport { tabs, menu } from '../staff_tabs';\r\nimport { RenderMenu } from '../../utils/renderMenu';\r\ninterface MySiderProps {\r\n     activeMenu: any,\r\n     theme: any,\r\n     onChangeState: any,\r\n     panes: any\r\n}\r\n\r\nexport const MySider: React.FC<MySiderProps> = ({ activeMenu, theme,  onChangeState, panes }) => {\r\n            \r\n            useEffect(() => {\r\n                const defaultPane = {\r\n                    name: \"profile\",\r\n                    key: 'Profile',\r\n                    \r\n                }\r\n                addPane(defaultPane);\r\n                \r\n            }, [])\r\n\r\n\r\n    /**\r\n     * 点击侧边栏菜单添加标签页\r\n     */\r\n    const addPane = (item: any) => {\r\n        // console.log('here is item', item)\r\n        if(!panes) {\r\n          \r\n            return false;\r\n        }\r\n        const _panes = panes.slice()\r\n        const _activeMenu = item.key\r\n   \r\n        //如果标签页不存在就添加一个\r\n        if (!_panes.find((i: any) => i.key === _activeMenu)) {\r\n            _panes.push({\r\n                name: item.name,\r\n                key: item.key,\r\n                content: tabs[item.key] || item.name\r\n            })\r\n        }\r\n        // console.log('here is add Pane:', _panes)\r\n        onChangeState({\r\n            _panes,\r\n            _activeMenu\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n            return (\r\n                  <div className={`my-sider ${theme}`}>\r\n                      <div className={`sider-menu-logo ${theme}`}>\r\n                          <a href=\"https://ssbu.edu.mm\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          \r\n                              <h1 className=\"logo-text\">SSBU</h1>\r\n                          </a>\r\n                      </div>\r\n                      <Menu theme={theme} mode=\"inline\" selectedKeys={[activeMenu]} style={{ paddingTop: 16 }}>\r\n                      \r\n                          {RenderMenu(menu, addPane)}\r\n                      </Menu>\r\n                  </div >\r\n              )\r\n}","D:\\labc-web\\labc-web-admin\\src\\pages\\IndexPage\\MySider.tsx",["1317","1318","1319"],"import React, { useEffect } from 'react'\r\nimport { Menu } from 'antd';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { tabs, menu } from '../tabs';\r\nimport { RenderMenu } from '../../utils/renderMenu';\r\n\r\ninterface MySiderProps {\r\n     activeMenu: any,\r\n     theme: any,\r\n     onChangeState: any,\r\n     panes: any,\r\n     authUser: any\r\n}\r\n\r\n\r\nconst AdminMenu = menu.filter(m => m.type === \"admin\");\r\nconst AcademicMenu = menu.filter(m => m.type === \"academic\");\r\n\r\n\r\nexport const MySider: React.FC<MySiderProps> = ({ activeMenu, theme,  onChangeState, panes, authUser }) => {\r\n            \r\n    const { role, privileges, userType } = authUser;\r\n\r\n    const  adminDefaultPane = userType?.admin&&userType?.academic && role === 100 ? {\r\n        name: \"dashboard\",\r\n        key: 'Dashboard',\r\n        \r\n    } : userType?.admin&& role === 100 ?{\r\n        name: \"dashboard\",\r\n        key: 'AdminDashboard',\r\n        \r\n    }:userType?.academic && role === 100?{\r\n        name: \"dashboard\",\r\n        key: 'AcademicDashboard',\r\n        \r\n    }:{\r\n        name: \"dashboard\",\r\n        key: 'Dashboard',\r\n        \r\n    };\r\n         \r\n    useEffect(() => {\r\n                const defaultPane = {\r\n                    name: \"dashboard\",\r\n                    key: 'Dashboard',\r\n                    \r\n                }\r\n                addPane(adminDefaultPane || defaultPane)\r\n                \r\n            }, []);\r\n\r\n            const { t } = useTranslation();\r\n\r\n         \r\n        //  const CustomMenu = userType?.admin&&userType?.academic && role === 100 ?menu: userType?.admin&& role === 100 ?AdminMenu:userType?.academic && role === 100?AcademicMenu:[];\r\n        const CustomMenu = AdminMenu;\r\n    /**\r\n     * 点击侧边栏菜单添加标签页\r\n     */\r\n    const addPane = (item: any) => {\r\n        // console.log('here is item', item)\r\n        if(!panes) {\r\n          \r\n            return false;\r\n        }\r\n        const _panes = panes.slice()\r\n        const _activeMenu = item.key\r\n   \r\n        //如果标签页不存在就添加一个\r\n        if (!_panes.find((i: any) => i.key === _activeMenu)) {\r\n            _panes.push({\r\n                name: item.name,\r\n                key: item.key,\r\n                content: tabs[item.key] || item.name\r\n            })\r\n        }\r\n        // console.log('here is add Pane:', _panes)\r\n        onChangeState({\r\n            _panes,\r\n            _activeMenu\r\n        })\r\n    }\r\n\r\n    // userType?.admin && item.type === \"admin\" || userType?.academic && item.type === \"academic\" || item.type === \"all\"\r\n\r\n\r\n\r\n\r\n\r\n            return (\r\n                  <div className={`my-sider ${theme}`}>\r\n                      <div className={`sider-menu-logo ${theme}`}>\r\n                          <a href=\"https://labc.edu.mm\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          \r\n                              <h1 className=\"logo-text\">{t(\"name\")}</h1>\r\n                          </a>\r\n                      </div>\r\n                      <Menu theme={theme} mode=\"inline\" selectedKeys={[activeMenu]} style={{ paddingTop: 16 }}>\r\n                      \r\n                          {RenderMenu(CustomMenu, addPane)}\r\n                      </Menu>\r\n                  </div >\r\n              )\r\n}","D:\\labc-web\\labc-web-admin\\src\\pages\\teacherPage\\MySider.tsx",["1320"],"import React, { useEffect } from 'react'\r\nimport { Menu } from 'antd';\r\n\r\nimport { tabs, menu } from '../teacher_tabs';\r\ninterface MySiderProps {\r\n     activeMenu: any,\r\n     theme: any,\r\n     onChangeState: any,\r\n     panes: any\r\n}\r\n\r\nexport const MySider: React.FC<MySiderProps> = ({ activeMenu, theme,  onChangeState, panes }) => {\r\n            \r\n            useEffect(() => {\r\n                const defaultPane = {\r\n                    name: \"Profile\",\r\n                    key: 'Profile',\r\n                    \r\n                }\r\n                addPane(defaultPane)\r\n                \r\n            }, [])\r\n\r\n\r\n    /**\r\n     * 点击侧边栏菜单添加标签页\r\n     */\r\n    const addPane = (item: any) => {\r\n        // console.log('here is item', item)\r\n        if(!panes) {\r\n          \r\n            return false;\r\n        }\r\n        const _panes = panes.slice()\r\n        const _activeMenu = item.key\r\n   \r\n        //如果标签页不存在就添加一个\r\n        if (!_panes.find((i: any) => i.key === _activeMenu)) {\r\n            _panes.push({\r\n                name: item.name,\r\n                key: item.key,\r\n                content: tabs[item.key] || item.name\r\n            })\r\n        }\r\n        // console.log('here is add Pane:', _panes)\r\n        onChangeState({\r\n            _panes,\r\n            _activeMenu\r\n        })\r\n    }\r\n\r\n\r\n\r\n            const renderMenu = (menu: any) => {\r\n\r\n                if (Array.isArray(menu)) {\r\n                    return menu.map(item => {\r\n                        if (!item.children || !item.children.length) {\r\n        \r\n                            // console.log('here is icon:', item.icon)\r\n                            return (\r\n                                <Menu.Item key={item.key || item.name} icon={item?.icon} onClick={() => addPane(item)}>\r\n                                   \r\n                                    \r\n        \r\n                                        <span >{item.name}</span>\r\n                                </Menu.Item>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <Menu.SubMenu key={item.key} title={<span>\r\n        \r\n                                    {/* {item.icon && \r\n                                    <Icon type={item.icon} />} */}\r\n        \r\n                                    <span>{item.name}</span></span>}>\r\n                                    {renderMenu(item.children)}\r\n                                </Menu.SubMenu>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n            return (\r\n                  <div className={`my-sider ${theme}`}>\r\n                      <div className={`sider-menu-logo ${theme}`}>\r\n                          <a href=\"https://ssbu.edu.mm\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          \r\n                              <h1 className=\"logo-text\">SSBU</h1>\r\n                          </a>\r\n                      </div>\r\n                      <Menu theme={theme} mode=\"inline\" selectedKeys={[activeMenu]} style={{ paddingTop: 16 }}>\r\n                          {/* <Menu.Item key={'Dashboard'}>\r\n                            <div>\r\n                              \r\n                             \r\n\r\n                                <span>Dashboard</span>\r\n                                </div>\r\n                          </Menu.Item> */}\r\n                          {renderMenu(menu)}\r\n                      </Menu>\r\n                  </div >\r\n              )\r\n}","D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\MySider.tsx",["1321","1322"],"import React, { useEffect } from 'react'\r\nimport { Menu } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { tabs, menu } from '../student_tabs';\r\nimport { RenderMenu } from '../../utils/renderMenu';\r\n\r\ninterface MySiderProps {\r\n     activeMenu: any,\r\n     theme: any,\r\n     onChangeState: any,\r\n     panes: any\r\n}\r\n\r\nexport const MySider: React.FC<MySiderProps> = ({ activeMenu, theme,  onChangeState, panes }) => {\r\n            \r\n            useEffect(() => {\r\n                const defaultPane = {\r\n                    name: \"profile\",\r\n                    key: 'Profile',\r\n                    \r\n                }\r\n                addPane(defaultPane)\r\n                \r\n            }, [])\r\n\r\n\r\n    /**\r\n     * 点击侧边栏菜单添加标签页\r\n     */\r\n    const addPane = (item: any) => {\r\n   \r\n        if(!panes) {\r\n          \r\n            return false;\r\n        }\r\n        const _panes = panes.slice()\r\n        const _activeMenu = item.key\r\n   \r\n        //如果标签页不存在就添加一个\r\n        if (!_panes.find((i: any) => i.key === _activeMenu)) {\r\n            _panes.push({\r\n                name: item.name,\r\n                key: item.key,\r\n                content: tabs[item.key] || item.name\r\n            })\r\n        }\r\n        // console.log('here is add Pane:', _panes)\r\n        onChangeState({\r\n            _panes,\r\n            _activeMenu\r\n        })\r\n    }\r\n\r\n    const { t } = useTranslation();\r\n\r\n\r\n       \r\n\r\n\r\n\r\n            return (\r\n                  <div className={`my-sider ${theme}`}>\r\n                      <div className={`sider-menu-logo ${theme}`}>\r\n                          <a href=\"https://ssbu.edu.mm\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                          \r\n                              <h1 className=\"logo-text\">SSBU</h1>\r\n                          </a>\r\n                      </div>\r\n                      <Menu theme={theme} mode=\"inline\" selectedKeys={[activeMenu]} style={{ paddingTop: 16 }}>\r\n                          {/* <Menu.Item key={'Dashboard'}>\r\n                            <div>\r\n                              \r\n                             \r\n\r\n                                <span>Dashboard</span>\r\n                                </div>\r\n                          </Menu.Item> */}\r\n                          {RenderMenu(menu, addPane)}\r\n                      </Menu>\r\n                  </div >\r\n              )\r\n}","D:\\labc-web\\labc-web-admin\\src\\reducers\\index.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\renderMenu.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\teacher_tabs.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\tabs.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\staff_tabs.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\student_tabs.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\reducers\\auth.ts",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\StudentGradeIndex.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\FeedbackAdminPage.tsx",["1323","1324","1325","1326","1327","1328","1329","1330"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, Rate, message } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, EyeOutlined } from '@ant-design/icons';\r\nimport { DELETE_FEEDBACK, GET_FEEDBACKS } from '../../graphql/feedback';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport ViewFeedback from './ViewFeedback';\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst FeedbackAdminPages = ({ authUser }: any) => {\r\n\r\n\r\n\r\n  const { privileges } = authUser;\r\n \r\n  let searchInput = useRef(null);;\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowViewFeedback, setIsShowViewFeedback] = useState(false);\r\n \r\n  const [feedbackInfo, setFeedbackInfo] = useState({});\r\n\r\n  const { data, loading, error } = useQuery(GET_FEEDBACKS, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n\r\n  });\r\n\r\n\r\n     const feedbacks = data&&data.getFeedbacks?.feedbacks;\r\n\r\n      const [DeleteFeedbackAdminPageMutation] = useMutation(DELETE_FEEDBACK)\r\n\r\n\r\n     const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowViewFeedback = (visible: boolean) => {\r\n    setIsShowViewFeedback(visible)\r\n  };\r\n  const handleViewFeedback = (record: object) => {\r\n    toggleShowViewFeedback(true);\r\n    setFeedbackInfo(record);\r\n  }\r\n\r\n\r\n\r\n  const handleDeleteFeedbackAdminPage = async (record: any) => {\r\n          \r\n    \r\n   const { data, errors }= await DeleteFeedbackAdminPageMutation({\r\n      variables: {\r\n        input: {\r\n          id: record?.id\r\n        }\r\n      },\r\n      refetchQueries: [{\r\n        query: GET_FEEDBACKS,\r\n        variables: {\r\n          authUserId: null,\r\n          skip: 0,\r\n          limit: 0\r\n        }\r\n      }],\r\n      awaitRefetchQueries: true\r\n\r\n    });\r\n\r\n    if(data && !errors) {\r\n         message.success(\"Delete Successfully!\")\r\n    }\r\n }\r\n\r\n\r\n\r\n\r\n    const columns = [\r\n     \r\n  \r\n      {\r\n        title: \"Creator\",\r\n        dataIndex: 'creator',\r\n        key: 'creator',\r\n        ...getColumnSearchProps('content'),\r\n        width: '15%',\r\n\r\n      },\r\n      {\r\n        title: 'Email',\r\n        dataIndex: 'email',\r\n        key: 'email',\r\n        width: '15%',\r\n        ...getColumnSearchProps('email'),\r\n      },\r\n      {\r\n        title: 'Title',\r\n        dataIndex: 'title',\r\n        key: 'title',\r\n        width: '15%',\r\n        ...getColumnSearchProps('title'),\r\n      },\r\n      {\r\n        title: 'Content',\r\n        dataIndex: 'content',\r\n        key: 'content',\r\n        width: '30%',\r\n        ...getColumnSearchProps('content'),\r\n      },\r\n      {\r\n        title: \"Rating\",\r\n        dataIndex: 'rating',\r\n        key: \"rating\",\r\n        render: (rating: any) => (\r\n          <span>\r\n               <Rate value={rating} disabled />\r\n\r\n          </span>\r\n        )\r\n      },\r\n      {\r\n        title: ` `,\r\n        key: 'action',\r\n        render: ( record: any) => (\r\n          <span>\r\n\r\n                <span>\r\n                  <Tag  color={\"blue\"} \r\n                 onClick={() => handleViewFeedback(record)}\r\n                 >\r\n                   <EyeOutlined />\r\n                    View Feedback\r\n                </Tag>\r\n                </span>\r\n          \r\n                  {/* {privileges?.delete&& <Popconfirm title='Are you Sure to Delete' \r\n                    onConfirm={() => handleDeleteFeedbackAdminPage(record)} \r\n                    >\r\n                 \r\n                    <span className='my-a'>\r\n                        <Divider type='vertical' />\r\n                        <DeleteOutlined />\r\n                      \r\n                            Delete\r\n                    </span>\r\n                  \r\n                   </Popconfirm>} */}\r\n         \r\n          </span>\r\n        ),\r\n      },\r\n     \r\n    ];\r\n\r\n    return <>\r\n\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    columns={columns} dataSource={feedbacks} />\r\n\r\n    <ViewFeedback  visible={isShowViewFeedback} viewFeedbackInfo={feedbackInfo} toggleVisible={toggleShowViewFeedback} />\r\n    </>;\r\n  \r\n}\r\n\r\n\r\nconst MapStateToProps = (state: any) => ({\r\n  authUser: state?.auth?.user\r\n})\r\n\r\nexport default connect(MapStateToProps, {})(FeedbackAdminPages);\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Dashboard\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Grade\\index.tsx",["1331"],"import React from 'react'\r\n\r\ninterface GradeProps {\r\n\r\n}\r\n\r\n const Grade: React.FC<GradeProps> = ({}) => {\r\n            return (<div>\r\n                  Here is Grade Component...\r\n            </div>);\r\n}\r\n\r\nexport default Grade;",["1332","1333"],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\StudentCourses\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\feedback.ts",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\GradePage.tsx",["1334","1335","1336"],"import { useQuery } from '@apollo/client';\r\nimport React, { Fragment } from 'react';\r\nimport { Card, Empty, } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from 'react-router-dom';\r\nimport StudentViewGrade from '../../components/Grade/StudentViewGrade';\r\nimport { GET_STUDENT_ACADEMIC_YEAR } from '../../graphql/academicYear';\r\nimport Loading from '../../components/Loading';\r\n\r\nconst GradePage = ({ studentId }: any) => {\r\n\r\n    const { id }: any = useParams();\r\n// console.log('here si studentId', studentId)\r\n\r\n    const { data, loading, error } = useQuery(GET_STUDENT_ACADEMIC_YEAR, {\r\n        variables: {\r\n            studentId: studentId || id,\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        // skip: !id || studentId\r\n\r\n    });\r\n\r\n     if(loading || error) {\r\n         return <Loading />\r\n     }\r\n     if(error) {\r\n         console.log('hre is error:', error.message)\r\n     }\r\n\r\n\r\n\r\n    // const semesters = data&&data.getStudentSemester || [];\r\n    const academicYears = data&&data.getStudentAcademicYear || [];\r\n   \r\n  \r\n\r\n    return (\r\n        <Fragment>\r\n         \r\n             \r\n            {academicYears.length > 0 ? academicYears.map((academicYear: any) => (\r\n                <Card bordered={false} key={academicYear.id} className={'view_grade'}>\r\n                 \r\n                 <h3 className=\"t_center\" >{academicYear.academicYearName}</h3>\r\n             \r\n                    \r\n                                  {academicYear?.semester.length > 0 ? academicYear?.semester.map((semester: any) => (\r\n                                    <div  key={semester.id} >\r\n                                    \r\n                                    <h3 className=\"t_center\" >{semester.semesterName}</h3>\r\n                                 \r\n                                    <StudentViewGrade grade={semester.grade} studentId={id || studentId} academicYearId={academicYear?.id}   />\r\n                                    <br />\r\n                                    </div>\r\n\r\n                                )): <div\r\n                                style={{\r\n                                    padding: '2rem'\r\n                                }}\r\n                                >\r\n                                    \r\n                                    <Empty />\r\n\r\n                                    </div>}\r\n\r\n                              </Card>\r\n\r\n          \r\n\r\n\r\n                 \r\n                            )): <div\r\n                            style={{\r\n                                padding: '2rem'\r\n                            }}\r\n                            >\r\n                                \r\n                                <Empty />\r\n\r\n                                </div>}\r\n          \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n   authUser: state.auth?.user\r\n}))\r\nexport default connect()(GradePage)\r\n","D:\\labc-web\\labc-web-admin\\src\\graphql\\academicYear.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\Feedbacks.tsx",["1337"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, Rate } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, EyeOutlined } from '@ant-design/icons';\r\nimport { DELETE_FEEDBACK, GET_FEEDBACKS } from '../../graphql/feedback';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport EditFeedback from './EditFeedback';\r\nimport CreateFeedback from \"./CreateFeedback\";\r\nimport Loading from '../Loading';\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Feedbacks = ({ authUser }: any) => {\r\n\r\n  const { privileges } = authUser;\r\n \r\n  let searchInput = useRef(null);;\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditFeedback, setIsShowEditFeedback] = useState(false);\r\n  const [isShowCreateFeedback, setIsShowCreateFeedback] = useState(false);\r\n  const [isShowViewFeedback, setIsShowViewFeedback] = useState(false);\r\n\r\n  const [feedbackInfo, setFeedbackInfo] = useState({});\r\n\r\n  const { data, loading, error } = useQuery(GET_FEEDBACKS, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n\r\n  });\r\n\r\n     const feedbacks = data&&data.getFeedbacks?.feedbacks;\r\n     const [DeleteFeedbackMutation] = useMutation(DELETE_FEEDBACK)\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n  const toggleShowEditFeedback = (visible: boolean) => {\r\n      setIsShowEditFeedback(visible);\r\n  }\r\n  const toggleShowViewFeedback = (visible: boolean) => {\r\n    setIsShowViewFeedback(visible)\r\n  };\r\n  const handleViewFeedback = (record: object) => {\r\n    toggleShowViewFeedback(true);\r\n    setFeedbackInfo(record);\r\n  }\r\n\r\n\r\n  const handleEditFeedback = (record: object) => {\r\n      toggleShowEditFeedback(true);\r\n      setFeedbackInfo(record);\r\n  }\r\n\r\n  const toggleShowCreateFeedback = (visible: boolean) => {\r\n    setIsShowCreateFeedback(visible);\r\n}\r\n\r\n\r\n\r\nconst handleCreateFeedback = (record: object) => {\r\n    toggleShowCreateFeedback(true);\r\n    setFeedbackInfo(record);\r\n}\r\n\r\n  const handleDeleteFeedback = async (record: any) => {\r\n          \r\n    \r\n    await DeleteFeedbackMutation({\r\n      variables: {\r\n        input: {\r\n          id: record?.id\r\n        }\r\n      },\r\n      refetchQueries: [{\r\n        query: GET_FEEDBACKS,\r\n        variables: {\r\n          authUserId: authUser?.id,\r\n          skip: 0,\r\n          limit: 0\r\n        }\r\n      }],\r\n      awaitRefetchQueries: true\r\n\r\n    })\r\n }\r\n\r\n const checkPagination: any = feedbacks?.length > 10;\r\n\r\n\r\n\r\n    const columns = [\r\n     \r\n      {\r\n        title: 'Title',\r\n        dataIndex: 'title',\r\n        key: 'title',\r\n        width: '15%',\r\n        ...getColumnSearchProps('title'),\r\n      },\r\n      {\r\n        title: 'Content',\r\n        dataIndex: 'content',\r\n        key: 'content',\r\n        width: '12%',\r\n        ...getColumnSearchProps('content'),\r\n        render: (content: string) => (\r\n          <span>\r\n          {content.substring(0,60)}...\r\n        </span>\r\n         ),\r\n      },\r\n      {\r\n        title: 'Course',\r\n        dataIndex: 'course',\r\n        key: 'course',\r\n        width: '12%',\r\n        render: (course: any) => (\r\n            <span>\r\n               <Tag  \r\n  \r\n                 color={\"geekblue\" } \r\n                 key={'department'}\r\n            \r\n               >\r\n                  {course&&course.name}\r\n\r\n               </Tag>\r\n            </span>\r\n          )\r\n\r\n      },\r\n      {\r\n        title: \"Student\",\r\n        dataIndex: 'creator',\r\n        key: 'creator',\r\n        render: (creator: any) => (\r\n          <span>\r\n             <Tag  \r\n\r\n               color={\"geekblue\" } \r\n               key={'department'}\r\n          \r\n             >\r\n                {creator&&creator.name}\r\n             </Tag>\r\n          </span>\r\n        )\r\n\r\n      },\r\n      {\r\n        title: \"Rating\",\r\n        dataIndex: 'rating',\r\n        key: \"rating\",\r\n        width: '10%',\r\n        render: (rating: any) => (\r\n          <span>\r\n               <Rate value={rating} disabled />\r\n\r\n          </span>\r\n        )\r\n      },\r\n      {\r\n        title: `${(privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n        key: 'action',\r\n        render: ( record: any) => (\r\n          <span>\r\n\r\n\r\n              {<span>\r\n                \r\n                <EditOutlined />\r\n                <Tag  color={\"blue\"} \r\n                onClick={() => handleEditFeedback(record)}\r\n                >\r\n                    Edit\r\n                </Tag>\r\n\r\n                </span>}\r\n\r\n                {<span>\r\n                \r\n                <EditOutlined />\r\n                <Tag  color={\"blue\"} \r\n                onClick={() => handleViewFeedback(record)}\r\n                >\r\n                   <EyeOutlined />\r\n                    View Feedback\r\n                </Tag>\r\n\r\n                </span>}\r\n            \r\n          \r\n               {<Popconfirm title='Are you Sure to Delete' \r\n                    onConfirm={() => handleDeleteFeedback(record)} \r\n                    >\r\n                 \r\n                    <span className='my-a'>\r\n                        <Divider type='vertical' />\r\n                        <DeleteOutlined />\r\n                      \r\n                            Delete\r\n                    </span>\r\n                  \r\n                   </Popconfirm>}\r\n         \r\n          </span>\r\n        ),\r\n      },\r\n     \r\n    ];\r\n\r\n    if(loading || error) {\r\n      return <Loading />;\r\n    }\r\n    \r\n    return <>\r\n\r\n     {<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem'\r\n         }}\r\n        onClick={handleCreateFeedback}\r\n        >\r\n         \r\n            Create Feedback\r\n        </Button>}\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    pagination={checkPagination}\r\n\r\n    scroll={{ x: 500 }}\r\n    columns={columns} dataSource={feedbacks} />\r\n\r\n    {!loading &&  <EditFeedback  visible={isShowEditFeedback} feedbackInfo={feedbackInfo} toggleVisible={toggleShowEditFeedback} authUser={authUser} /> }\r\n  \r\n    {!loading && <CreateFeedback visible={isShowCreateFeedback} feedbackInfo={feedbackInfo} toggleVisible={toggleShowCreateFeedback} authUser={authUser} /> }\r\n    </>;\r\n  \r\n}\r\n\r\n\r\nconst MapStateToProps = (state: any) => ({\r\n  authUser: state?.auth?.user\r\n})\r\n\r\nexport default connect(MapStateToProps, {})(Feedbacks);\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Dashboard\\Dashboard.tsx",["1338","1339"],"import React, { useState } from 'react';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_ALL_DATA } from '../../graphql/data';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst DashboardPage = ({ academic = true, admin = true}: any) => {\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const { data, loading, error } = useQuery(GET_ALL_DATA, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n\r\n  });\r\n\r\n\r\n\r\nlet nameWithTranslation: string[] = [];\r\n\r\n  const MyDataAll = data?._getAllData?.data?.map((data: any) => {\r\n  \r\n     nameWithTranslation.push(t(data.name));\r\n\r\n    return {\r\n        name: t(data.name),\r\n        value: data.value\r\n\r\n    };\r\n  });\r\n\r\n\r\n  const option = {\r\n    title : {\r\n      text: t(\"name\"),\r\n      \r\n      subtext: `${\"LABC EChart Data\"}`,\r\n      x:'center',\r\n      textStyle: {\r\n        color: '#007bfe'\r\n        }\r\n    },\r\n    tooltip : {\r\n      trigger: 'item',\r\n      formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n    },\r\n    legend: {\r\n      orient: 'vertical',\r\n      bottom: 'bottom',\r\n      data: nameWithTranslation,\r\n      textStyle: {\r\n        color: '#6EB1F6'\r\n        }\r\n    },\r\n    series : [\r\n      {\r\n      name: 'total',\r\n      type: 'pie',\r\n      radius : '55%',\r\n      center: ['50%', '60%'],\r\n      data: MyDataAll,\r\n      itemStyle: {\r\n        emphasis: {\r\n        shadowBlur: 10,\r\n        shadowOffsetX: 0,\r\n        shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n        }\r\n      }\r\n      }\r\n    ]\r\n  };\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  function onChartReady(echarts: any) {\r\n    // console.log('echarts is ready', echarts);\r\n  }\r\n\r\n  function onChartClick(param: any, echarts: any) {\r\n    console.log(param, echarts);\r\n    setCount(count + 1);\r\n  };\r\n\r\n  function onChartLegendselectchanged(param: any, echarts: any) {\r\n    console.log(param, echarts);\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      padding: '1rem',\r\n   \r\n    }}>\r\n      <ReactECharts\r\n        option={option}\r\n        style={{ height: 400, fontFamily: \"GHK Muse\"}}\r\n        onChartReady={onChartReady}\r\n        onEvents={{\r\n          'click': onChartClick,\r\n          'legendselectchanged': onChartLegendselectchanged\r\n         }}\r\n      />\r\n      {/* <div>Click Count: {count}</div>\r\n      <div>Open console, see the log detail.</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\DownloadPage.tsx",["1340","1341","1342"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from 'react-redux';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, DownloadOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditDownloadPage from './EditDownloadPage';\r\nimport { DELETE_DOWNLOAD, GET_DOWNLOADS_BY_TYPE } from '../../graphql/download';\r\nimport CreateDownloadPage from './CreateDownloadPage';\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any,\r\n  type: string\r\n\r\n}\r\nconst DownloadAdminPage = ({ authUser, type }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n  \r\n  const { data, loading, error } = useQuery(GET_DOWNLOADS_BY_TYPE, {\r\n    variables: {\r\n     type: type\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n  const downloads = data&&data.getDownloadsByType?.downloads;\r\n\r\n\r\n  const [DeleteDownloadMutation] = useMutation(DELETE_DOWNLOAD)\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditDownload, setIsShowEditDownload] = useState(false);\r\n  const [isShowCreateDownload, setIsShowCreateDownload] = useState(false);\r\n  const [downloadInfo, setDownloadInfo] = useState({});\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditDownload = (visible: boolean) => {\r\n    setIsShowEditDownload(visible);\r\n}\r\nconst handleEditDownload = (record: object) => {\r\n    toggleShowEditDownload(true);\r\n    setDownloadInfo(record);\r\n}\r\n\r\nconst toggleShowCreateDownload = (visible: boolean) => {\r\n  setIsShowCreateDownload(visible);\r\n}\r\nconst handleCreateDownload = (record: object) => {\r\n  toggleShowCreateDownload(true);\r\n  setDownloadInfo(record);\r\n}\r\n\r\nconst handleDeleteDownload = async (record: any) => {\r\n   await DeleteDownloadMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_DOWNLOADS_BY_TYPE,\r\n      variables: {\r\n        type\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\nif(loading || error) {\r\n  return <Loading />\r\n}\r\n\r\nconst ActionObj = (privileges?.create || privileges?.update || privileges?.delete) ? {\r\n  title: 'Action',\r\n  key: 'action',\r\n  render: ( record: any) => (\r\n    <div>\r\n          {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditDownload(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n   \r\n    \r\n            {privileges?.delete&&<Popconfirm title='Are you Sure to Delete？' \r\n              onConfirm={() => handleDeleteDownload(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                      Delete\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n   }\r\n    </div>\r\n  ),\r\n  }: {}\r\n\r\n\r\n    const columns = [\r\n \r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '25%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: 'Content',\r\n        dataIndex: 'content',\r\n        key: 'content',\r\n        width: '25%',\r\n        ...getColumnSearchProps('content'),\r\n        render: (content: string) => {\r\n           \r\n          return <span>\r\n             {content.substring(0,60)}...\r\n          </span>\r\n      },\r\n      },\r\n      {\r\n        title: 'Links',\r\n        dataIndex: 'links',\r\n        key: 'links',\r\n        width: '25%',\r\n        ...getColumnSearchProps('link'),\r\n        render: (links: any) => {\r\n       \r\n          return (\r\n            <span>\r\n                {links?.map((link: string, index: number) => ( <Tag key={index}>\r\n                     <a href={link} download target={'_blank'}>\r\n                       <DownloadOutlined /> {' '}\r\n                        Download\r\n                     </a>\r\n                 </Tag>))}\r\n            </span>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        title: 'Type',\r\n        key: 'type',\r\n        render: ( record: any) => (\r\n            <Tag color={'blue'}>\r\n                  { record?.academic &&  record?.admin ? \"Admin & Academic \": record?.academic &&record?.student ? \"Student\" : record?.admin ? \"Admin\": record?.academic ? \"Academic\" : \"\"}\r\n            </Tag>\r\n            )\r\n      },\r\n      ActionObj\r\n     \r\n     \r\n    ];\r\n\r\n    const OptionsColumns = columns.filter((column) => JSON.stringify(column) !== '{}');\r\n\r\n   \r\n   return <>\r\n\r\n        {privileges?.create&& <Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateDownload}\r\n        >\r\n\r\n           <FileAddFilled />\r\n         \r\n            Create Download Link\r\n        </Button>\r\n        }\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 500 }}\r\n    columns={OptionsColumns} \r\n    dataSource={downloads} />\r\n  \r\n     {privileges?.update&&    <EditDownloadPage visible={isShowEditDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowEditDownload}  />}\r\n    {privileges?.delete&&   <CreateDownloadPage visible={isShowCreateDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowCreateDownload} />}\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user,\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(DownloadAdminPage);","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\Programme.tsx",["1343","1344"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditProgramme from './EditProgramme';\r\nimport { DELETE_PROGRAMME, GET_PROGRAMMES } from '../../graphql/programme';\r\nimport CreateProgramme from './CreateProgramme';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loading from '../Loading';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Programmes = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  const { privileges } = authUser;\r\n  const { data, loading, error } = useQuery(GET_PROGRAMMES, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n  const programmes = data&&data.getProgrammes.programmes;\r\n\r\n  const { t } = useTranslation();\r\n  const [DeleteProgrammeMutation] = useMutation(DELETE_PROGRAMME)\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditProgramme, setIsShowEditProgramme] = useState(false);\r\n  const [isShowCreateProgramme, setIsShowCreateProgramme] = useState(false);\r\n  const [programmeInfo, setProgrammeInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditProgramme = (visible: boolean) => {\r\n    setIsShowEditProgramme(visible);\r\n}\r\nconst handleEditProgramme = (record: object) => {\r\n    toggleShowEditProgramme(true);\r\n    setProgrammeInfo(record);\r\n}\r\n\r\nconst toggleShowCreateProgramme = (visible: boolean) => {\r\n  setIsShowCreateProgramme(visible);\r\n}\r\nconst handleCreateProgramme = (record: object) => {\r\n  toggleShowCreateProgramme(true);\r\n  setProgrammeInfo(record);\r\n}\r\n\r\nconst handleDeleteProgramme = async (record: any) => {\r\n  if(!privileges?.update) return false;\r\n\r\n   await DeleteProgrammeMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_PROGRAMMES,\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: t(\"p_id\"),\r\n        dataIndex: 'programmeId',\r\n        key: 'programmeId',\r\n        width: '15%',\r\n \r\n        ...getColumnSearchProps('programmeId'),\r\n      },\r\n      {\r\n        title: t(\"p_name\"),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '20%',\r\n\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: t(\"p_intro\"),\r\n        dataIndex: 'introduction',\r\n        key: 'introduction',\r\n        width: '20%',\r\n        ...getColumnSearchProps('introduction'),\r\n      },\r\n      {\r\n        title: t(\"type\"),\r\n        dataIndex: \"programmeType\",\r\n        key: \"programmeeType\",\r\n        width: \"20%\",\r\n        ...getColumnSearchProps('programmeType'),\r\n      },\r\n      {\r\n        title: `${(privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n        key: 'action',\r\n        render: ( record: any) => (\r\n          <div>\r\n               {privileges?.update&&<span>\r\n                <EditOutlined />\r\n                <Tag  color={\"blue\"} \r\n                onClick={() => handleEditProgramme(record)}\r\n                >\r\n                    <a>\r\n                    Edit\r\n                    </a>\r\n                </Tag>\r\n                 </span>}\r\n         \r\n          \r\n                 {privileges?.delete&&<span>\r\n                  <Popconfirm title='Are you Sure to Delete？' \r\n                    onConfirm={() => handleDeleteProgramme(record)} \r\n                    >\r\n                    <a>\r\n                    <span className='my-a'>\r\n                        <Divider type='vertical' />\r\n                        <DeleteOutlined />\r\n                      \r\n                            Delete\r\n                    </span>\r\n                    </a>\r\n                   </Popconfirm>\r\n\r\n                   </span>}\r\n         \r\n          </div>\r\n        ),\r\n      },\r\n     \r\n    ];\r\n\r\n    if(loading || error) {\r\n      return <Loading />;\r\n    }\r\n    return <>\r\n\r\n       {privileges?.create&&<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateProgramme}\r\n        >\r\n            <FileAddFilled />\r\n            Create Programme\r\n            \r\n        </Button>}\r\n\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 500 }}\r\n    columns={columns} \r\n    dataSource={programmes} />\r\n  \r\n    {privileges?.update&& <EditProgramme visible={isShowEditProgramme} programmeInfo={programmeInfo} toggleVisible={toggleShowEditProgramme}  />}\r\n    {privileges?.create&&   <CreateProgramme visible={isShowCreateProgramme} programmeInfo={programmeInfo} toggleVisible={toggleShowCreateProgramme} />}\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user,\r\n}))\r\nexport default connect((MapStateToProps), {})(Programmes);","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Students.tsx",["1345","1346","1347","1348","1349","1350","1351","1352","1353","1354"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, message, Menu, Dropdown } from 'antd';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { graphql } from 'react-apollo';\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { SearchOutlined,\r\n         EditOutlined,\r\n         DeleteOutlined,\r\n         UserAddOutlined, \r\n         UserOutlined,\r\n         DownOutlined,\r\n         EyeOutlined\r\n        \r\n        } from '@ant-design/icons';\r\n\r\nimport { useTranslation } from 'react-i18next';\r\nimport Student from './Student';\r\nimport { GET_STUDENTS, DELETE_STUDENT } from '../../graphql/student';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport CreateStudent from \"./CreateStudent\";\r\nimport EditStudent from \"./EditStudent\";\r\nimport StudentGrade from \"./StudentGrade\";\r\nimport { useMutation } from '@apollo/client';\r\nimport ViewGrade from './Views/ViewGrade';\r\nimport ViewProfile from './Views/ViewProfile';\r\nimport ViewTranscript from './Views/ViewTranscript';\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Students = ({ students, loading, authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  const { t } = useTranslation();\r\n  const { privileges } = authUser;\r\n \r\n  const [DeleteStudent] = useMutation(DELETE_STUDENT);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowViewDetail, setIsShowViewDetail] = useState(false);\r\n  const [isShowCreateStudent, setIsShowCreateStudent] = useState(false);\r\n  const [isShowEditStudent, setIsShowEditStudent] = useState(false);\r\n  const [isShowStudentGrade, setShowStudentGrade] = useState(false);\r\n  const [isShowViewStudentGrade, setShowViewStudentGrade] = useState(false);\r\n  const [isShowViewStudentProfile, setShowViewStudentProfile] = useState(false);\r\n  const [isShowViewStudentTranscript, setShowViewStudentTranscript] = useState(false);\r\n\r\n  const [studentInfo, setStudentInfo] = useState({});\r\n\r\n  const data = students?.getStudents;\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n  \r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`${t(\"search\")} ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n             {t(\"search\")}\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              {t(\"reset\")}\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n  \r\n        setTimeout(() => searchInput.current.select(), 500);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('');\r\n\r\n  };\r\n\r\n\r\n  const toggleShowViewDetail = (visible: boolean) => {\r\n      setIsShowViewDetail(visible);\r\n  }\r\n\r\n  const handleViewStudent = (record: object) => {\r\n      toggleShowViewDetail(true);\r\n      setStudentInfo(record);\r\n  }\r\n\r\n  const toggleShowCreateStudent = (visible: boolean) => {\r\n    setIsShowCreateStudent(visible);\r\n}\r\n\r\nconst handleCreateStudent = (record: object) => {\r\n    toggleShowCreateStudent(true);\r\n\r\n}\r\n\r\nconst toggleShowEditStudent = (visible: boolean) => {\r\n  setIsShowEditStudent(visible);\r\n}\r\n\r\nconst handleEditStudent = (record: object) => {\r\n  toggleShowEditStudent(true);\r\n  setStudentInfo(record);\r\n}\r\n\r\n\r\nconst toggleShowStudentGrade = (visible: boolean) => {\r\n  setShowStudentGrade(visible);\r\n}\r\nconst handleStudentGrade = (record: object) => {\r\n  toggleShowStudentGrade(true);\r\n  setStudentInfo(record);\r\n}\r\n\r\n\r\nconst toggleShowViewStudentGrade = (visible: boolean) => {\r\n  setShowViewStudentGrade(visible);\r\n}\r\nconst handleViewStudentGrade = (record: object) => {\r\n  toggleShowViewStudentGrade(true);\r\n  setStudentInfo(record);\r\n}\r\n\r\nconst toggleShowViewStudentProfile = (visible: boolean) => {\r\n  setShowViewStudentProfile(visible);\r\n}\r\nconst handleViewStudentProfile = (record: object) => {\r\n  toggleShowViewStudentProfile(true);\r\n  setStudentInfo(record);\r\n}\r\n\r\n\r\nconst toggleShowViewStudentTranscript = (visible: boolean) => {\r\n  setShowViewStudentTranscript(visible);\r\n}\r\nconst handleViewStudentTranscript = (record: object) => {\r\n  toggleShowViewStudentTranscript(true);\r\n  setStudentInfo(record);\r\n}\r\n\r\n\r\nconst handleDeleteStudent = async (record: any) => {\r\n\r\n const { data } =  await DeleteStudent({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n    \r\n      query: GET_STUDENTS,\r\n      variables: {\r\n          authUserId: null,\r\n          skip: 0,\r\n          limit: 0\r\n      },\r\n  }],\r\n  awaitRefetchQueries: true\r\n  \r\n   })\r\n\r\nif(data) {\r\n  message.success('Delete Student Successfully!')\r\n}\r\n\r\n}\r\n\r\n\r\nconst menu = (record: any) => (\r\n  <Menu>\r\n     <Menu.Item  onClick={() => handleViewStudentProfile(record)}>\r\n      <a>\r\n        View Profile\r\n      </a>\r\n    </Menu.Item>\r\n\r\n    <Menu.Item onClick={() => handleViewStudentTranscript(record)}>\r\n      <a>\r\n         View Transcript\r\n      </a>\r\n    </Menu.Item>\r\n    <Menu.Item  onClick={() => handleViewStudentGrade(record)}> \r\n      <a>\r\n         View Grade\r\n      </a>\r\n    </Menu.Item>\r\n\r\n    {/* <Menu.Item danger>a danger item</Menu.Item> */}\r\n  </Menu>\r\n);\r\n\r\n\r\n\r\nconst ActionObj = (privileges?.read || privileges?.create || privileges?.update || privileges?.delete)?{\r\n  title: `${(privileges?.read || privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n  key: 'action',\r\n  render: ( record: any) => (       \r\n    <div>\r\n          {privileges?.read&&<span>\r\n            \r\n            <UserOutlined />\r\n            {\" \"}\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleViewStudent(record)}\r\n            >\r\n                <a>\r\n                  Profile\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n\r\n         {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            {\" \"}\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditStudent(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n           </span>}\r\n\r\n     \r\n        {privileges?.read&&<span\r\n         style={{\r\n          padding: '1rem'\r\n        }}\r\n        >\r\n          <EditOutlined /> {\" \"}\r\n          <span\r\n         \r\n          onClick={() => handleStudentGrade(record)}\r\n          >\r\n              <a>\r\n                 Grade\r\n              </a>\r\n          </span>\r\n          </span>}\r\n\r\n          {privileges?.read && <span>\r\n            \r\n           \r\n             <Dropdown overlay={menu(record)} overlayStyle={{\r\n                   width: '132px'\r\n             }}>\r\n             \r\n               <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                <EyeOutlined />    Views <DownOutlined />\r\n               </a>\r\n             </Dropdown>\r\n            </span>}\r\n\r\n\r\n\r\n   \r\n        {privileges?.delete&&\r\n              <Popconfirm \r\n              \r\n              title='Are you Sure to Delete？' \r\n              onConfirm={() => handleDeleteStudent(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                   <Tag color={'red'}>\r\n                     Delete\r\n                   </Tag>\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n        }\r\n\r\n   \r\n    </div>\r\n  ),\r\n}:{};\r\n\r\n\r\n//  if(loading) {\r\n//    return <Loading />;\r\n//  }\r\n\r\n    const columns = [\r\n      {\r\n        title: 'Avatar',\r\n        dataIndex: 'avatar_url',\r\n        key: 'avatar_url',\r\n        width: '5%',\r\n        align: \"center\" as \"center\",\r\n        render: (avatar_url: string) => (\r\n         <Avatar shape=\"square\" src={avatar_url} />\r\n        ),\r\n        // ...getColumnSearchProps('studentId'),\r\n      },\r\n    \r\n      {\r\n        title: 'StudentID',\r\n        dataIndex: 'studentId',\r\n        key: 'studentId',\r\n       \r\n        width: '6%',\r\n        ...getColumnSearchProps('studentId'),\r\n      },\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n     \r\n        width: '10%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n          title: \"Email\",\r\n          dataIndex: \"email\",\r\n          key: \"email\",\r\n          width: '8%',\r\n          ...getColumnSearchProps('email'),\r\n      },\r\n      {\r\n        title: 'Programme',\r\n        dataIndex: 'programme',\r\n        key: 'programme',\r\n        width: '6%',\r\n        render: (programme: any) => (\r\n          <span>\r\n           \r\n                <Tag color={'geekblue'} key={'programme'}>\r\n                   {programme&&programme.name}\r\n                </Tag>\r\n\r\n          </span>\r\n        ),\r\n        \r\n      },\r\n      {\r\n        title: 'Academic Year',\r\n        dataIndex: 'studentAcademicYear',\r\n        key: 'studentAcademicYear',\r\n        width: '6%',\r\n        ...getColumnSearchProps('studentAcademicYear'),\r\n      },\r\n      {\r\n        title: 'Date Of Admission',\r\n        dataIndex: 'dateOfAdmission',\r\n        key: 'dateOfAdmission',\r\n        width: '6%',\r\n      \r\n        ...getColumnSearchProps('dateOfAdmission'),\r\n      },\r\n     \r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        width: '6%',\r\n\r\n        ...getColumnSearchProps('gender'),\r\n      },\r\n      ActionObj\r\n     \r\n    ];\r\n\r\n    const newColumns = columns.filter(value => JSON.stringify(value) !== '{}');\r\n   \r\n    return <>\r\n\r\n            {privileges?.create&&<Button\r\n              type={'primary'}\r\n              style={{\r\n                          margin: '1rem 0rem'\r\n                        }}\r\n                        onClick={handleCreateStudent}\r\n                        >\r\n              <UserAddOutlined />\r\n                 Create Student\r\n             </Button>}\r\n\r\n             \r\n    <Table \r\n    columns={newColumns}\r\n    scroll={{ x: 500 }}\r\n    dataSource={data}   \r\n     bordered\r\n     rowKey='id' />\r\n   {!loading&&privileges?.read&&<Student visible={isShowViewDetail} studentInfo={studentInfo} toggleVisible={toggleShowViewDetail}  />}\r\n   \r\n    {!loading&&privileges?.create&& <CreateStudent visible={isShowCreateStudent} studentInfo={studentInfo} toggleVisible={toggleShowCreateStudent}  />}\r\n    {!loading&&privileges?.update&& <EditStudent  visible={isShowEditStudent} studentInfo={studentInfo} toggleVisible={toggleShowEditStudent} />}\r\n\r\n    {!loading&&privileges?.read&& <StudentGrade authUser={authUser} visible={isShowStudentGrade} studentInfo={studentInfo}  toggleVisible={toggleShowStudentGrade} />}\r\n  \r\n    {!loading&&privileges?.read&& <ViewGrade studentInfo={studentInfo} visible={isShowViewStudentGrade} toggleVisible={toggleShowViewStudentGrade}  />}\r\n    {!loading&&privileges?.read&& <ViewProfile studentInfo={studentInfo} visible={isShowViewStudentProfile} toggleVisible={toggleShowViewStudentProfile}  />}\r\n\r\n    {!loading&&privileges?.read&& <ViewTranscript studentInfo={studentInfo} visible={isShowViewStudentTranscript} toggleVisible={toggleShowViewStudentTranscript}  />}\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\nconst StudentsPages = connect(MapStateToProps, {})(Students);\r\nexport default compose(\r\n  graphql(GET_STUDENTS, {\r\n    options: (props) => ({\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      }\r\n    }),\r\n    props: ({ data }) => ({\r\n      loading: data.loading,\r\n      students: data,\r\n  \r\n    })\r\n  })\r\n)(StudentsPages);","D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\TeacherProfile.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\Courses.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Staffs.tsx",["1355","1356","1357"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, message } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SearchOutlined, EditOutlined,\r\n   DeleteOutlined,\r\n   EyeOutlined,\r\n   UserAddOutlined } from '@ant-design/icons';\r\nimport Staff from './Staff';\r\nimport { GET_STAFFS, DELETE_STAFF } from '../../graphql/staff';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport CreateStaff from \"./CreateStaff\";\r\nimport EditStaff from \"./EditStaff\";\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Staffs = ({ authUser }: any) => {\r\n\r\n  const { t } = useTranslation();\r\n\r\n  const { privileges  } = authUser;\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const [DeleteStaff] = useMutation(DELETE_STAFF);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowViewDetail, setIsShowViewDetail] = useState(false);\r\n  const [isShowCreateStaff, setIsShowCreateStaff] = useState(false);\r\n  const [isShowEditStaff, setIsShowEditStaff] = useState(false);\r\n  const [staffInfo, setStaffInfo] = useState({});\r\n\r\n  const { data, loading, error} = useQuery(GET_STAFFS, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n\r\n  });\r\n  const staffs = data?.getStaffs;\r\n\r\n  \r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n  \r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`${t(\"search\")} ${t(`staffs.${dataIndex}`)}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n            {t(\"search\")}\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            {t(\"reset\")}\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n  \r\n        setTimeout(() => searchInput.current.select(), 500);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n\r\n  const toggleShowViewDetail = (visible: boolean) => {\r\n      setIsShowViewDetail(visible);\r\n  }\r\n\r\n  const handleViewStaff = (record: object) => {\r\n      toggleShowViewDetail(true);\r\n      setStaffInfo(record);\r\n  }\r\n\r\n  const toggleShowCreateStaff = (visible: boolean) => {\r\n    setIsShowCreateStaff(visible);\r\n}\r\n\r\nconst handleCreateStaff = (record: object) => {\r\n    toggleShowCreateStaff(true);\r\n\r\n}\r\n\r\nconst toggleShowEditStaff = (visible: boolean) => {\r\n  setIsShowEditStaff(visible);\r\n}\r\n\r\nconst handleEditStaff = (record: object) => {\r\n  toggleShowEditStaff(true);\r\n  setStaffInfo(record);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleDeleteStaff = async (record: any) => {\r\n const { data } =  await DeleteStaff({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n        \r\n          query: GET_STAFFS,\r\n          variables: {\r\n              authUserId: null,\r\n              skip: 0,\r\n              limit: 0\r\n          },\r\n     }],\r\n     awaitRefetchQueries: true\r\n\r\n   })\r\n\r\nif(data) {\r\n  message.success(t(\"deleted_successfully\"))\r\n}\r\n}\r\n\r\n\r\nconst ActionObj = (privileges?.read || privileges?.create || privileges?.update || privileges?.delete) ?      {\r\n  title: `${(privileges?.create||privileges?.update||privileges?.delete)?t(\"action\"):''}`,\r\n  key: 'action',\r\n  render: ( record: any) => (\r\n    <div>\r\n       \r\n       {privileges?.read&&<span>\r\n        <EyeOutlined />\r\n        {\" \"}\r\n      <Tag  color={\"blue\"} \r\n      onClick={() => handleViewStaff(record)}\r\n       >\r\n          <a>\r\n            {t(\"staffs.profile.view_profile\")}\r\n          </a>\r\n       </Tag>\r\n         </span>}\r\n\r\n        {privileges?.update&&<span>\r\n          <EditOutlined />\r\n          {\" \"}\r\n          <Tag  color={\"blue\"} \r\n          onClick={() => handleEditStaff(record)}\r\n          >\r\n              <a>\r\n              {/* Edit */}\r\n              {t(\"edit\")}\r\n              </a>\r\n          </Tag>\r\n          </span>}\r\n  \r\n          {privileges?.delete&&<Popconfirm\r\n           title={t(\"make_sure_delete\")}\r\n           okText={t(\"ok\")}\r\n           cancelText={t(\"no\")}\r\n\r\n            onConfirm={() => handleDeleteStaff(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined color={'red'} />\r\n                \r\n                    <Tag color={'red'}>\r\n                    {t(\"delete\")}\r\n                    </Tag>\r\n              </span>\r\n              </a>\r\n             </Popconfirm>}\r\n\r\n\r\n   \r\n    </div>\r\n  ),\r\n}: {}\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: t(\"staffs.avatar\"),\r\n        dataIndex: 'avatar_url',\r\n        key: 'avatar_url',\r\n        align: \"center\" as \"center\",\r\n        width: '6%',\r\n        render: (avatar_url: string) => (\r\n         <Avatar shape=\"square\"  src={avatar_url} />\r\n        ),\r\n        // ...getColumnSearchProps('staffId'),\r\n      },\r\n      {\r\n        title: t(\"staffs.staffId\"),\r\n        dataIndex: 'staffId',\r\n        key: 'staffId',\r\n   \r\n        width: '10%',\r\n        ...getColumnSearchProps('staffId'),\r\n      },\r\n      {\r\n        title: t(\"staffs.name\"),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '10%',\r\n\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n          title: t(\"staffs.email\"),\r\n          dataIndex: \"email\",\r\n          key: \"email\",\r\n          width: '10%',\r\n     \r\n          ...getColumnSearchProps('email'),\r\n      },\r\n      {\r\n        title: t(\"staffs.admin_department\"),\r\n        dataIndex: 'adminDepartment',\r\n        key: 'adminDepartment',\r\n        width: '10%',\r\n      \r\n        render: (adminDepartment: any) => (\r\n          <span>\r\n           \r\n                <Tag color={'geekblue'} key={'adminDepartment'}>\r\n                   {adminDepartment&&adminDepartment.name}\r\n                </Tag>\r\n\r\n          </span>\r\n        ),\r\n        \r\n      },\r\n      {\r\n        title: t(\"staffs.dateOfAdmission\"),\r\n        dataIndex: 'dateOfAdmission',\r\n        key: 'dateOfAdmission',\r\n        width: '10%',\r\n\r\n        ...getColumnSearchProps('dateOfAdmission'),\r\n      },\r\n     \r\n      {\r\n        title: t(\"staffs.gender\"),\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        width: '8%',\r\n\r\n        ...getColumnSearchProps('gender'),\r\n      },\r\n      ActionObj\r\n\r\n     \r\n    ];\r\n\r\n    const newColumns = columns.filter((column) => JSON.stringify(column) !== '{}');\r\n\r\n    if(loading || error) {\r\n   \r\n      return <Loading spinner={false} />\r\n\r\n    }\r\n    return <>\r\n\r\n           {privileges?.create&&<Button\r\n              type={'primary'}\r\n              style={{\r\n                      margin: '1rem 0rem'\r\n                        }}\r\n                        onClick={handleCreateStaff}\r\n                        >\r\n              <UserAddOutlined />\r\n                 {t(\"staffs.create_staff\")}\r\n             </Button>}\r\n\r\n             \r\n    <Table \r\n     columns={newColumns}\r\n     scroll={{ x: 500 }}\r\n     dataSource={staffs}   \r\n     bordered\r\n     rowKey='id' />\r\n     \r\n     {!loading &&  <Staff visible={isShowViewDetail} staffInfo={staffInfo} toggleVisible={toggleShowViewDetail}  />}\r\n   \r\n    {!loading && <CreateStaff visible={isShowCreateStaff} staffInfo={staffInfo} toggleVisible={toggleShowCreateStaff}  />}\r\n    {!loading && <EditStaff  visible={isShowEditStaff} staffInfo={staffInfo} toggleVisible={toggleShowEditStaff} />}\r\n   \r\n    </>;\r\n  \r\n};\r\n\r\nconst MapStateToProps = ((state: any) => (state: any) => ({\r\n  authUser: state.auth?.user,\r\n}))\r\n\r\nconst StaffsPages = connect(MapStateToProps, {})(Staffs);\r\n\r\nexport default StaffsPages;","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\Departments.tsx",["1358","1359"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditDepartment from './EditDepartment';\r\nimport { DELETE_DEPARTMENT, GET_DEPARTMENTS } from '../../graphql/department';\r\nimport CreateDepartment from './CreateDepartment';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Departments = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n  const { t } = useTranslation();\r\n  \r\n  const { data, loading, error } = useQuery(GET_DEPARTMENTS, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n  const departments = data&&data.getDepartments.departments;\r\n\r\n\r\n  const [DeleteDepartmentMutation] = useMutation(DELETE_DEPARTMENT)\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditDepartment, setIsShowEditDepartment] = useState(false);\r\n  const [isShowCreateDepartment, setIsShowCreateDepartment] = useState(false);\r\n  \r\n  const [departmentInfo, setDepartmentInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditDepartment = (visible: boolean) => {\r\n    setIsShowEditDepartment(visible);\r\n}\r\nconst handleEditDepartment = (record: object) => {\r\n    toggleShowEditDepartment(true);\r\n    setDepartmentInfo(record);\r\n}\r\n\r\nconst toggleShowCreateDepartment = (visible: boolean) => {\r\n  setIsShowCreateDepartment(visible);\r\n}\r\nconst handleCreateDepartment = (record: object) => {\r\n  \r\n   if(!privileges?.create) return false;\r\n\r\n  toggleShowCreateDepartment(true);\r\n  setDepartmentInfo(record);\r\n}\r\n\r\nconst handleDeleteDepartment = async (record: any) => {\r\n   if(!privileges?.delete) return false;\r\n\r\n   await DeleteDepartmentMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_DEPARTMENTS,\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: t('p_id'),\r\n        dataIndex: 'departmentId',\r\n        key: 'departmentId',\r\n        width: '15%',\r\n     \r\n        ...getColumnSearchProps('departmentId'),\r\n      },\r\n      {\r\n        title: t('p_name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n   \r\n        width: '20%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: t('p_intro'),\r\n        dataIndex: 'introduction',\r\n        key: 'introduction',\r\n    \r\n        width: '25%',\r\n        ...getColumnSearchProps('introduction'),\r\n      },\r\n      {\r\n          title: `${(privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n        key: 'action',\r\n        render: ( record: any) => (\r\n          <div>\r\n                \r\n                    {privileges?.update&&<span>\r\n                      <EditOutlined />\r\n                      <Tag  color={\"blue\"} \r\n                      onClick={() => handleEditDepartment(record)}\r\n                      >\r\n                          <a>\r\n                          Edit\r\n                          </a>\r\n                      </Tag>\r\n                      </span>}\r\n          \r\n                    {privileges?.delete&&<span>\r\n                      <Popconfirm title='Are you Sure to Delete？' \r\n                    onConfirm={() => handleDeleteDepartment(record)} \r\n                    >\r\n                    <a>\r\n                    <span className='my-a'>\r\n                        <Divider type='vertical' />\r\n                        <DeleteOutlined />\r\n                      \r\n                            Delete\r\n                    </span>\r\n                    </a>\r\n                   </Popconfirm>\r\n                      </span>}\r\n         \r\n          </div>\r\n        ),\r\n      },\r\n     \r\n    ];\r\n\r\n    if(loading || error) {\r\n      return <Loading />\r\n    }\r\n    return <>\r\n\r\n        {privileges?.create&&<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateDepartment}\r\n        >\r\n           <FileAddFilled />\r\n            Create Department\r\n        </Button>}\r\n\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 480 }}\r\n    columns={columns} \r\n    dataSource={departments} />\r\n  \r\n     {!loading && <EditDepartment visible={isShowEditDepartment} departmentInfo={departmentInfo} toggleVisible={toggleShowEditDepartment}  />}\r\n    \r\n     {!loading && <CreateDepartment visible={isShowCreateDepartment} departmentInfo={departmentInfo} toggleVisible={toggleShowCreateDepartment} />}\r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(Departments);","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\Teachers.tsx",["1360","1361","1362"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, message } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { graphql } from 'react-apollo';\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, UserAddOutlined, EyeOutlined } from '@ant-design/icons';\r\nimport Teacher from './Teacher';\r\nimport { GET_TEACHERS, DELETE_TEACHER } from '../../graphql/teacher';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport CreateTeacher from \"./CreateTeacher\";\r\nimport EditTeacher from \"./EditTeacher\";\r\nimport { useMutation } from '@apollo/client';\r\nimport Loading from '../Loading';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Teachers = ({ teachers,  loadingTeachers, authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n \r\n  const [DeleteTeacher] = useMutation(DELETE_TEACHER);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowViewDetail, setIsShowViewDetail] = useState(false);\r\n  const [isShowCreateTeacher, setIsShowCreateTeacher] = useState(false);\r\n  const [isShowEditTeacher, setIsShowEditTeacher] = useState(false);\r\n\r\n  const [teacherInfo, setTeacherInfo] = useState({});\r\n\r\n  const data = teachers?.getTeachers;\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n  \r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n  \r\n        setTimeout(() => searchInput.current.select(), 500);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n\r\n  const toggleShowViewDetail = (visible: boolean) => {\r\n      setIsShowViewDetail(visible);\r\n  }\r\n\r\n  const handleViewTeacher = (record: object) => {\r\n      toggleShowViewDetail(true);\r\n      setTeacherInfo(record);\r\n  }\r\n\r\n  const toggleShowCreateTeacher = (visible: boolean) => {\r\n    setIsShowCreateTeacher(visible);\r\n}\r\n\r\nconst handleCreateTeacher = (record: object) => {\r\n    toggleShowCreateTeacher(true);\r\n\r\n}\r\n\r\nconst toggleShowEditTeacher = (visible: boolean) => {\r\n  setIsShowEditTeacher(visible);\r\n}\r\n\r\nconst handleEditTeacher = (record: object) => {\r\n  toggleShowEditTeacher(true);\r\n  setTeacherInfo(record);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleDeleteTeacher = async (record: any) => {\r\n\r\n const { data } =  await DeleteTeacher({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n    \r\n      query: GET_TEACHERS,\r\n      variables: {\r\n          authUserId: null,\r\n          skip: 0,\r\n          limit: 0\r\n      },\r\n  }],\r\n  awaitRefetchQueries: true\r\n  \r\n   })\r\n\r\nif(data) {\r\n  message.success('Delete Teacher Successfully!')\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nconst ActionObj = (privileges?.read || privileges?.create || privileges?.update || privileges?.delete)?{\r\n  title: `${(privileges?.read || privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n  key: 'action',\r\n  render: ( record: any) => (       \r\n    <div>\r\n          {privileges?.read&&<span>\r\n            \r\n            <EyeOutlined />\r\n            {\" \"}\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleViewTeacher(record)}\r\n            >\r\n                <a>\r\n                  View Profile\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n\r\n         {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            {\" \"}\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditTeacher(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n           </span>}\r\n\r\n\r\n\r\n\r\n\r\n   \r\n        {privileges?.delete&&\r\n              <Popconfirm title='Are you Sure to Delete？' \r\n              onConfirm={() => handleDeleteTeacher(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                   <Tag color={'red'}>\r\n                   Delete\r\n                   </Tag>\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n        }\r\n\r\n   \r\n    </div>\r\n  ),\r\n}:{};\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: 'Avatar',\r\n        dataIndex: 'avatar_url',\r\n        key: 'avatar_url',\r\n        align: \"center\" as \"center\",\r\n        width: '5%',\r\n        render: (avatar_url: string) => (\r\n         <Avatar shape=\"square\" src={avatar_url} />\r\n        ),\r\n        // ...getColumnSearchProps('teacherId'),\r\n      },\r\n      {\r\n        title: 'ID',\r\n        dataIndex: 'userId',\r\n        key: 'userId',\r\n  \r\n        width: '6%',\r\n        ...getColumnSearchProps('userId'),\r\n      },\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '8%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n          title: \"Email\",\r\n          dataIndex: \"email\",\r\n          key: \"email\",\r\n          width: '8%',\r\n          ...getColumnSearchProps('email'),\r\n      },\r\n      {\r\n        title: 'Department',\r\n        dataIndex: 'department',\r\n        key: 'department',\r\n        width: '10%',\r\n        render: (department: any) => (\r\n          <span>\r\n           \r\n                <Tag color={'geekblue'} key={'department'}>\r\n                   {department&&department.name}\r\n                </Tag>\r\n\r\n          </span>\r\n        ),\r\n        \r\n      },\r\n      {\r\n        title: 'Date Of Admission',\r\n        dataIndex: 'dateOfAdmission',\r\n        key: 'dateOfAdmission',\r\n    \r\n        width: '10%',\r\n        ...getColumnSearchProps('dateOfAdmission'),\r\n      },\r\n     \r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n      \r\n        width: '8%',\r\n        ...getColumnSearchProps('gender'),\r\n      },\r\n      ActionObj\r\n     \r\n    ];\r\n\r\n    const newColumns = columns.filter(value => JSON.stringify(value) !== '{}');\r\n   \r\n    \r\n    if(loadingTeachers) {\r\n      return <Loading />\r\n    }\r\n    return <>\r\n\r\n            {privileges?.create&&<Button\r\n              type={'primary'}\r\n              style={{\r\n                        margin: '1rem 0rem'\r\n                        }}\r\n                        onClick={handleCreateTeacher}\r\n                        >\r\n              <UserAddOutlined />\r\n                 Create Teacher\r\n             </Button>}\r\n\r\n             \r\n    <Table \r\n     columns={newColumns}\r\n     scroll={{ x: 500 }}\r\n     dataSource={data}   \r\n     bordered\r\n     rowKey='id' />\r\n    \r\n    {!loadingTeachers &&  <Teacher visible={isShowViewDetail} teacherInfo={teacherInfo} toggleVisible={toggleShowViewDetail}  />}\r\n   \r\n    {!loadingTeachers && privileges?.create&& <CreateTeacher visible={isShowCreateTeacher} teacherInfo={teacherInfo} toggleVisible={toggleShowCreateTeacher}  />}\r\n    {!loadingTeachers && privileges?.update&& <EditTeacher  visible={isShowEditTeacher} teacherInfo={teacherInfo} toggleVisible={toggleShowEditTeacher} />}\r\n\r\n   \r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\nconst TeachersPages = connect(MapStateToProps, {})(Teachers);\r\nexport default compose(\r\n  graphql(GET_TEACHERS, {\r\n    options: (props) => ({\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      }\r\n    }),\r\n    props: ({ data }) => ({\r\n      loadingTeachers: data.loading,\r\n      teachers: data\r\n    })\r\n  })\r\n)(TeachersPages);","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\AdminDepartments.tsx",["1363","1364","1365","1366"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect  } from \"react-redux\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditDepartment from './EditAdminDepartment';\r\n\r\nimport { DELETE_ADMIN_DEPARTMENT, GET_ADMIN_DEPARTMENTS } from '../../graphql/adminDepartment';\r\n\r\nimport CreateDepartment from './CreateAdminDepartment';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Departments = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  const { privileges } = authUser;\r\n\r\n  \r\n  const { data, loading, error } = useQuery(GET_ADMIN_DEPARTMENTS, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n  const departments = data&&data.getAdminDepartments?.adminDepartments;\r\n\r\n\r\n  const [DeleteDepartmentMutation] = useMutation(DELETE_ADMIN_DEPARTMENT)\r\n  const { t } = useTranslation();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditDepartment, setIsShowEditDepartment] = useState(false);\r\n  const [isShowCreateDepartment, setIsShowCreateDepartment] = useState(false);\r\n  const [departmentInfo, setDepartmentInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`${t(\"search\")} ${t(`admin_department.${dataIndex}`)}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n             {t(\"search\")}\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n             {t(\"reset\")}\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditDepartment = (visible: boolean) => {\r\n    setIsShowEditDepartment(visible);\r\n}\r\nconst handleEditDepartment = (record: object) => {\r\n    toggleShowEditDepartment(true);\r\n    setDepartmentInfo(record);\r\n}\r\n\r\nconst toggleShowCreateDepartment = (visible: boolean) => {\r\n  setIsShowCreateDepartment(visible);\r\n}\r\nconst handleCreateDepartment = (record: object) => {\r\n  toggleShowCreateDepartment(true);\r\n  setDepartmentInfo(record);\r\n}\r\n\r\nconst handleDeleteDepartment = async (record: any) => {\r\n  if(!privileges?.delete) return false;\r\n\r\n   await DeleteDepartmentMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_ADMIN_DEPARTMENTS,\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\nconst ActionObj = privileges?.create?{\r\n  title: `${(privileges?.create||privileges?.update||privileges?.delete)?t(\"admin_department.action\"):''}`,\r\n  key: 'action',\r\n  render: ( record: any) => (\r\n    <div>\r\n          {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditDepartment(record)}\r\n            >\r\n                <a>\r\n                  {/* Edit */}\r\n                  {t(\"edit\")}\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n   \r\n    \r\n            {privileges?.delete&&<Popconfirm \r\n              title={t(\"make_sure_delete\")}\r\n              okText={t(\"ok\")}\r\n              cancelText={t(\"no\")}\r\n\r\n              onConfirm={() => handleDeleteDepartment(record)} \r\n              \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                      {/* Delete */}\r\n                      {t(\"delete\")}\r\n              </span>\r\n              </a>\r\n             </Popconfirm>}\r\n   \r\n    </div>\r\n  ),\r\n}: {};\r\n\r\n    const columns = [\r\n\r\n      {\r\n        title: t(\"admin_department.name\"),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '25%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: t(\"admin_department.introduction\"),\r\n        dataIndex: 'introduction',\r\n        key: 'introduction',\r\n        width: '25%',\r\n        ...getColumnSearchProps('introduction'),\r\n      },\r\n      ActionObj\r\n      \r\n     \r\n    ];\r\n\r\n    const newColumns = columns.filter(value => JSON.stringify(value) !== '{}');\r\n   \r\n\r\n    return <>\r\n\r\n       {privileges?.create&&<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateDepartment}\r\n        >\r\n          <FileAddFilled />\r\n            {/* Create Department */}\r\n          {t(\"admin_department.create_department\")}\r\n        </Button>\r\n}\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    columns={newColumns} \r\n    dataSource={departments} />\r\n  \r\n     {privileges?.update&& <EditDepartment visible={isShowEditDepartment} departmentInfo={departmentInfo} toggleVisible={toggleShowEditDepartment}  />}\r\n     {privileges?.create&&  <CreateDepartment visible={isShowCreateDepartment} departmentInfo={departmentInfo} toggleVisible={toggleShowCreateDepartment} />}\r\n  \r\n    </>;\r\n  \r\n};\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user,\r\n}));\r\n\r\nexport default connect(MapStateToProps, {})(Departments);","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\AcademicDownloadPage.tsx",["1367","1368","1369","1370"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from 'react-redux';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, DownloadOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditDownloadPage from './EditDownloadPage';\r\nimport { DELETE_DOWNLOAD, GET_DOWNLOADS_BY_TYPE } from '../../graphql/download';\r\nimport CreateDownloadPage from './CreateACDownloadPage';\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst AcademicDownloadAdminPage = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n\r\n  const { data, loading, error } = useQuery(GET_DOWNLOADS_BY_TYPE, {\r\n    variables: {\r\n      type: \"academic\"\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n\r\n  const downloads = data&&data.getDownloadsByType?.downloads;\r\n\r\n\r\n  const [DeleteDownloadMutation] = useMutation(DELETE_DOWNLOAD)\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditDownload, setIsShowEditDownload] = useState(false);\r\n  const [isShowCreateDownload, setIsShowCreateDownload] = useState(false);\r\n  const [downloadInfo, setDownloadInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditDownload = (visible: boolean) => {\r\n    setIsShowEditDownload(visible);\r\n}\r\nconst handleEditDownload = (record: object) => {\r\n    toggleShowEditDownload(true);\r\n    setDownloadInfo(record);\r\n}\r\n\r\nconst toggleShowCreateDownload = (visible: boolean) => {\r\n  setIsShowCreateDownload(visible);\r\n}\r\nconst handleCreateDownload = (record: object) => {\r\n  toggleShowCreateDownload(true);\r\n  setDownloadInfo(record);\r\n}\r\n\r\nconst handleDeleteDownload = async (record: any) => {\r\n   await DeleteDownloadMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_DOWNLOADS_BY_TYPE,\r\n      variables: {\r\n         type: \"academic\"\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\nconst ActionObj = (privileges?.create || privileges?.update || privileges?.delete) ? {\r\n  title: 'Action',\r\n  key: 'action',\r\n  render: ( record: any) => (\r\n    <div>\r\n          {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditDownload(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n   \r\n    \r\n            {privileges?.delete&&<Popconfirm title='Are you Sure to Delete？' \r\n              onConfirm={() => handleDeleteDownload(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                      Delete\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n   }\r\n    </div>\r\n  ),\r\n  }: {}\r\n\r\n\r\n    const columns = [\r\n \r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '15%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: 'Content',\r\n        dataIndex: 'content',\r\n        key: 'content',\r\n        width: '20%',\r\n     \r\n        ...getColumnSearchProps('content'),\r\n        render: (content: string) => {\r\n           \r\n            return <span>\r\n               {content.substring(0,60)}...\r\n            </span>\r\n        },\r\n      },\r\n      {\r\n        title: 'Links',\r\n        dataIndex: 'links',\r\n        key: 'links',\r\n        width: '20%',\r\n        ...getColumnSearchProps('link'),\r\n        render: (links: any) => {\r\n       \r\n          return (\r\n            <span>\r\n                {links?.map((link: string, index: number) => ( <Tag key={index}>\r\n                     <a href={link} download target={'_blank'}>\r\n                       <DownloadOutlined /> {' '}\r\n                        Download\r\n                     </a>\r\n                 </Tag>))}\r\n            </span>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        title: 'Type',\r\n        key: 'type',\r\n        render: ( record: any) => (\r\n            <Tag color={'blue'}>\r\n                  { record?.academic &&record?.student ? \"Student\" : record?.academic ? \"Academic\" : \"\"}\r\n            </Tag>\r\n            )\r\n      },\r\n      ActionObj\r\n     \r\n     \r\n    ];\r\n\r\n    const OptionsColumns = columns.filter((column) => JSON.stringify(column) !== '{}');\r\n\r\n   if(loading) {\r\n     return <Loading />\r\n   }\r\n   return <>\r\n\r\n        {privileges?.create&& <Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateDownload}\r\n        >\r\n\r\n           <FileAddFilled />\r\n         \r\n            Create Download Link\r\n        </Button>\r\n        }\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 500 }}\r\n    columns={OptionsColumns} \r\n    dataSource={downloads} />\r\n  \r\n     {privileges?.update&&    <EditDownloadPage visible={isShowEditDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowEditDownload}  />}\r\n    {privileges?.delete&&   <CreateDownloadPage visible={isShowCreateDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowCreateDownload} />}\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user,\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(AcademicDownloadAdminPage);","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\AdminDownloadPage.tsx",["1371","1372","1373","1374","1375"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from 'react-redux';\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, DownloadOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditDownloadPage from './EditAdminDownloadPage';\r\nimport { DELETE_DOWNLOAD, GET_DOWNLOADS_BY_TYPE } from '../../graphql/download';\r\nimport CreateAdminDownloadPage from './CreateAdminDownloadPage';\r\n\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst AdminDownloadAdminPage = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n\r\n  const { data, loading, error } = useQuery(GET_DOWNLOADS_BY_TYPE, {\r\n    variables: {\r\n      type: \"admin\"\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n\r\n  const downloads = data&&data.getDownloadsByType?.downloads;\r\n\r\n\r\n  const [DeleteDownloadMutation] = useMutation(DELETE_DOWNLOAD)\r\n\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditDownload, setIsShowEditDownload] = useState(false);\r\n  const [isShowCreateDownload, setIsShowCreateDownload] = useState(false);\r\n  const [downloadInfo, setDownloadInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditDownload = (visible: boolean) => {\r\n    setIsShowEditDownload(visible);\r\n}\r\nconst handleEditDownload = (record: object) => {\r\n    toggleShowEditDownload(true);\r\n    setDownloadInfo(record);\r\n}\r\n\r\nconst toggleShowCreateDownload = (visible: boolean) => {\r\n  setIsShowCreateDownload(visible);\r\n}\r\nconst handleCreateDownload = (record: object) => {\r\n  toggleShowCreateDownload(true);\r\n  setDownloadInfo(record);\r\n}\r\n\r\nconst handleDeleteDownload = async (record: any) => {\r\n   await DeleteDownloadMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_DOWNLOADS_BY_TYPE,\r\n      variables: {\r\n         type: \"admin\"\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\nconst ActionObj = (privileges?.create || privileges?.update || privileges?.delete) ? {\r\n  title: 'Action',\r\n  key: 'action',\r\n  render: ( record: any) => (\r\n    <div>\r\n          {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditDownload(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n            </span>}\r\n   \r\n    \r\n            {privileges?.delete&&<Popconfirm title='Are you Sure to Delete？' \r\n              onConfirm={() => handleDeleteDownload(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                      Delete\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n   }\r\n    </div>\r\n  ),\r\n  }: {}\r\n\r\n\r\n    const columns = [\r\n \r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '25%',\r\n        ...getColumnSearchProps('name'),\r\n        render: (content: string) => {\r\n           \r\n          return <span>\r\n             {content.substring(0,100)} \r\n          </span>\r\n      },\r\n      },\r\n      {\r\n        title: 'Content',\r\n        dataIndex: 'content',\r\n        key: 'content',\r\n        width: '25%',\r\n        ...getColumnSearchProps('content'),\r\n        render: (content: string) => {\r\n           \r\n          return <span>\r\n             {content.substring(0,60)}...\r\n          </span>\r\n      },\r\n      },\r\n      {\r\n        title: 'Links',\r\n        dataIndex: 'links',\r\n        key: 'links',\r\n        width: '25%',\r\n        ...getColumnSearchProps('link'),\r\n        render: (links: any) => {\r\n       \r\n          return (\r\n            <span>\r\n                {links?.map((link: string, index: number) => ( <Tag key={index}>\r\n                     <a href={link} download target={'_blank'}>\r\n                       <DownloadOutlined /> {' '}\r\n                        Download\r\n                     </a>\r\n                 </Tag>))}\r\n            </span>\r\n          )\r\n        }\r\n      },\r\n      ActionObj\r\n     \r\n     \r\n    ];\r\n\r\n    const OptionsColumns = columns.filter((column) => JSON.stringify(column) !== '{}');\r\n\r\n   \r\n   return <>\r\n\r\n        {privileges?.create&& <Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateDownload}\r\n        >\r\n\r\n           <FileAddFilled />\r\n         \r\n            Create Download Link\r\n        </Button>\r\n        }\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 500 }}\r\n    columns={OptionsColumns} \r\n    dataSource={downloads} />\r\n  \r\n     {privileges?.update&&    <EditDownloadPage visible={isShowEditDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowEditDownload}  />}\r\n    {privileges?.delete&&   <CreateAdminDownloadPage visible={isShowCreateDownload} downloadInfo={downloadInfo} toggleVisible={toggleShowCreateDownload} />}\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user,\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(AdminDownloadAdminPage);","D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\StudentProfile.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\StaffProfile.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\StudentCourses\\StudentCourses.tsx",["1376","1377","1378","1379"],"import { Table, Input, Button, Space, Tag, Rate } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { useParams } from 'react-router';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined, } from '@ant-design/icons';\r\nimport { DELETE_COURSE, GET_COURSES } from '../../graphql/course';\r\n\r\n\r\n\r\n\r\n// const data1 = [\r\n//   {\r\n//     key: '1',\r\n//     name: 'Buddhist Intro',\r\n//     course_id: \"MA201879\",\r\n//     introduction: \"Teafeawef efaefaef efaef\",\r\n  \r\n//   },\r\n  \r\n// ];\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst StudentCourses= () => {\r\n\r\n const { id }: any = useParams();\r\n\r\n  let searchInput = useRef(null);;\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n//   const [isShowEditCourse, setIsShowEditCourse] = useState(false);\r\n//   const [isShowCreateCourse, setIsShowCreateCourse] = useState(false);\r\n//   const [courseInfo, setCourseInfo] = useState({});\r\n\r\n  const { data, loading, error } = useQuery(GET_COURSES, {\r\n    variables: {\r\n      authUserId: id,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n\r\n  });\r\n\r\n     const courses = data&&data.getCourses.courses;\r\n\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: 'CourseID',\r\n        dataIndex: 'courseId',\r\n        key: 'courseId',\r\n        width: '20%',\r\n        ...getColumnSearchProps('courseId'),\r\n      },\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '20%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: 'Introduction',\r\n        dataIndex: 'introduction',\r\n        key: 'introduction',\r\n        width: '20%',\r\n        ...getColumnSearchProps('introduction'),\r\n      },\r\n      {\r\n        title: \"Department\",\r\n        dataIndex: 'department',\r\n        key: 'department',\r\n        render: (department: any) => (\r\n          <span>\r\n             <Tag  \r\n\r\n               color={\"geekblue\" } \r\n               key={'department'}\r\n          \r\n             >\r\n                {department&&department.name}\r\n             </Tag>\r\n          </span>\r\n        )\r\n\r\n      },\r\n      {\r\n        title: \"Rating\",\r\n        dataIndex: 'averageRating',\r\n        key: \"averageRating\",\r\n        render: (rating: any) => (\r\n          <span>\r\n               <Rate value={rating} disabled />\r\n\r\n          </span>\r\n        )\r\n      },\r\n    \r\n     \r\n    ];\r\n    return <>\r\n\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    columns={columns} dataSource={courses} />\r\n\r\n  \r\n    </>;\r\n  \r\n}\r\n\r\n\r\nexport default StudentCourses;\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Grade\\StudentViewGrade.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\data.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\download.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\programme.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\student.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\teacher.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\course.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\staff.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\department.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\adminDepartment.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\EditFeedback.tsx",["1380"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from \"react-router\";\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Form, Input, message, Select, Rate, Button, Modal } from 'antd';\r\n\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { GET_COURSES } from \"../../graphql/course\";\r\nimport { GET_FEEDBACKS, UPDATE_FEEDBACK } from '../../graphql/feedback';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\nconst { TextArea  } = Input;\r\n\r\nconst UpdateFeedback = ({ visible, toggleVisible, feedbackInfo, authUser }: any) => {\r\n\r\n    const { id }: any = useParams();\r\n\r\n    const [courseId, setCourseId] = useState('');\r\n    const [UpdateFeedbackMutation] = useMutation(UPDATE_FEEDBACK);\r\n    const { data } = useQuery(GET_COURSES, {\r\n        variables: {\r\n            authUserId: id,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        // skip: !props.visible\r\n    });\r\n\r\n    const courses = data&&data.getCourses.courses;\r\n\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n        \r\n          title: feedbackInfo?.title,\r\n          content: feedbackInfo?.content,\r\n          rating: feedbackInfo?.rating,\r\n          courseId: feedbackInfo?.course?.id\r\n\r\n \r\n        });\r\n\r\n        setCourseId(feedbackInfo?.course?.id);\r\n     }, [feedbackInfo]);\r\n\r\n    const handleOk = () => {\r\n     \r\n        const values = form.getFieldsValue();\r\n  \r\n        onCreate(values);\r\n        \r\n      }\r\n\r\n const onCreate =  async (values: any) => {\r\n         const { title, content, rating, courseId } = values;\r\n        if(!title || !content || !rating || !courseId) {\r\n           return  message.warn(\"Please Enter Your All Data!\")\r\n        }\r\n\r\n         /**\r\n         * import note \r\n         * if course id has changed and change the id\r\n         */\r\n        \r\n        const course_ID = values.courseId || courseId;\r\n\r\n\r\n\r\n        const update__Input = {\r\n        \r\n            id: feedbackInfo?.id,\r\n            title: values.title,\r\n            content: values.content,\r\n            rating: values.rating,\r\n            course: course_ID,\r\n            creator: id\r\n      \r\n\r\n        \r\n        }\r\n\r\n        // console.log('here is rateing input:', create__Input)\r\n\r\n        const { data, errors } = await UpdateFeedbackMutation({\r\n            variables: {\r\n                input: update__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_FEEDBACKS,\r\n                variables: {\r\n                    authUserId: authUser?.id,\r\n                    skip: 0,\r\n                    limit: 0\r\n                },\r\n         }],\r\n          awaitRefetchQueries: true\r\n       \r\n        });\r\n        \r\n        if(data && !errors) {\r\n\r\n            message.success('Submit your Feedback  Successfully, Thank you so much!');\r\n            onCancel();\r\n\r\n            // form.setFieldsValue();\r\n          }\r\n    }\r\n  \r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false);\r\n\r\n    }\r\n \r\n\r\n\r\n    \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n                  \r\n              <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Feedback Course'\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                      Return\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                      Submit\r\n                    </Button>\r\n                  ]}\r\n\r\n\r\n                // getContainer={false}\r\n                width={'785px'}\r\n              >\r\n\r\n              <Form\r\n                  labelCol={{ span: 8 }}\r\n                  wrapperCol={{ span: 16 }}\r\n                //   layout=\"horizontal\"\r\n                  \r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                initialValues={{ \r\n                    courseId: courseId || feedbackInfo?.course?.id,\r\n                  \r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Title'}\r\n                    name=\"title\"\r\n                    rules={[\r\n                        { required: true, message: 'Feedback title is empty.' },\r\n                        { min: 3, message: 'Feedback title must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={200}\r\n                         placeholder='Title' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Feedback Content is empty.' },\r\n                        { min: 3, message: 'Feedback Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <TextArea\r\n                                maxLength={800}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Course'}\r\n                    name=\"courseId\"\r\n                    rules={[\r\n                        { required: true, message: 'Course is empty.' },\r\n                    ]}\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Course\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {courses?courses.map((course: any) => {\r\n                        return(\r\n                            <Option   key={course.id} value={`${course.id}`}>{course?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Rating'}\r\n                    name=\"rating\"\r\n                    rules={[\r\n                        { required: true, message: 'Rate is empty.' },\r\n                    ]}\r\n                    >\r\n                       \r\n                          <Rate />\r\n                    \r\n                    </Form.Item>\r\n    \r\n\r\n                </Form>\r\n              </Modal>\r\n            \r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UpdateFeedback);","D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\CreateFeedback.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\EditDownloadPage.tsx",["1381","1382","1383","1384","1385"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { GET_DOWNLOADS, UPDATE_DOWNLOAD } from \"../../graphql/download\";\r\nimport Dragger from 'antd/lib/upload/Dragger';\r\nimport moment from \"moment\";\r\nimport { UploadFilesMutation } from '../../graphql/upload';\r\nimport { FILE } from 'dns';\r\n\r\nconst FILE_PATH = 'https://ssbu-int-cdn.sgp1.digitaloceanspaces.com/ssbu_download/';\r\n\r\nconst EditDownloadModal = (props: any) => {\r\n    const [EditDownloadMutation] = useMutation(UPDATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n\r\n\r\n    const [form] = Form.useForm();\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n\r\n \r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          name: props.downloadInfo.name,\r\n          content: props.downloadInfo.content,\r\n\r\n\r\n       })\r\n\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const dataLink = props.downloadInfo?.links?.map((link: any, index: number) => {\r\n      const fileName = link?.replace(FILE_PATH,'')\r\n     return {\r\n       uid: index,\r\n       name: fileName,\r\n       status: 'done',\r\n       url: link,\r\n     }\r\n   });\r\n\r\n   useEffect(() => {\r\n    \r\n    setFileList(dataLink)\r\n\r\n   }, [props?.downloadInfo?.links]);\r\n\r\n    \r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields();\r\n        setFileList([]);\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n\r\n    \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n        /**\r\n          * handle Background Image\r\n          */\r\n  \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n             const newfileList = {\r\n                  uid: fileList.length+1,\r\n                  name:  image_url?.replace(FILE_PATH,''),\r\n                  url: image_url\r\n             }\r\n             setFileList([...fileList, newfileList]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n\r\n   }\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n        \r\n        const LinksArray = fileList?.map((file) => file.url);\r\n        \r\n        const edit__Input = {\r\n            id: props.downloadInfo.id,\r\n            name: values.name,\r\n            content: values.content,\r\n            links: LinksArray\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditDownloadMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n              query: GET_DOWNLOADS,\r\n              variables: {\r\n                  authUserId: null,\r\n                  skip: 0,\r\n                  limit: 0\r\n              },\r\n             }],\r\n           awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Download  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n\r\n    const handleRemove = () => {\r\n       const newFileList = fileList.filter((file: any) => file?.status !== \"removed\");\r\n\r\n       setFileList(newFileList);\r\n\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n            \r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if(info.file.status === \"removed\") {\r\n                handleRemove();\r\n              }\r\n\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n            fileList: fileList\r\n     \r\n          };\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n              {fileList?(     <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Download'\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Update\r\n                  </Button>\r\n                ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n\r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>): null}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditDownload= connect(mapStateToProps, {})(EditDownloadModal);\r\n\r\nexport default EditDownload;","D:\\labc-web\\labc-web-admin\\src\\components\\DownloadPage\\CreateDownloadPage.tsx",["1386","1387","1388"],"import React, { useEffect, useState } from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { Button, Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Upload, Input, message, Progress } from 'antd';\r\nimport  moment  from 'moment';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nimport { GET_DOWNLOADS, CREATE_DOWNLOAD } from \"../../graphql/download\";\r\nimport { UploadFilesMutation } from \"../../graphql/upload\";\r\n\r\n\r\nconst { Dragger } = Upload;\r\n\r\n\r\n\r\nconst CreateDownloadPageModal = (props: any) => {\r\n\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateDownloadPageMutation] = useMutation(CREATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          download_id: props.downloadInfo.download_id,\r\n          name: props.downloadInfo.name,\r\n          introduction: props.downloadInfo.introduction,\r\n\r\n\r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n        /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n  \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n         /**\r\n          * handle Background Image\r\n          */\r\n         \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n\r\n             setFileList([...fileList, image_url]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n        //  console.log('here is data:', data)\r\n  \r\n   \r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n    \r\n            name: values.name,\r\n            content: values.content,\r\n            links: fileList,\r\n            academic: true,\r\n            admin: true\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateDownloadPageMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getDownloads } = cache.readQuery({ query: GET_DOWNLOADS, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newDownloadPage = data?.createDownload;\r\n\r\n                   cache.writeQuery({\r\n                       query: GET_DOWNLOADS,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getDownloads: {\r\n                           downloads: [...getDownloads.downloads, newDownloadPage]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Download Successfully!')\r\n\r\n            setFileList([]);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    \r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n     \r\n          };\r\n\r\n          const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Download Link'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Create\r\n                  </Button>\r\n                ]}\r\n\r\n                \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n             \r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n                   \r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n               \r\n\r\n    \r\n\r\n                </Form>\r\n\r\n                {startLoad&&<Spin indicator={antIcon} />}\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateDownloadPage= connect(mapStateToProps, {})(CreateDownloadPageModal);\r\n\r\nexport default CreateDownloadPage;","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\EditProgramme.tsx",["1389","1390"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\nimport { GET_PROGRAMMES, UPDATE_PROGRAMME } from \"../../graphql/programme\";\r\nimport { programmeTypes } from '../../utils/programmeTypes';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditProgrammeModal = (props: any) => {\r\n    const [EditProgrammeMutation] = useMutation(UPDATE_PROGRAMME)\r\n    const [form] = Form.useForm();\r\n\r\n    const [programme_Type, setProgramme_Type] = useState('');\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          programmeId: props.programmeInfo.programmeId,\r\n          name: props.programmeInfo.name,\r\n          introduction: props.programmeInfo.introduction,\r\n          programmeType: props.programmeInfo.programmeType\r\n\r\n\r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n        const programmeTYPE = values.programmeType  || programme_Type;\r\n        const edit__Input = {\r\n            id: props.programmeInfo.id,\r\n            programmeId: values.programmeId,\r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            programmeType: programmeTYPE\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditProgrammeMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_PROGRAMMES,\r\n                variables: {\r\n                    authUserId: null,\r\n                    skip: 0,\r\n                    limit: 0\r\n                },\r\n           }],\r\n          awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Programme  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Programme'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    programmeType: programme_Type || props.programmeInfo?.programmeType,\r\n                  \r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Programme ID'}\r\n                    name=\"programmeId\"\r\n                    rules={[\r\n                        { required: true, message: 'Programme ID is empty.' },\r\n                        { min: 3, message: 'Programme ID must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Programme ID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Programme Type'}\r\n                    name=\"programmeType\"\r\n                    rules={[\r\n                        { required: true, message: 'programme type is empty.' },\r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Programme Type\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   {/* \"BA\", \"MA\", \"PhD\", \"PDiploma\" */}\r\n                   {programmeTypes.map((programme) => (\r\n                       <Option key={programme?.id} value={programme?.name}> {programme?.name} </Option>\r\n                   ))}\r\n               \r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditProgramme= connect(mapStateToProps, {})(EditProgrammeModal);\r\n\r\nexport default EditProgramme;","D:\\labc-web\\labc-web-admin\\src\\components\\Programme\\CreateProgramme.tsx",["1391"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\nimport { GET_PROGRAMMES, CREATE_PROGRAMME } from \"../../graphql/programme\";\r\nimport { programmeTypes } from '../../utils/programmeTypes';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CreateProgrammeModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateProgrammeMutation] = useMutation(CREATE_PROGRAMME);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          programme_id: props.programmeInfo.programme_id,\r\n          name: props.programmeInfo.name,\r\n          introduction: props.programmeInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        if(!values.programmeId) {\r\n            message.warn(\"Please fill  ID\")\r\n            return false;\r\n        }\r\n\r\n        if(!values.name) {\r\n            message.warn(\"Please fill  Name\")\r\n            return false;\r\n        }\r\n        if(!values.introduction) {\r\n            message.warn(\"Please fill  Introduction\")\r\n            return false;\r\n        }\r\n        if(!values.programmeType) {\r\n            message.warn(\"Please select Programme Type\")\r\n            return false;\r\n        }\r\n        const create__Input = {\r\n        \r\n          \r\n            programmeId: values.programmeId,\r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            programmeType: values.programmeType\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateProgrammeMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getProgrammes } = cache.readQuery({ query: GET_PROGRAMMES, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newProgramme = data?.createProgramme;\r\n\r\n                   cache.writeQuery({\r\n                       query: GET_PROGRAMMES,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getProgrammes: {\r\n                           programmes: [...getProgrammes.programmes, newProgramme]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Programme  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Programme'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Programme ID'}\r\n                    name=\"programmeId\"\r\n                    rules={[\r\n                        { required: true, message: 'Programme ID is empty.' },\r\n                        { min: 3, message: 'Programme ID must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Programme ID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Programme Type'}\r\n                    name=\"programmeType\"\r\n                    rules={[\r\n                        { required: true, message: 'programme type is empty.' },\r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Programme Type\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                  {/* \"BA\", \"MA\", \"PhD\", \"PDiploma\" */}\r\n                 \r\n                   {programmeTypes.map((programme) => (\r\n                       <Option key={programme?.id} value={programme?.name}> {programme?.name} </Option>\r\n                   ))}\r\n                        \r\n               \r\n               \r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateProgramme= connect(mapStateToProps, {})(CreateProgrammeModal);\r\n\r\nexport default CreateProgramme;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Student.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudent.tsx",["1392","1393"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\n\r\nimport Avatar from './Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { CREATE_STUDENT, GET_STUDENTS } from \"../../graphql/student\";\r\nimport { GET_PROGRAMMES } from \"../../graphql/programme\";\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst CreateStudentModal = (props: any) => {\r\n    const [CreateStudentMutation] = useMutation(CREATE_STUDENT)\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       });\r\n       /* eslint-disable react-hooks/exhaustive-deps */\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [_error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const { data,\r\n         error,\r\n         loading\r\n\r\n        } = useQuery(GET_PROGRAMMES, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        \r\n    }) \r\n\r\n\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n  \r\n\r\n\r\n    const programmes = data&&data.getProgrammes.programmes || [];\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n            if(!values.name) {\r\n                message.warn(\"Please fill a  Name\")\r\n                return false;\r\n            }\r\n           \r\n\r\n            if(!values.programme) {\r\n                message.warn(\"Please select programme\")\r\n                return false;\r\n            }\r\n\r\n        const create__Input = {\r\n        \r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            password: values.password,\r\n\r\n            avatar_url: img_src, \r\n            studentIDNo: values.studentIDNo,\r\n            programmeId: values.programme,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission,\r\n            studentAcademicYear: values.studentAcademicYear\r\n        }\r\n\r\n        // console.log('here is Create Executive Input', create_Executive_Input);\r\n\r\n        const { data, errors } = await CreateStudentMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STUDENTS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n        }],\r\n        awaitRefetchQueries: true\r\n        \r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Student  Successfully!')\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n            setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Student Account'\r\n                centered\r\n                onOk={handleOk}\r\n                footer={\r\n                    [  <Button key={'return'} onClick={onCancel}>\r\n                    {t(\"return\")}\r\n                    </Button>,\r\n                   <Button key={'submit'} type={'primary'} onClick={handleOk}> \r\n                           {t(\"submit\")}\r\n                   </Button>\r\n                   ]\r\n                 }\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)} create_img={img_src} resetFile={!img_src} />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* student ID */}\r\n\r\n                    <Form.Item label={'Student ID'}\r\n                    name=\"studentIDNo\"\r\n                    rules={[\r\n                        { required: true, message: 'studentID is empty.' },\r\n                        { min: 3, message: 'studentID must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='StudentID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n               \r\n                    <Form.Item label={'Appled Programme'}\r\n                    name=\"programme\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Programme\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {programmes?programmes.map((programme: any) => {\r\n                        return(\r\n                            <Option   key={programme.id} value={`${programme.id}`}>{programme?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Date Of Admission'} \r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: 'Date Of Admission is empty.' },\r\n                                { min: 3, message: 'Date Of Admission must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='Date Of Admission' />\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Academic Year'} \r\n                            name=\"studentAcademicYear\"\r\n                            rules={[\r\n                                { required: true, message: 'AcademicYear is empty.' },\r\n                                { min: 3, message: 'AcademicYear must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='AcademicYear' />\r\n                        \r\n                        </Form.Item>\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateStudent= connect(mapStateToProps, {  })(CreateStudentModal);\r\n\r\nexport default CreateStudent;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\EditStudent.tsx",["1394","1395","1396"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message } from 'antd';\r\n\r\nimport Avatar from './Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_STUDENT, GET_STUDENTS } from \"../../graphql/student\";\r\nimport { GET_PROGRAMMES } from \"../../graphql/programme\";\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditStudentModal = (props: any) => {\r\n    const [EditStudentMutation] = useMutation(UPDATE_STUDENT)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          fullName: props.studentInfo.fullName,\r\n          studentId: props.studentInfo.studentId,\r\n          name: props.studentInfo.name,\r\n          email: props.studentInfo.email,\r\n        //   password: props.studentInfo.password,\r\n          programme: props.studentInfo.programme?.id,\r\n          gender: props.studentInfo.gender,\r\n          dateOfAdmission: props.studentInfo?.dateOfAdmission,\r\n          studentAcademicYear: props.studentInfo?.studentAcademicYear\r\n\r\n       })\r\n       setImg_Src(props?.studentInfo?.avatar_url)\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [_error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const { data, loading, error} = useQuery(GET_PROGRAMMES, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        skip: !props.studentInfo.studentId\r\n\r\n    }) \r\n\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n    // if(error) {\r\n    //     return <p>Error..</p>\r\n    // }\r\n\r\n\r\n    const programmes = data&&data.getProgrammes.programmes || [];\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n\r\n           const programme_ID = values.programme ||  props.studentInfo.programme?.id\r\n\r\n        const edit__Input = {\r\n            id: props.studentInfo?.id,\r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            // password: values.password,\r\n            avatar_url: img_src, \r\n            studentId: values.studentId,\r\n            programme: programme_ID,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission,\r\n            studentAcademicYear: values.studentAcademicYear\r\n        }\r\n\r\n       \r\n\r\n        const { data, errors } = await EditStudentMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STUDENTS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n            }],\r\n         awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Edit Student  Successfully!')\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n            setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n            if(img_src !== props?.studentInfo?.avatar_url) {\r\n                return window.location.reload(false);\r\n              }\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                // forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Student Account'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    programme: props.studentInfo?.programme?.id,\r\n                    gender: props.studentInfo?.gender\r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)}\r\n                           edit={true}\r\n                           resetFile={!img_src} \r\n                           image_src={props.studentInfo.avatar_url}\r\n\r\n                           />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* student ID */}\r\n\r\n                    <Form.Item label={'Student ID'}\r\n                    name=\"studentId\"\r\n                    rules={[\r\n                        { required: true, message: 'studentID is empty.' },\r\n                        { min: 3, message: 'studentID must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='StudentID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       {/* <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item> */}\r\n\r\n\r\n               \r\n                    <Form.Item label={'Appled Programme'}\r\n                    name=\"programme\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Programme\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {programmes?programmes.map((programme: any) => {\r\n                        return(\r\n                            <Option   key={programme.id} value={`${programme.id}`}>{programme?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Date Of Admission'} \r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: 'Date Of Admission is empty.' },\r\n                                { min: 3, message: 'Date Of Admission must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='Date Of Admission' />\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Academic Year'} \r\n                            name=\"studentAcademicYear\"\r\n                            rules={[\r\n                                { required: true, message: 'AcademicYear is empty.' },\r\n                                { min: 3, message: 'AcademicYear must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='AcademicYear' />\r\n                        \r\n                        </Form.Item>\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditStudent= connect(mapStateToProps, {})(EditStudentModal);\r\n\r\nexport default EditStudent;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade.tsx",["1397","1398","1399","1400","1401","1402","1403","1404","1405"],"import React, { FC, Fragment, useEffect, useState } from 'react';\r\n\r\nimport { Modal, Form, Button, Empty, Tag, message, Popconfirm, Menu, Dropdown } from 'antd';\r\nimport {  EditOutlined } from \"@ant-design/icons\";\r\nimport {   useMutation, useQuery } from \"@apollo/client\";\r\nimport { DELETE_STUDENT_SEMESTER, GET_STUDENT_SEMESTER } from '../../graphql/semester';\r\nimport { GET_STUDENT_ACADEMIC_YEAR, DELETE_STUDENT_ACADEMIC_YEAR, UPDATE_STUDENT_ACADEMIC_YEAR } from \"../../graphql/academicYear\";\r\n\r\nimport Grade from './Grade';\r\nimport './grade.less';\r\n\r\nimport CreateStudentSemesterModal from './StudentSemester/CreateStudentSemester';\r\nimport Loading from '../Loading';\r\nimport CreateStudentAcademicYearModal from './StudentAcademicYear/CreateStudentAcademicYear';\r\nimport UpdateStudentAcademicYearModal from './StudentAcademicYear/UpdateStudentAcademicYear';\r\nimport UpdateStudentSemesterModal from './StudentSemester/UpdateStudentSemester';\r\n\r\n\r\ninterface StudentGradeProps {\r\n    visible: boolean,\r\n    toggleVisible: any,\r\n    authUser: any,\r\n    studentInfo: StudentGradeInfo\r\n}\r\n\r\ninterface StudentGradeInfo {\r\n    id?: any,\r\n    name?: string,\r\n    fullName?: string,\r\n    student_id?: string,\r\n    age?: number,\r\n    gender?: string,\r\n    major?: string,\r\n    country?: string,\r\n    academic_year?: string,\r\n    address?: string\r\n\r\n}\r\n\r\ntype Props = StudentGradeInfo & StudentGradeProps;\r\n\r\nconst StudentGrade: FC<Props> = ({ visible, studentInfo, toggleVisible, authUser}) => {\r\n   \r\n    const [deleteACYearMutation] = useMutation(DELETE_STUDENT_ACADEMIC_YEAR);\r\n    const [deleteSemesterMutation] = useMutation(DELETE_STUDENT_SEMESTER);\r\n\r\n    const [academicYearInfo, setAcademicYearInfo] = useState({});\r\n    const [semesterInfo, setSemesterInfo] = useState({});\r\n\r\n\r\n    const [isShowCreateSemester, setIsShowCreateSemester] = useState(false);\r\n    const [isShowUpdateSemester, setIsShowUpdateSemester] = useState(false);\r\n\r\n    const [isShowCreateAcademicYear, setIsShowCreateAcademicYear] = useState(false);\r\n    const [isShowUpdateAcademicYear, setIsShowUpdateAcademicYear] = useState(false);\r\n    const [academicYearId, setAcademicYearId] = useState(\"\");\r\n\r\n   const { privileges } = authUser;\r\n\r\n    const toggleShowCreateSemester = (visible: boolean) => {\r\n        setIsShowCreateSemester(visible);\r\n    }\r\n  \r\n\r\n    const handleCreateSemester = (academicYearId: any) => {\r\n        toggleShowCreateSemester(true);\r\n        setAcademicYearId(academicYearId);\r\n    }\r\n\r\n    const toggleShowCreateAcademicYear = (visible: boolean) => {\r\n        setIsShowCreateAcademicYear(visible);\r\n    }\r\n  \r\n    const handleCreateAcademicYear = () => {\r\n        toggleShowCreateAcademicYear(true);\r\n    }\r\n\r\n\r\n    const toggleShowUpdateAcademicYear = (visible: boolean) => {\r\n        setIsShowUpdateAcademicYear(visible);\r\n    }\r\n  \r\n    const handleUpdateAcademicYear = (academicYearInfo: any) => {\r\n        toggleShowUpdateAcademicYear(true);\r\n        setAcademicYearInfo(academicYearInfo);\r\n    }\r\n\r\n    const toggleShowUpdateSemester = (visible: boolean) => {\r\n        setIsShowUpdateSemester(visible);\r\n    }\r\n  \r\n    const handleUpdateSemester = (semesterInfo: any, academicYearId: string) => {\r\n        toggleShowUpdateSemester(true);\r\n        setSemesterInfo(semesterInfo);\r\n        setAcademicYearId(academicYearId);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n    \r\n\r\n          setTimeout(function () {\r\n            form.setFieldsValue({\r\n                name: studentInfo.name,\r\n                student_id: studentInfo.student_id,\r\n                major: studentInfo.major,\r\n              });\r\n          },0);\r\n\r\n    }, [studentInfo]);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    const { data, loading, error } = useQuery(GET_STUDENT_ACADEMIC_YEAR, {\r\n        variables: {\r\n              \r\n             studentId: studentInfo?.id\r\n        },\r\n        skip: !studentInfo.id\r\n\r\n    });\r\n \r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n\r\n\r\n    const academicYears = data&&data.getStudentAcademicYear || [];\r\n\r\n    // console.log('here is semesters:data', semesters)\r\n    const onCancel = (): void => {\r\n         toggleVisible(false);\r\n    }\r\n\r\n \r\n\r\n  \r\n  \r\n\r\n    const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 14 },\r\n    }\r\n\r\n\r\n   const handleDeleteAcademicYear =  async (academicYearId: string) => {\r\n       const { data, errors } = await deleteACYearMutation({\r\n           variables: {\r\n               input: {\r\n                  id: academicYearId\r\n               }\r\n           },\r\n           refetchQueries: [{\r\n               query: GET_STUDENT_ACADEMIC_YEAR,\r\n               variables: {\r\n                   studentId: studentInfo?.id,\r\n               }\r\n           }]\r\n       });\r\n\r\n       if(data&&!errors) {\r\n        message.success('Delete Successfully!')\r\n      }\r\n      \r\n   }\r\n\r\n   const handleDeleteSemester =  async (semesterId: string) => {\r\n    const { data, errors } = await deleteSemesterMutation({\r\n        variables: {\r\n            input: {\r\n               id: semesterId\r\n            }\r\n        },\r\n        refetchQueries: [{\r\n            query: GET_STUDENT_ACADEMIC_YEAR,\r\n            variables: {\r\n                studentId: studentInfo?.id,\r\n            }\r\n        }]\r\n    });\r\n\r\n    if(data&&!errors) {\r\n     message.success('Delete Successfully!')\r\n   }\r\n   \r\n}\r\n\r\n\r\nconst Semester_Menu = (semester: any, academicYearInfo: any) => (\r\n    <Menu>\r\n          <Menu.Item>\r\n               {/* update  */}\r\n               {privileges?.update&& <Tag  color={'blue'} style={{\r\n                            margin: '0rem 1rem',\r\n                            cursor: 'pointer'\r\n                            }}  onClick={() => handleUpdateSemester(semester, academicYearInfo?.id) }> Update\r\n                            \r\n                </Tag>}\r\n\r\n    \r\n          </Menu.Item>\r\n          <Menu.Item>\r\n              \r\n               {privileges?.delete&& <Popconfirm\r\n\r\n                title='Are you Sure to Delete？' \r\n                onConfirm={() => handleDeleteSemester(semester?.id) }\r\n                >\r\n\r\n                        <Tag  color={'red'} \r\n                        style={{\r\n                        margin: '0rem 1rem',\r\n                        cursor: 'pointer'\r\n                        }} > \r\n                            Delete\r\n                        </Tag>\r\n                </Popconfirm>}\r\n          </Menu.Item>\r\n    </Menu>\r\n);\r\n\r\nconst AC_Menu = (academicYear: any) => (\r\n    <Menu>\r\n       <Menu.Item >\r\n        <a>\r\n        {privileges?.update&& <Tag  color={'blue'} style={{\r\n                margin: '0rem 1rem',\r\n                cursor: 'pointer'\r\n                }}  onClick={() => handleUpdateAcademicYear(academicYear) }> Update\r\n                \r\n                </Tag>}\r\n\r\n        </a>\r\n      </Menu.Item>\r\n  \r\n      <Menu.Item >\r\n        <a>\r\n            {privileges?.delete&& <Popconfirm\r\n\r\n            title='Are you Sure to Delete？' \r\n            onConfirm={() => handleDeleteAcademicYear(academicYear?.id) }\r\n            >\r\n\r\n                    <Tag  color={'red'} \r\n                    style={{\r\n                    margin: '0rem 1rem',\r\n                    cursor: 'pointer'\r\n                    }} > \r\n                        Delete\r\n                    </Tag>\r\n            </Popconfirm>}\r\n        </a>\r\n      </Menu.Item>\r\n     \r\n  \r\n      {/* <Menu.Item danger>a danger item</Menu.Item> */}\r\n    </Menu>\r\n  );\r\n\r\n  \r\n  \r\n   \r\n\r\n    return (\r\n        <>\r\n           <Modal\r\n            forceRender \r\n            onCancel={onCancel}\r\n            visible={visible}\r\n            title={`${studentInfo?.fullName}'s Grade`}\r\n            centered\r\n            width={'780px'}\r\n            onOk={onCancel}\r\n            footer={[\r\n                <Button key=\"back\" onClick={() => onCancel()}>\r\n                  Return\r\n                </Button>,\r\n              \r\n              ]}\r\n\r\n            \r\n            {...formItemLayout}\r\n            >\r\n            \r\n            {privileges?.create&& <Button style={{\r\n                margin: '0rem 0rem'\r\n             }} type=\"primary\" onClick={handleCreateAcademicYear}>Create Academic Year\r\n             \r\n             </Button>}\r\n            <br />\r\n            \r\n            {academicYears.length > 0 ? academicYears.map((academicYear: any) => (\r\n                <Fragment key={academicYear.id}>\r\n                 <h2 className=\"t_center\" style={{ margin: '1rem'}} >{academicYear?.academicYearName}\r\n\r\n\r\n                    {/* update and delete  */}\r\n\r\n                     <Dropdown overlay={AC_Menu(academicYear)}>\r\n             \r\n                        <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                             {\"  \"}  <EditOutlined />\r\n                        </a>\r\n                    </Dropdown>\r\n\r\n\r\n              \r\n\r\n\r\n                 </h2>\r\n\r\n               \r\n\r\n                 <br />\r\n               \r\n                 {privileges?.create&& <Button style={{\r\n                margin: '0rem 0rem'\r\n                }} type=\"primary\" onClick={() => handleCreateSemester(academicYear?.id) }>Create Semester \r\n                \r\n                </Button>}\r\n\r\n                 {academicYear?.semester.length > 0 ? academicYear?.semester.map((semester: any) => (\r\n                    <Fragment key={semester.id}>\r\n                    <h4 className=\"t_center\" >{semester.semesterName}\r\n                       \r\n\r\n                        {/* update and delete  */}\r\n\r\n                     <Dropdown overlay={Semester_Menu(semester, academicYear)}>\r\n             \r\n                        <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                            {\"  \"}  <EditOutlined />\r\n                        </a>\r\n                    </Dropdown>\r\n                           \r\n\r\n\r\n                    </h4>\r\n                    <br />\r\n                      <Grade   academicYearId={academicYear?.id}  authUser={authUser} grade={semester.grade} semesterId={semester.id} studentInfo={studentInfo} />\r\n                    </Fragment>\r\n                    \r\n                )): <Empty />}\r\n\r\n\r\n                </Fragment>\r\n                 \r\n            )): <Empty />}\r\n              \r\n     \r\n\r\n             {privileges?.create&&  \r\n            <CreateStudentSemesterModal \r\n              visible={isShowCreateSemester} \r\n              toggleVisible={toggleShowCreateSemester}\r\n              studentInfo={studentInfo}\r\n              academicYearId={academicYearId}\r\n\r\n              />}\r\n\r\n              {privileges?.create&& <CreateStudentAcademicYearModal\r\n               \r\n               visible={isShowCreateAcademicYear}\r\n               toggleVisible={toggleShowCreateAcademicYear}\r\n               studentInfo={studentInfo}\r\n              \r\n              />}\r\n\r\n                {privileges?.update&& <UpdateStudentAcademicYearModal\r\n               \r\n               visible={isShowUpdateAcademicYear}\r\n               toggleVisible={toggleShowUpdateAcademicYear}\r\n               studentInfo={studentInfo}\r\n               academicYearInfo={academicYearInfo}\r\n              \r\n              />}\r\n\r\n               {privileges?.update&& <UpdateStudentSemesterModal\r\n               \r\n               visible={isShowUpdateSemester}\r\n               toggleVisible={toggleShowUpdateSemester}\r\n               studentInfo={studentInfo}\r\n               semesterInfo={semesterInfo}\r\n               academicYearId={academicYearId}\r\n              \r\n              />}\r\n\r\n\r\n         </Modal>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default StudentGrade","D:\\labc-web\\labc-web-admin\\src\\components\\TeacherProfile\\AvatarAndProfile.tsx",["1406","1407","1408"],"import React from 'react';\r\nimport { Avatar, Card } from \"antd\";\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_STAFF } from '../../graphql/staff';\r\nimport Loading from '../Loading';\r\n\r\nconst AvatarAndProfile = ({ authUser }: any) => {\r\n\r\n    const { data, loading, error } = useQuery(GET_STAFF, {\r\n        variables: {\r\n            id: authUser?.id,\r\n        },\r\n        skip: !authUser\r\n    })\r\n    const getStaff = data&&data?.getStaff\r\n    if(loading) {\r\n        return <Loading />\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n        \r\n                              <div className=\"avatar\">\r\n                                  <img   alt={`${authUser?.fullName}`}\r\n                                   src={authUser?.avatar_url || getStaff?.avatar_url}  />\r\n                         \r\n        \r\n           \r\n                              </div>\r\n\r\n                              <div className=\"info\">\r\n\r\n                                <div className=\"title\">\r\n                                    <a target=\"_blank\" href=\"/\">{authUser?.fullName || getStaff?.fullName}</a>\r\n                                </div>\r\n\r\n                                <div className=\"desc\"> {getStaff?.adminDepartment?.name} \r\n                                </div>\r\n        \r\n                             </div>\r\n\r\n\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AvatarAndProfile\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Staff.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\CreateCourse.tsx",["1409"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\n\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { GET_COURSES, CREATE_COURSE } from \"../../graphql/course\";\r\nimport { GET_DEPARTMENTS } from \"../../graphql/department\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst CreateCourseModal = (props: any) => {\r\n    const [CreateCourseMutation] = useMutation(CREATE_COURSE);\r\n    const { data } = useQuery(GET_DEPARTMENTS, {\r\n        fetchPolicy: \"network-only\",\r\n        skip: !props.visible\r\n    });\r\n\r\n    const departments = data&&data.getDepartments.departments;\r\n\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n           \r\n            courseId: values.courseId,\r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            departmentId: values.departmentId\r\n      \r\n\r\n        \r\n        }\r\n        if(!values.departmentId) {\r\n            message.warn(\"department ID Not Found!\");\r\n            return false;\r\n        }\r\n        \r\n        const { data, errors } = await CreateCourseMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n             let { getCourses } = cache.readQuery({ query: GET_COURSES, variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n               } });\r\n\r\n                const newCourse = data?.createCourse;\r\n                cache.writeQuery({\r\n                    query: GET_COURSES,\r\n                    variables: {\r\n                        authUserId: null,\r\n                        skip: 0,\r\n                        limit: 0\r\n                    },\r\n                    data: { getCourses: {\r\n                        courses: [...getCourses.courses, newCourse]\r\n                    }}\r\n                });\r\n\r\n            }\r\n       \r\n        });\r\n        \r\n        if(data && !errors) {\r\n            message.success('Added Course  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n     \r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Course'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Course Code'}\r\n                    name=\"courseId\"\r\n                    rules={[\r\n                        { required: true, message: 'Course Code is empty.' },\r\n                        { min: 3, message: 'Course Code must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Course Code' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Department'}\r\n                    name=\"departmentId\"\r\n                    rules={[\r\n                        { required: true, message: 'Department is empty.' },\r\n                       \r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Department\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {departments?departments.map((department: any) => {\r\n                        return(\r\n                            <Option   key={department.id} value={`${department.id}`}>{department?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateCourse= connect(mapStateToProps, {})(CreateCourseModal);\r\n\r\nexport default CreateCourse;","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EditCourse.tsx",["1410"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\n\r\nimport { GET_COURSES, UPDATE_COURSE } from \"../../graphql/course\";\r\nimport { GET_DEPARTMENTS } from '../../graphql/department';\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditCourseModal = (props: any) => {\r\n\r\n    const [departmentId, setDepartmentId] = useState('');\r\n    const [EditCourseMutation] = useMutation(UPDATE_COURSE)\r\n    const [form] = Form.useForm();\r\n    const { data } = useQuery(GET_DEPARTMENTS);\r\n\r\n    const departments = data&&data.getDepartments.departments;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          courseId: props.courseInfo.courseId,\r\n          name: props.courseInfo.name,\r\n          introduction: props.courseInfo.introduction,\r\n          departmentId: props.courseInfo?.department?.id\r\n       })\r\n\r\n       setDepartmentId(props.courseInfo?.department?.id)\r\n\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n const onRegister =  async (values: any) => {\r\n        /**\r\n         * import note \r\n         * if department id has changed and change the id\r\n         */\r\n\r\n        const department_ID = values.departmentId || departmentId;\r\n\r\n        const edit__Input = {\r\n        \r\n            id: props.courseInfo.id,\r\n            courseId: values.courseId,\r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            departmentId: department_ID\r\n      \r\n\r\n        \r\n        }\r\n\r\n\r\n        const { data, errors } = await EditCourseMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_COURSES,\r\n                variables: {\r\n                    authUserId: null,\r\n                    skip: 0,\r\n                    limit: 0\r\n                },\r\n         }],\r\n          awaitRefetchQueries: true\r\n        });\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Course  Successfully!')\r\n            onCancel();\r\n            setDepartmentId('');\r\n        \r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Course'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n\r\n\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    departmentId: departmentId || props.courseInfo?.department?.id,\r\n                  \r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Course Code'}\r\n                    name=\"courseId\"\r\n                    rules={[\r\n                        { required: true, message: 'Course Code is empty.' },\r\n                        { min: 3, message: 'Course Code must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Course Code' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Department'}\r\n                    name=\"departmentId\"\r\n                    rules={[\r\n                        { required: true, message: 'Department is empty.' },\r\n                     \r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Department\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {departments?departments.map((department: any) => {\r\n                        return(\r\n                            <Option   key={department.id} value={`${department.id}`}>{department?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditCourse= connect(mapStateToProps, {})(EditCourseModal);\r\n\r\nexport default EditCourse;","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\EditStaff.tsx",["1411","1412","1413"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nimport Avatar from '../Students/Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_STAFF, GET_STAFFS } from \"../../graphql/staff\";\r\n\r\nimport { GET_ADMIN_DEPARTMENTS } from '../../graphql/adminDepartment';\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditStaffModal = (props: any) => {\r\n  \r\n    const [EditStaffMutation] = useMutation(UPDATE_STAFF)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          fullName: props.staffInfo.fullName,\r\n          staffId: props.staffInfo.staffId,\r\n          name: props.staffInfo.name,\r\n          email: props.staffInfo.email,\r\n        //   password: props.staffInfo.password,\r\n          programme: props.staffInfo.programme?.id,\r\n          gender: props.staffInfo.gender,\r\n          dateOfAdmission: props.staffInfo?.dateOfAdmission,\r\n\r\n       })\r\n       setImg_Src(props?.staffInfo?.avatar_url)\r\n    }, [props]);\r\n\r\n  \r\n    const [img_src, setImg_Src] = useState('');\r\n\r\n    const { data, error, loading} = useQuery(GET_ADMIN_DEPARTMENTS, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        skip: !props.visible\r\n\r\n    }) \r\n\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n  \r\n\r\n\r\n    const adminDepartments = data&&data?.getAdminDepartments?.adminDepartments || [];\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n\r\n        const AD_department_ID = values.adminDepartment ||  props.staffInfo.adminDepartment?.id\r\n\r\n        const edit__Input = {\r\n            id: props.staffInfo?.id,\r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            avatar_url: img_src, \r\n            staffId: values.staffId,\r\n            adminDepartment: AD_department_ID,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission\r\n        }\r\n\r\n       \r\n\r\n        const { data, errors } = await EditStaffMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STAFFS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n            }],\r\n         awaitRefetchQueries: true\r\n        });\r\n\r\n        if(errors) {\r\n            message.error(`${errors}`)\r\n        }\r\n        if(data && !errors) {\r\n            message.success(t(\"added_successfully\"))\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n            setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n            if(img_src !== props?.staffInfo?.avatar_url) {\r\n                return window.location.reload(false);\r\n              }\r\n        \r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n  \r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                // forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"staffs.edit_staff\")}\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                      {t(\"return\")}\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                     {t(\"submit\")}\r\n                    </Button>\r\n                  ]}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    adminDepartment: props.staffInfo?.adminDepartment?.id,\r\n                    gender: props.staffInfo?.gender\r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.avatar\")}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)}\r\n                           edit={true}\r\n                           resetFile={!img_src} \r\n                           image_src={props.staffInfo.avatar_url}\r\n                        \r\n                          \r\n                           />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.fullName\")}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.fullName_req\") },\r\n                        { min: 3, message: t(\"staffs.fullName_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder={t(\"staffs.fullName\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.name\")}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.name_req\") },\r\n                        { min: 3, message: t(\"staffs.name_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.name\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* staff ID */}\r\n\r\n                    <Form.Item label={t(\"staffs.staffId\")}\r\n                    name=\"staffId\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.staffId_req\") },\r\n                        { min: 3, message: t(\"staffs.staffId_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.staffId\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={t(\"staffs.email\")}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.email_req\") },\r\n                        { min: 3, message: t(\"staffs.email_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.email\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n     \r\n\r\n\r\n               \r\n                    <Form.Item\r\n                    \r\n                    label={t(\"staffs.admin_department\")}\r\n                    name=\"adminDepartment\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder={t(\"staffs.select_department\")}\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {adminDepartments?adminDepartments.map((adminDepartment: any) => {\r\n                        return(\r\n                            <Option   key={adminDepartment.id} value={`${adminDepartment.id}`}>{adminDepartment?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={t(\"staffs.gender\")} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: t(\"staffs.gender_req\") },\r\n                                { min: 3, message: t(\"staffs.gender_min_msg\") }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder={t(\"staffs.select_gender\")}\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={t(\"staffs.dateOfAdmission\")} \r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: t(\"staffs.dateOfAdmission_req\") },\r\n                                { min: 3, message: t(\"staffs.dateOfAdmission_min_msg\") }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder={t(\"staffs.dateOfAdmission\")} />\r\n                        \r\n                        </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditStaff= connect(mapStateToProps, {})(EditStaffModal);\r\n\r\nexport default EditStaff;","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaff.tsx",["1414","1415","1416"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Avatar from '../Students/Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { CREATE_STAFF, GET_STAFFS } from \"../../graphql/staff\";\r\nimport { GET_ADMIN_DEPARTMENTS } from \"../../graphql/adminDepartment\";\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst CreateStaffModal = (props: any) => {\r\n    const [CreateStaffMutation] = useMutation(CREATE_STAFF)\r\n    const [form] = Form.useForm();\r\n\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [_error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const { data,\r\n         error,\r\n         loading\r\n\r\n        } = useQuery(GET_ADMIN_DEPARTMENTS, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        skip: !props.visible\r\n        \r\n    }) \r\n\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n\r\n \r\n\r\n\r\n    const adminDepartments = data&&data.getAdminDepartments.adminDepartments || [];\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n\r\n\r\n\r\n        const create__Input = {\r\n        \r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            password: values.password,\r\n            avatar_url: img_src, \r\n            staffIDNo: values.staffIDNo,\r\n            adminDepartmentId: values.adminDepartment,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission\r\n        }\r\n\r\n      \r\n\r\n        const { data, errors } = await CreateStaffMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STAFFS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n             }],\r\n           awaitRefetchQueries: true\r\n        \r\n        });\r\n\r\n        // console.log(\"here si data,\", data, errors)\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success(t(\"added_successfully\"))\r\n\r\n            setImg_Src('');\r\n      \r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"staffs.create_staff\")}\r\n                centered\r\n                onOk={handleOk}\r\n            \r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                     {t(\"return\")}\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                     {t(\"submit\")}\r\n                    </Button>\r\n                  ]}\r\n\r\n                  \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.avatar\")}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)} create_img={img_src} resetFile={!img_src} />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.fullName\")}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.fullName_req\") },\r\n                        { min: 3, message: t(\"staffs.fullName_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder={t(\"staffs.fullName\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.name\")}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.name_req\") },\r\n                        { min: 3, message: t(\"staffs.name_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.name\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* staff ID */}\r\n\r\n                    <Form.Item label={t(\"staffs.staffId\")}\r\n                    name=\"staffIDNo\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.staffId_req\") },\r\n                        { min: 3, message: t(\"staffs.staffId_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.staffId\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={t(\"staffs.email\")}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.email_req\") },\r\n                        { min: 3, message: t(\"staffs.email_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.email\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       <Form.Item label={t(\"staffs.password\")}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.password_req\") },\r\n                        { min: 3, message: t(\"staffs.password_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder={t(\"staffs.password\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n               \r\n                    <Form.Item label={t(\"staffs.admin_department\")}\r\n                    name=\"adminDepartment\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder={t(\"staffs.select_department\")}\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {adminDepartments?adminDepartments.map((adminDepartment: any) => {\r\n                        return(\r\n                            <Option   key={adminDepartment.id} value={`${adminDepartment.id}`}>{adminDepartment?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={t(\"staffs.gender\")}\r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: t(\"empty\") },\r\n                              \r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder={t(\"staffs.select_gender\")}\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={t(\"staffs.dateOfAdmission\")}\r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: t(\"staffs.dateOfAdmission_req\") },\r\n                                { min: 3, message: t(\"staffs.dateOfAdmission_min_msg\") }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder={t(\"staffs.dateOfAdmission\")} />\r\n                        \r\n                        </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateStaff= connect(mapStateToProps, {  })(CreateStaffModal);\r\n\r\nexport default CreateStaff;","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\EditDepartment.tsx",["1417"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { GET_DEPARTMENTS, UPDATE_DEPARTMENT } from \"../../graphql/department\";\r\n\r\n\r\n\r\nconst EditDepartmentModal = (props: any) => {\r\n    const [EditDepartmentMutation] = useMutation(UPDATE_DEPARTMENT)\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          departmentId: props.departmentInfo.departmentId,\r\n          name: props.departmentInfo.name,\r\n          introduction: props.departmentInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const edit__Input = {\r\n            id: props.departmentInfo.id,\r\n            departmentId: values.departmentId,\r\n            name: values.name,\r\n            introduction: values.introduction\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditDepartmentMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_DEPARTMENTS,\r\n                variables: {\r\n                    authUserId: null,\r\n                    skip: 0,\r\n                    limit: 0\r\n                },\r\n           }],\r\n           awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Department  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Department'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Department ID'}\r\n                    name=\"departmentId\"\r\n                    rules={[\r\n                        { required: true, message: 'Department ID is empty.' },\r\n                        { min: 3, message: 'Department ID must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Department ID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditDepartment= connect(mapStateToProps, {})(EditDepartmentModal);\r\n\r\nexport default EditDepartment;","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\Teacher.tsx",["1418"],"import React, { FC, Fragment, useEffect, useState } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { Modal, Descriptions, Empty, Button } from 'antd';\r\nimport {  EditTwoTone } from \"@ant-design/icons\";\r\nimport {   useQuery } from \"@apollo/client\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from 'moment';\r\n\r\nimport { GET_TEACHER_PROFILE } from '../../graphql/teacher';\r\n\r\nimport EditProfile from \"./EditProfile\";\r\nimport CreateProfile from './CreateProfile';\r\nimport Loading from '../Loading';\r\n\r\n\r\ninterface TeacherProps {\r\n    visible: boolean,\r\n    toggleVisible: any,\r\n    authUser: any,\r\n    teacherInfo: TeacherInfo\r\n}\r\n\r\ninterface TeacherInfo {\r\n    id?: any,\r\n    name?: string,\r\n    teacher_id?: string,\r\n    age?: number,\r\n    gender?: string,\r\n    major?: string,\r\n    country?: string,\r\n    academic_year?: string,\r\n    address?: string\r\n\r\n}\r\n\r\ntype Props = TeacherInfo & TeacherProps;\r\n\r\nconst Teacher: FC<Props> = ({ visible, teacherInfo, toggleVisible, authUser}) => {\r\n\r\n\r\n     const { privileges } = authUser;\r\n\r\n    const [isShowUpdatePro, setIsShowUpdatePro] = useState(false);\r\n    const [isShowCreateProfile, setIsShowCreateProfile] = useState(false);\r\n\r\n    const toggleShowUpdateProfile = (visible: boolean) => {\r\n        setIsShowUpdatePro(visible);\r\n    }\r\n\r\n    const toggleShowCreateProfile = (visible: boolean) => {\r\n        setIsShowCreateProfile(visible);\r\n    }\r\n    // const handleCreateProfile = (record: object) => {\r\n    //   toggleShowCreateProfile(true);\r\n     \r\n    // }\r\n\r\n    const handleUpdateProfile = () => {\r\n        toggleShowUpdateProfile(true);\r\n    }\r\n\r\n\r\n    \r\n    // useEffect(() => {\r\n\r\n    //     form.setFieldsValue({\r\n    //         name: teacherInfo.name,\r\n    //         teacher_id: teacherInfo.teacher_id,\r\n    //         major: teacherInfo.major,\r\n    //       });\r\n\r\n    // }, [teacherInfo]);\r\n\r\n    // const [form] = Form.useForm();\r\n\r\n    const { data, loading, error } = useQuery(GET_TEACHER_PROFILE, {\r\n        variables: {\r\n            teacherId: teacherInfo?.id,\r\n        },\r\n        skip: !teacherInfo?.id\r\n\r\n    });\r\n\r\n     if(loading || error) {\r\n         return <Loading />;\r\n     }\r\n  \r\n\r\n\r\n\r\n    const profiles = data&&data.getTeacherProfile?.profile\r\n\r\n   \r\n    const onCancel = (): void => {\r\n         toggleVisible(false);\r\n    }\r\n\r\n    // const handleOk = () => {\r\n        // const value = form.getFieldValue();\r\n\r\n    // }\r\n\r\n  \r\n  \r\n\r\n    const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 14 },\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n           <Modal\r\n            onCancel={onCancel}\r\n            visible={visible}\r\n            title={`${teacherInfo.name}'s Profile`}\r\n            centered\r\n           \r\n            width={'780px'}\r\n            onOk={onCancel}\r\n            footer={[\r\n                <Button key=\"back\" onClick={() => onCancel()}>\r\n                  Return\r\n                </Button>,\r\n             \r\n              ]}\r\n            {...formItemLayout}\r\n            >\r\n            \r\n            {\r\n                profiles? <>\r\n            \r\n                {privileges?.update&&<Button \r\n                style={{\r\n                margin: '1rem 0rem'\r\n                }}\r\n                onClick={handleUpdateProfile}\r\n              >\r\n                 <EditTwoTone />\r\n                 Edit Profile\r\n                </Button>}\r\n\r\n\r\n             <Descriptions\r\n                bordered>\r\n\r\n                  {/* <Descriptions.Item label=\"Date Of Birth\"> {moment(profiles?.dateOfBirth).format('DD/MM/YYYY')}</Descriptions.Item>\r\n                  <Descriptions.Item label=\"Language\">{profiles?.languages}</Descriptions.Item>\r\n                  <Descriptions.Item label=\"Nationality\"> {profiles?.nationality}</Descriptions.Item>\r\n                  <Descriptions.Item label=\"Passport No / NRC No\"> {profiles?.passportNoOrNRCNo}</Descriptions.Item>\r\n                  <Descriptions.Item label=\"Place Of Birth\"> {profiles?.placeOfBirth}</Descriptions.Item>\r\n                  */}\r\n                  \r\n                  <Descriptions.Item>\r\n\r\n                  <p> <b>Date Of Birth:</b> {moment(profiles?.dateOfBirth).format('DD/MM/YYYY')}</p>  <hr className=\"line\" /> <br />\r\n                  <p> <b>Language:</b> {profiles?.languages} </p> <hr className=\"line\" /> <br />\r\n                  <p> <b>Nationality:</b> {profiles?.nationality} </p> <hr className=\"line\" /> <br />\r\n                  <p> <b>Passport No / NRC No:</b> {profiles?.passportNoOrNRCNo} </p> <hr  className=\"line\" /> <br />\r\n                  <p> <b>Place Of Birth:</b> {profiles?.placeOfBirth} </p> <hr  className=\"line\" />\r\n\r\n                  </Descriptions.Item>\r\n                  \r\n              </Descriptions>\r\n\r\n\r\n                </>: <Fragment>\r\n                  {privileges?.create&& <Button style={{\r\n                 margin: '1rem 0rem'\r\n                 }} type=\"primary\" onClick={() => toggleShowCreateProfile(true)}>Add {teacherInfo?.name} Profile\r\n              \r\n               </Button>}\r\n                  <Empty />\r\n              </Fragment>\r\n              \r\n            }\r\n            \r\n           <div>\r\n\r\n\r\n\r\n             {privileges?.update&&   <EditProfile teacherInfo={teacherInfo} visible={isShowUpdatePro} profileInfo={profiles} toggleVisible={toggleShowUpdateProfile} />}\r\n             {privileges?.create&&   <CreateProfile teacherInfo={teacherInfo} visible={isShowCreateProfile} toggleVisible={toggleShowCreateProfile} />}\r\n          \r\n           </div>\r\n\r\n\r\n\r\n         </Modal>\r\n      </>\r\n  )\r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n    authUser: state?.auth?.user,\r\n}))\r\nexport default connect(MapStateToProps, {})(Teacher);","D:\\labc-web\\labc-web-admin\\src\\components\\Departments\\CreateDepartment.tsx",["1419"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { GET_DEPARTMENTS, CREATE_DEPARTMENT } from \"../../graphql/department\";\r\n\r\n\r\n\r\nconst CreateDepartmentModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateDepartmentMutation] = useMutation(CREATE_DEPARTMENT);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          department_id: props.departmentInfo.department_id,\r\n          name: props.departmentInfo.name,\r\n          introduction: props.departmentInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n          \r\n            departmentId: values.departmentId,\r\n            name: values.name,\r\n            introduction: values.introduction\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateDepartmentMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getDepartments } = cache.readQuery({ query: GET_DEPARTMENTS, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newDepartment = data?.createDepartment;\r\n\r\n                   cache.writeQuery({\r\n                       query: GET_DEPARTMENTS,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getDepartments: {\r\n                           departments: [...getDepartments.departments, newDepartment]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Department  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        };\r\n        \r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Department'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Department ID'}\r\n                    name=\"departmentId\"\r\n                    rules={[\r\n                        { required: true, message: 'Department ID is empty.' },\r\n                        { min: 3, message: 'Department ID must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Department ID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateDepartment= connect(mapStateToProps, {})(CreateDepartmentModal);\r\n\r\nexport default CreateDepartment;","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\CreateTeacher.tsx",["1420","1421","1422"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\n\r\nimport Avatar from '../Students/Avatar';\r\n\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { CREATE_TEACHER, GET_TEACHERS } from \"../../graphql/teacher\";\r\n\r\nimport { GET_DEPARTMENTS } from '../../graphql/department';\r\nimport Loading from '../Loading';\r\n\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst CreateTeacherModal = (props: any) => {\r\n    const [CreateTeacherMutation] = useMutation(CREATE_TEACHER)\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [_error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const { \r\n         data,\r\n         error,\r\n         loading\r\n\r\n        } = useQuery(GET_DEPARTMENTS, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        skip: !props.visible\r\n        \r\n    }) \r\n\r\n    if(loading || error) {\r\n        return <Loading />;\r\n    }\r\n\r\n \r\n\r\n\r\n    const departments = data&&data?.getDepartments?.departments || [];\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n\r\n\r\n\r\n        const create__Input = {\r\n        \r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            password: values.password,\r\n\r\n            avatar_url: img_src, \r\n            teacherIDNo: values.teacherIDNo,\r\n            departmentId: values.department,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission\r\n        }\r\n\r\n        // console.log('here is Create Executive Input', create_Executive_Input);\r\n\r\n        const { data, errors } = await CreateTeacherMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_TEACHERS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n        }],\r\n        awaitRefetchQueries: true\r\n        \r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Teacher  Successfully!')\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n            setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Teacher Account'\r\n                centered\r\n                onOk={handleOk}\r\n               \r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key={'back'} onClick={onCancel}>\r\n                        Return\r\n                    </Button>,\r\n                    <Button key={'submit'} onClick={handleOk}>\r\n                        Submit\r\n                    </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)} create_img={img_src} resetFile={!img_src} />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* teacher ID */}\r\n\r\n                    <Form.Item label={'Teacher ID'}\r\n                    name=\"teacherIDNo\"\r\n                    rules={[\r\n                        { required: true, message: 'teacherID is empty.' },\r\n                        { min: 3, message: 'teacherID must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='TeacherID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n               \r\n                    <Form.Item label={'Department'}\r\n                    name=\"department\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Programme\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {departments?departments.map((department: any) => {\r\n                        return(\r\n                            <Option   key={department.id} value={`${department.id}`}>{department?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Date Of Admission'} \r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: 'Date Of Admission is empty.' },\r\n                                { min: 3, message: 'Date Of Admission must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='Date Of Admission' />\r\n                        \r\n                        </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateTeacher= connect(mapStateToProps, {  })(CreateTeacherModal);\r\n\r\nexport default CreateTeacher;","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\CreateAdminDepartment.tsx",["1423"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { GET_ADMIN_DEPARTMENTS, CREATE_ADMIN_DEPARTMENT } from \"../../graphql/adminDepartment\";\r\n\r\n\r\n\r\n\r\nconst CreateDepartmentModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n    const [CreateDepartmentMutation] = useMutation(CREATE_ADMIN_DEPARTMENT);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          department_id: props.departmentInfo.department_id,\r\n          name: props.departmentInfo.name,\r\n          introduction: props.departmentInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n          \r\n            departmentId: values.departmentId,\r\n            name: values.name,\r\n            introduction: values.introduction\r\n  \r\n\r\n        }\r\n\r\n        if(!values?.name) {\r\n           message.warn(t(\"admin_department.name_req\"));\r\n           return false;\r\n        }\r\n\r\n        if(!values?.introduction) {\r\n            message.warn(t(\"admin_department.introduction_req\"));\r\n            return false;\r\n         }\r\n\r\n\r\n\r\n        const { data, errors } = await CreateDepartmentMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getAdminDepartments } = cache.readQuery({ query: GET_ADMIN_DEPARTMENTS, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newDepartment = data?.createDepartment;\r\n\r\n                   cache.writeQuery({\r\n                       query: GET_ADMIN_DEPARTMENTS,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getAdminDepartments: {\r\n                           departments: [...getAdminDepartments.adminDepartments, newDepartment]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success(t(\"admin_department.created_admin_department\"));\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"admin_department.create_department\")}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                footer={\r\n                   [  <Button key={'return'} onClick={onCancel}>\r\n                     {t(\"return\")}\r\n                     </Button>,\r\n                    <Button key={'submit'} type={'primary'} onClick={handleOk}> \r\n                            {t(\"submit\")}\r\n                    </Button>\r\n                ]\r\n                }\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                   \r\n\r\n                    <Form.Item label={t(\"admin_department.name\")}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: t(\"admin_department.name_req\") },\r\n                        { min: 3, message: t(\"admin_department.name_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"admin_department.name\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={t(\"admin_department.introduction\")}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: t(\"admin_department.introduction_req\") },\r\n                        { min: 3, message: t(\"admin_department.introduction_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"admin_department.introduction\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateDepartment= connect(mapStateToProps, {})(CreateDepartmentModal);\r\n\r\nexport default CreateDepartment;","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\EditTeacher.tsx",["1424","1425","1426"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\n\r\nimport Avatar from '../Students/Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_TEACHER, GET_TEACHERS } from \"../../graphql/teacher\";\r\nimport { GET_DEPARTMENTS } from \"../../graphql/department\";\r\nimport Loading from '../Loading';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditTeacherModal = (props: any) => {\r\n    const [EditTeacherMutation] = useMutation(UPDATE_TEACHER)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          fullName: props.teacherInfo.fullName,\r\n          userId: props.teacherInfo.userId,\r\n          name: props.teacherInfo.name,\r\n          email: props.teacherInfo.email,\r\n        //   password: props.teacherInfo.password,\r\n          department: props.teacherInfo.department?.id,\r\n          gender: props.teacherInfo.gender,\r\n          dateOfAdmission: props.teacherInfo?.dateOfAdmission,\r\n\r\n       })\r\n       setImg_Src(props?.teacherInfo?.avatar_url)\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [_error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const { data, error, loading} = useQuery(GET_DEPARTMENTS, {\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        skip: !props.visible\r\n\r\n    }) \r\n\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n\r\n\r\n\r\n    const departments = data&&data.getDepartments.departments || [];\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n\r\n           const department_ID = values.department ||  props.teacherInfo.department?.id\r\n\r\n        const edit__Input = {\r\n            id: props.teacherInfo?.id,\r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            avatar_url: img_src, \r\n            userId: values.userId,\r\n            department: department_ID,\r\n            gender: values.gender,\r\n            dateOfAdmission: values.dateOfAdmission\r\n            \r\n        }\r\n\r\n       \r\n\r\n        const { data, errors } = await EditTeacherMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_TEACHERS,\r\n                variables: {\r\n                   authUserId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n            }],\r\n         awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Edit Teacher  Successfully!')\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n            setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n             if(img_src !== props?.teacherInfo?.avatar_url) {\r\n               return window.location.reload(false);\r\n             }\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                // forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Teacher Account'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key={'back'} onClick={onCancel}> Return </Button>,\r\n                    <Button key={'submit'} type={'primary'} onClick={handleOk}> Submit </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    department: props.teacherInfo?.department?.id,\r\n                    gender: props.teacherInfo?.gender\r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)}\r\n                           edit={true}\r\n                           resetFile={!img_src} \r\n                           image_src={props.teacherInfo.avatar_url}\r\n\r\n                           />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n                    {/* teacher ID */}\r\n\r\n                    <Form.Item label={' ID'}\r\n                    name=\"userId\"\r\n                    rules={[\r\n                        { required: true, message: 'userID is empty.' },\r\n                        { min: 3, message: 'userID must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='TeacherID' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       {/* <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item> */}\r\n\r\n\r\n               \r\n                    <Form.Item label={'Appled Department'}\r\n                    name=\"department\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Department\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {departments?departments.map((department: any) => {\r\n                        return(\r\n                            <Option   key={department.id} value={`${department.id}`}>{department?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                  \r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={'Date Of Admission'} \r\n                            name=\"dateOfAdmission\"\r\n                            rules={[\r\n                                { required: true, message: 'Date Of Admission is empty.' },\r\n                                { min: 3, message: 'Date Of Admission must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='Date Of Admission' />\r\n                        \r\n                        </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditTeacher= connect(mapStateToProps, {})(EditTeacherModal);\r\n\r\nexport default EditTeacher;","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\EditDownloadPage.tsx",["1427","1428","1429","1430"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { GET_DOWNLOADS_BY_TYPE, UPDATE_DOWNLOAD } from \"../../graphql/download\";\r\nimport Dragger from 'antd/lib/upload/Dragger';\r\nimport moment from \"moment\";\r\nimport { UploadFilesMutation } from '../../graphql/upload';\r\n\r\n\r\nconst FILE_PATH = 'https://ssbu-int-cdn.sfo3.digitaloceanspaces.com/ssbu_academic_download/';\r\n\r\nconst EditDownloadModal = (props: any) => {\r\n    const [EditDownloadMutation] = useMutation(UPDATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n\r\n\r\n    const [form] = Form.useForm();\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n\r\n \r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          name: props.downloadInfo.name,\r\n          content: props.downloadInfo.content,\r\n\r\n\r\n       })\r\n\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const dataLink = props.downloadInfo?.links?.map((link: any, index: number) => {\r\n      const fileName = link?.replace(FILE_PATH,'')\r\n     return {\r\n       uid: index,\r\n       name: fileName,\r\n       status: 'done',\r\n       url: link,\r\n     }\r\n   });\r\n\r\n   useEffect(() => {\r\n    \r\n    setFileList(dataLink)\r\n\r\n   }, [props?.downloadInfo?.links]);\r\n\r\n    \r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields();\r\n        setFileList([]);\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_academic_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n\r\n    \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n        /**\r\n          * handle Background Image\r\n          */\r\n  \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n             const newfileList = {\r\n                  uid: fileList.length+1,\r\n                  name:  image_url?.replace(FILE_PATH,''),\r\n                  url: image_url\r\n             }\r\n             setFileList([...fileList, newfileList]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n\r\n   }\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n        \r\n        const LinksArray = fileList?.map((file) => file.url);\r\n        \r\n        const edit__Input = {\r\n            id: props.downloadInfo.id,\r\n            name: values.name,\r\n            content: values.content,\r\n            links: LinksArray,\r\n            academic: true,\r\n            admin: false\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditDownloadMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n              query: GET_DOWNLOADS_BY_TYPE,\r\n              variables: {\r\n                type: \"academic\"\r\n              },\r\n             }],\r\n           awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Download  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n\r\n    const handleRemove = () => {\r\n       const newFileList = fileList.filter((file: any) => file?.status !== \"removed\");\r\n\r\n       setFileList(newFileList);\r\n\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n            \r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if(info.file.status === \"removed\") {\r\n                handleRemove();\r\n              }\r\n\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n            fileList: fileList\r\n     \r\n          };\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n              {fileList?(     <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Download'\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Update\r\n                  </Button>\r\n                ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n\r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>): null}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditDownload= connect(mapStateToProps, {})(EditDownloadModal);\r\n\r\nexport default EditDownload;","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDepartments\\EditAdminDepartment.tsx",["1431"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { GET_ADMIN_DEPARTMENTS, UPDATE_ADMIN_DEPARTMENT } from \"../../graphql/adminDepartment\";\r\n\r\n\r\n\r\n\r\nconst EditDepartmentModal = (props: any) => {\r\n    const [EditDepartmentMutation] = useMutation(UPDATE_ADMIN_DEPARTMENT)\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n        \r\n          name: props.departmentInfo.name,\r\n          introduction: props.departmentInfo.introduction,\r\n\r\n \r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const edit__Input = {\r\n            id: props.departmentInfo.id,\r\n            name: values.name,\r\n            introduction: values.introduction\r\n  \r\n        }\r\n        if(!values?.name) {\r\n            message.warn(t(\"admin_department.name_req\"));\r\n            return false;\r\n         }\r\n \r\n         if(!values?.introduction) {\r\n             message.warn(t(\"admin_department.introduction_req\"));\r\n             return false;\r\n          }\r\n\r\n        const { data, errors } = await EditDepartmentMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n                refetchQueries: [{\r\n                    \r\n                    query: GET_ADMIN_DEPARTMENTS,\r\n                    variables: {\r\n                        authUserId: null,\r\n                        skip: 0,\r\n                        limit: 0\r\n                    },\r\n            }],\r\n            awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success(t(\"admin_department.updated_admin_department\"))\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"admin_department.edit\")}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={\r\n                    [  <Button key={'return'} onClick={onCancel}>\r\n                      {t(\"return\")}\r\n                      </Button>,\r\n                     <Button key={'submit'} type={'primary'} onClick={handleOk}> \r\n                             {t(\"submit\")}\r\n                     </Button>\r\n                 ]\r\n                 }\r\n                 \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                  <Form.Item label={t(\"admin_department.name\")}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: t(\"admin_department.name_req\") },\r\n                        { min: 3, message: t(\"admin_department.name_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                       <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"admin_department.name\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={t(\"admin_department.introduction\")}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: t(\"admin_department.introduction_req\") },\r\n                        { min: 3, message: t(\"admin_department.introduction_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"admin_department.introduction\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditDepartment= connect(mapStateToProps, {})(EditDepartmentModal);\r\n\r\nexport default EditDepartment;","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\CreateAdminDownloadPage.tsx",["1432","1433"],"import React, { useEffect, useState } from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { Button, Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Upload, Input, message } from 'antd';\r\nimport  moment  from 'moment';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nimport {  CREATE_DOWNLOAD, GET_DOWNLOADS_BY_TYPE } from \"../../graphql/download\";\r\nimport { UploadFilesMutation } from \"../../graphql/upload\";\r\n\r\n\r\nconst { Dragger } = Upload;\r\n\r\n\r\n\r\nconst CreateAdminDownloadPageModal = (props: any) => {\r\n\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateDownloadPageMutation] = useMutation(CREATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          download_id: props.downloadInfo.download_id,\r\n          name: props.downloadInfo.name,\r\n          introduction: props.downloadInfo.introduction,\r\n\r\n\r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n        /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_admin_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n  \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n        /**\r\n          * handle Background Image\r\n          */\r\n  \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n\r\n             setFileList([...fileList, image_url]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n        //  console.log('here is data:', data)\r\n  \r\n   \r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n    \r\n            name: values.name,\r\n            content: values.content,\r\n            links: fileList,\r\n            academic: false,\r\n            admin: true\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateDownloadPageMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n              query: GET_DOWNLOADS_BY_TYPE,\r\n              variables: {\r\n                type: \"admin\"\r\n              },\r\n             }],\r\n           awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Download Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    \r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n     \r\n          };\r\n\r\n          const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Download Link'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Create\r\n                  </Button>\r\n                ]}\r\n\r\n                \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n             \r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n                   \r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n               \r\n\r\n    \r\n\r\n                </Form>\r\n\r\n                {startLoad&&<Spin indicator={antIcon} />}\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateDownloadPage= connect(mapStateToProps, {})(CreateAdminDownloadPageModal);\r\n\r\nexport default CreateDownloadPage;","D:\\labc-web\\labc-web-admin\\src\\components\\StaffProfile\\AvatarAndProfile.tsx",["1434","1435","1436"],"D:\\labc-web\\labc-web-admin\\src\\components\\StudentProfile\\AvatarAndProfile.tsx",["1437","1438"],"import React from 'react';\r\nimport { Avatar, Card } from \"antd\";\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_STUDENT } from '../../graphql/student';\r\nimport Loading from '../Loading';\r\n\r\nconst AvatarAndProfile = ({ authUser }: any) => {\r\n\r\n    const { data, loading, error } = useQuery(GET_STUDENT, {\r\n        variables: {\r\n            id: authUser?.id,\r\n        },\r\n        skip: !authUser\r\n    })\r\n    const getStudent = data&&data?.getStudent\r\n    if(loading || error) {\r\n        return <Loading />\r\n    }\r\n\r\n    \r\n    return (\r\n        <>\r\n\r\n        \r\n                              <div className=\"avatar\">\r\n                                  <img   alt={`${authUser?.fullName}`}\r\n                                   src={authUser?.avatar_url || getStudent?.avatar_url}  />\r\n                         \r\n        \r\n           \r\n                              </div>\r\n\r\n                              <div className=\"info\">\r\n\r\n                                <div className=\"title\">\r\n                                    <a target=\"_blank\" href=\"/\">{authUser?.fullName || getStudent?.fullName}</a>\r\n                                </div>\r\n\r\n                                <div className=\"desc\"> {getStudent?.programme?.name} \r\n                                </div>\r\n        \r\n                             </div>\r\n\r\n\r\n\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default AvatarAndProfile\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\AcademicDownloadPage\\CreateACDownloadPage.tsx",["1439","1440","1441"],"import React, { useEffect, useState } from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { Button, Select, Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Upload, Input, message, Progress } from 'antd';\r\nimport  moment  from 'moment';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nimport {  CREATE_DOWNLOAD, GET_DOWNLOADS_BY_TYPE } from \"../../graphql/download\";\r\nimport { UploadFilesMutation } from \"../../graphql/upload\";\r\n\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst { Option } = Select;\r\n\r\nconst CreateDownloadPageModal = (props: any) => {\r\n\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateDownloadPageMutation] = useMutation(CREATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          download_id: props.downloadInfo.download_id,\r\n          name: props.downloadInfo.name,\r\n          introduction: props.downloadInfo.introduction,\r\n\r\n\r\n\r\n       })\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n        /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_academic_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n  \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n        /**\r\n          * handle Background Image\r\n          */\r\n  \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n\r\n             setFileList([...fileList, image_url]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n        //  console.log('here is data:', data)\r\n  \r\n   \r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n    \r\n            name: values.name,\r\n            content: values.content,\r\n            links: fileList,\r\n            academic: true,\r\n            admin: false,\r\n            student: values.type === \"student\"\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateDownloadPageMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n              query: GET_DOWNLOADS_BY_TYPE,\r\n              variables: {\r\n                type: \"academic\"\r\n              },\r\n             }],\r\n           awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Download Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    \r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n     \r\n          };\r\n\r\n          const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Download Link'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Create\r\n                  </Button>\r\n                ]}\r\n\r\n                \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n             \r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Type'}\r\n                    name=\"type\"\r\n                    rules={[\r\n                        { required: true, message: 'type is empty.' },\r\n                \r\n                    ]}\r\n                    >\r\n                       \r\n                          <Select\r\n                           showSearch\r\n                           style={{ width: 200 }}\r\n                           placeholder=\"Select a Department\"\r\n                           optionFilterProp=\"children\"\r\n                         \r\n                           defaultValue=\"academic\"\r\n                           filterOption={(input, option) =>\r\n                           option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                           }\r\n                          >\r\n                              <Option key={'1'}  value={'academic'} > Academic </Option>\r\n                              <Option key={'2'} value={'student'} > Student </Option>\r\n                            \r\n                          </Select>\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n                   \r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n               \r\n\r\n    \r\n\r\n                </Form>\r\n\r\n                {startLoad&&<Spin indicator={antIcon} />}\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateDownloadPage= connect(mapStateToProps, {})(CreateDownloadPageModal);\r\n\r\nexport default CreateDownloadPage;","D:\\labc-web\\labc-web-admin\\src\\components\\AdminDownloadPage\\EditAdminDownloadPage.tsx",["1442","1443","1444","1445"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Button } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { GET_DOWNLOADS_BY_TYPE, UPDATE_DOWNLOAD } from \"../../graphql/download\";\r\nimport Dragger from 'antd/lib/upload/Dragger';\r\nimport moment from \"moment\";\r\nimport { UploadFilesMutation } from '../../graphql/upload';\r\n\r\n\r\nconst FILE_PATH = 'https://ssbu-int-cdn.sgp1.digitaloceanspaces.com/ssbu_admin_download/';\r\n\r\nconst EditDownloadModal = (props: any) => {\r\n\r\n    const [EditDownloadMutation] = useMutation(UPDATE_DOWNLOAD);\r\n\r\n    const [UploadImagesMutation] = useMutation(UploadFilesMutation);\r\n    const [form] = Form.useForm();\r\n    const [fileList, setFileList] = useState([]);\r\n    const [startLoad, setStartLoad] = useState(false);\r\n\r\n\r\n \r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          name: props.downloadInfo.name,\r\n          content: props.downloadInfo.content,\r\n\r\n\r\n       })\r\n\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const dataLink = props.downloadInfo?.links?.map((link: any, index: number) => {\r\n      const fileName = link?.replace(FILE_PATH,'')\r\n     return {\r\n       uid: index,\r\n       name: fileName,\r\n       status: 'done',\r\n       url: link,\r\n     }\r\n   });\r\n\r\n   useEffect(() => {\r\n    \r\n    setFileList(dataLink)\r\n\r\n   }, [props?.downloadInfo?.links]);\r\n\r\n    \r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields();\r\n        setFileList([]);\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n  const formatFilenameDownload = (filename: any) => {\r\n    // console.log('here is post', filename);\r\n    const date = moment().format(\"YYYYMMDD\");\r\n    const randomString = Math.random().toString(36).substring(2, 7);\r\n    const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n    const newFilename = `ssbu_admin_download/${cleanFileName}-${randomString}-${date}`;\r\n\r\n    return newFilename;\r\n\r\n  };\r\n\r\n    \r\n\r\n    const handleUploadImgs = async (file: any) => {\r\n    \r\n        const fileType = file.name.split('.').pop();\r\n        /**\r\n          * handle Background Image\r\n          */\r\n  \r\n         try {\r\n\r\n            const { data, errors } = await UploadImagesMutation({\r\n                variables: {\r\n                  file,\r\n                  filename: formatFilenameDownload(file?.name),\r\n\r\n                  filetype: `.${fileType}`,\r\n                },\r\n              });\r\n\r\n            \r\n             const { image_url, result_code } = data&&data?.UploadFiles;\r\n\r\n\r\n            if (result_code) {\r\n              message.success(`${file.name} file uploaded successfully`);\r\n            } else{\r\n              message.error(`${file.name} file upload failed.`);\r\n            }\r\n\r\n             const newfileList = {\r\n                  uid: fileList.length+1,\r\n                  name:  image_url?.replace(FILE_PATH,''),\r\n                  url: image_url\r\n             }\r\n             setFileList([...fileList, newfileList]);\r\n     \r\n         } catch (error) {\r\n             console.log('here is error:', error)\r\n         }\r\n\r\n   }\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n        \r\n        const LinksArray = fileList?.map((file) => file.url);\r\n        \r\n        const edit__Input = {\r\n            id: props.downloadInfo.id,\r\n            name: values.name,\r\n            content: values.content,\r\n            links: LinksArray,\r\n            academic: false,\r\n            admin: true\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditDownloadMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n              query: GET_DOWNLOADS_BY_TYPE,\r\n              variables: {\r\n                type: \"admin\"\r\n              },\r\n             }],\r\n           awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Download  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n\r\n    const handleRemove = () => {\r\n       const newFileList = fileList.filter((file: any) => file?.status !== \"removed\");\r\n\r\n       setFileList(newFileList);\r\n\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const dummyRequest = ({ file, onSuccess }: any) => {\r\n            setTimeout(() => {\r\n              onSuccess(\"ok\");\r\n            }, 0);\r\n          };\r\n\r\n        const propsOption = {\r\n            name: 'file',\r\n            onChange(info: any) {\r\n            \r\n              if (info.file.status !== 'uploading') {\r\n                  \r\n                \r\n                 setStartLoad(true);\r\n                \r\n              }\r\n              if(info.file.status === \"removed\") {\r\n                handleRemove();\r\n              }\r\n\r\n              if (info.file.status === 'done') {\r\n                // message.success(`${info.file.name} file uploaded successfully`);\r\n                setStartLoad(false);\r\n               \r\n              } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n              }\r\n            },\r\n\r\n            customRequest: dummyRequest,\r\n            beforeUpload: handleUploadImgs,\r\n            fileList: fileList\r\n     \r\n          };\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n              {fileList?(     <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Download'\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                  <Button key=\"back\" onClick={() => onCancel()}>\r\n                    Return\r\n                  </Button>,\r\n                  <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                    Update\r\n                  </Button>\r\n                ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     download: props.studentInfo?.download?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Content'}\r\n                    name=\"content\"\r\n                    rules={[\r\n                        { required: true, message: 'Content is empty.' },\r\n                        { min: 3, message: 'Content must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Content' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n                    <Dragger\r\n                    \r\n                     {...propsOption}\r\n\r\n            \r\n                     >\r\n                    <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                    </p>\r\n                    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                    <p className=\"ant-upload-hint\">\r\n                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n                    band files\r\n                    </p>\r\n                </Dragger>\r\n\r\n\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>): null}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditDownload= connect(mapStateToProps, {})(EditDownloadModal);\r\n\r\nexport default EditDownload;","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\UpdateEnrollStudent.tsx",["1446","1447","1448","1449"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Empty, Button } from 'antd';\r\n\r\nimport { GET_COURSES, UPDATE_ENROLL_STUDENT } from \"../../../graphql/course\";\r\nimport { GET_STUDENTS } from \"../../../graphql/student\";\r\nimport './style.less';\r\nimport SelectedPerson from './SelectedPerson';\r\n\r\n\r\n\r\nconst UpdateEnrollStudentModal = ({ visible, courseInfo,  toggleVisible }: any) => {\r\n    \r\n    const [form] = Form.useForm();\r\n    const [studentsValue, setStudentsValue] = useState(courseInfo.students?.map((student: any) => student?.id) || [])\r\n    const [showStudents, setShowStudent] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedStudentData, setSelectedStudentData ] = useState(courseInfo.students||[]);\r\n\r\n    const [UpdateEnrollStudentMutation] = useMutation(UPDATE_ENROLL_STUDENT);\r\n\r\n\r\n    const { data, loading } = useQuery(GET_STUDENTS,{\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        skip: !visible\r\n    });\r\n\r\n    const students = data&&data.getStudents;\r\n\r\n    if(loading) {\r\n       <p>Efafe</p>\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setSearchResults(students);\r\n\r\n    }, [students]);\r\n\r\n    useEffect(() => {\r\n     \r\n \r\n        setSelectedStudentData(courseInfo.students);\r\n        setStudentsValue(courseInfo.students?.map((student: any) => student?.id))\r\n\r\n     \r\n \r\n     }, [courseInfo.students]);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const results = students?.filter((student: any) => student?.name?.toLowerCase().includes(searchTerm))\r\n        setSearchResults(results);\r\n\r\n    }, [searchTerm]);\r\n\r\n\r\n\r\n\r\n\r\n    const handleSelectStudentData = (data: any) => {\r\n         setSelectedStudentData([...selectedStudentData, data]);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        \r\n        setSearchResults([]);\r\n        setStudentsValue([])\r\n        setSelectedStudentData([])\r\n        setSearchTerm(\"\");\r\n\r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSearchStudentChange = (e: any) => {\r\n        // setShowStudent(!showStudents);\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const onSelectedStudent = (value: any) => {\r\n          \r\n        \r\n          const studentId = value?.id;\r\n     \r\n         let checkValue = studentsValue.includes(studentId);\r\n         if(checkValue) {\r\n             return message.warn(\"This student already enrolled!\")\r\n         }\r\n        \r\n         const newSearch = searchResults.filter(x => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n         setSearchResults(newSearch)\r\n    \r\n         handleSelectStudentData(value);\r\n\r\n         setStudentsValue([...studentsValue, studentId])\r\n    }\r\n\r\n    const handleDeleteSelectedStudent = async (value: any) => {\r\n\r\n\r\n       const newData = selectedStudentData.filter((x: any) => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n\r\n       setSelectedStudentData(newData);\r\n       const newStudentValue = studentsValue.filter((x: any) => {\r\n           return x != value?.id;\r\n       })\r\n       setStudentsValue(newStudentValue);\r\n\r\n        const resultID = searchResults.map((r: any) => r?.id);\r\n        const checkID=  resultID.includes(value?.id);\r\n         /**\r\n          * check if id is include in searchResult\r\n          */\r\n\r\n          console.log('here is remove', checkID)\r\n       if(!checkID) {\r\n         setSearchResults([...searchResults, value])\r\n       }\r\n        \r\n     \r\n    }\r\n\r\n \r\n// console.log('here i s student Vlaue:', studentsValue)\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n           \r\n            courseId: courseInfo?.id,\r\n            students: studentsValue\r\n           \r\n        \r\n        }\r\n\r\n        const { data, errors } = await UpdateEnrollStudentMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getCourses } = cache.readQuery({ query: GET_COURSES, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newCourse = data?.updateEnrollStudent;\r\n                   cache.writeQuery({\r\n                       query: GET_COURSES,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getCourses: {\r\n                           courses: [...getCourses.courses, newCourse]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n    \r\n       \r\n        });\r\n\r\n        setSearchResults([]);\r\n        setStudentsValue([])\r\n        setSelectedStudentData([])\r\n        setSearchTerm(\"\");\r\n        \r\n        if(data && !errors) {\r\n            message.success('Updateed EnrollStudent  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n    \r\n        return (\r\n            <>\r\n              {!loading?  <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Update Enroll Student to ${courseInfo?.name} Course`}\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={onCancel}>\r\n                      Return\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleOk}>\r\n                      Update\r\n                    </Button>,\r\n                  ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    \r\n                    {studentsValue?.length > 0 && !loading ?  <SelectedPerson selectedInfo={studentsValue?.length > 0? selectedStudentData : courseInfo.students} handleDeleteSelectedData={handleDeleteSelectedStudent} /> : <Empty description={`${studentsValue?.length} Student`} />}\r\n\r\n                    <Form.Item label={'Students'}\r\n                    // name=\"student\"\r\n                  \r\n                    >\r\n                    \r\n                \r\n\r\n                 <Input\r\n                  onChange={handleSearchStudentChange}\r\n                  placeholder={'Search Student'}\r\n                  onFocus={() => setShowStudent(true)}\r\n                  value={searchTerm} />\r\n\r\n                  <ul\r\n                   className=\"student_list\"\r\n                  style={{\r\n                      display: `${!showStudents?'none':'block'}`,\r\n                      transition: '0.5s'\r\n                  }}>\r\n                      {searchResults?.map(((student: any) => (\r\n                          <li key={student.id} onClick={() => onSelectedStudent(student)}>{student?.name}</li>\r\n                      )))}\r\n                  </ul>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>:<p>Loading...</p>}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst UpdateEnrollStudent= connect(mapStateToProps, {})(UpdateEnrollStudentModal);\r\n\r\nexport default UpdateEnrollStudent;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewTranscript.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewGrade.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Views\\ViewProfile.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Education\\StaffEducation.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\Experience\\StaffExperience.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollTeacher\\UpdateEnrollTeacher.tsx",["1450","1451","1452","1453"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Empty, Button } from 'antd';\r\n\r\nimport { GET_COURSES, UPDATE_ENROLL_TEACHER } from \"../../../graphql/course\";\r\nimport { GET_TEACHERS } from \"../../../graphql/teacher\";\r\nimport '../EnrollStudent/style.less';\r\nimport SelectedPerson from '../EnrollStudent/SelectedPerson';\r\n\r\n\r\n\r\nconst UpdateEnrollTeacherModal = ({ visible, courseInfo,  toggleVisible }: any) => {\r\n    \r\n    const [form] = Form.useForm();\r\n    const [teachersValue, setTeachersValue] = useState(courseInfo.teachers?.map((teacher: any) => teacher?.id) || [])\r\n    const [showTeachers, setShowTeacher] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedTeacherData, setSelectedTeacherData ] = useState(courseInfo.teachers||[]);\r\n\r\n    const [UpdateEnrollTeacherMutation] = useMutation(UPDATE_ENROLL_TEACHER);\r\n\r\n\r\n    const { data, loading } = useQuery(GET_TEACHERS,{\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        skip: !visible\r\n    });\r\n\r\n    const teachers = data&&data.getTeachers;\r\n\r\n    if(loading) {\r\n       <p>Efafe</p>\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setSearchResults(teachers);\r\n\r\n    }, [teachers]);\r\n\r\n    useEffect(() => {\r\n     \r\n \r\n        setSelectedTeacherData(courseInfo.teachers);\r\n        setTeachersValue(courseInfo.teachers?.map((teacher: any) => teacher?.id))\r\n\r\n     \r\n \r\n     }, [courseInfo.teachers]);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const results = teachers?.filter((teacher: any) => teacher?.name?.toLowerCase().includes(searchTerm))\r\n        setSearchResults(results);\r\n\r\n    }, [searchTerm]);\r\n\r\n\r\n\r\n\r\n\r\n    const handleSelectTeacherData = (data: any) => {\r\n         setSelectedTeacherData([...selectedTeacherData, data]);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        \r\n        setSearchResults([]);\r\n        setTeachersValue([])\r\n        setSelectedTeacherData([])\r\n        setSearchTerm(\"\");\r\n\r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSearchTeacherChange = (e: any) => {\r\n        // setShowTeacher(!showTeachers);\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const onSelectedTeacher = (value: any) => {\r\n          \r\n        \r\n          const teacherId = value?.id;\r\n          console.log('here is teacherId:', teacherId)\r\n         let checkValue = teachersValue?.includes(teacherId);\r\n         if(checkValue) {\r\n             return message.warn(\"This teacher already enrolled!\")\r\n         }\r\n        \r\n         const newSearch = searchResults.filter(x => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n         setSearchResults(newSearch)\r\n    \r\n         handleSelectTeacherData(value);\r\n\r\n         setTeachersValue([...teachersValue, teacherId])\r\n    }\r\n\r\n    const handleDeleteSelectedTeacher = async (value: any) => {\r\n\r\n\r\n       const newData = selectedTeacherData.filter((x: any) => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n\r\n       setSelectedTeacherData(newData);\r\n       const newTeacherValue = teachersValue.filter((x: any) => {\r\n           return x != value?.id;\r\n       })\r\n       setTeachersValue(newTeacherValue);\r\n\r\n        const resultID = searchResults.map((r: any) => r?.id);\r\n        const checkID=  resultID.includes(value?.id);\r\n         /**\r\n          * check if id is include in searchResult\r\n          */\r\n\r\n          console.log('here is remove', checkID)\r\n       if(!checkID) {\r\n         setSearchResults([...searchResults, value])\r\n       }\r\n        \r\n     \r\n    }\r\n\r\n \r\n// console.log('here i s teacher Vlaue:', teachersValue)\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n           \r\n            courseId: courseInfo?.id,\r\n            teachers: teachersValue\r\n           \r\n        \r\n        }\r\n    \r\n        const { data, errors } = await UpdateEnrollTeacherMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getCourses } = cache.readQuery({ query: GET_COURSES, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newCourse = data?.updateEnrollTeacher;\r\n                   cache.writeQuery({\r\n                       query: GET_COURSES,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getCourses: {\r\n                           courses: [...getCourses.courses, newCourse]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n    \r\n       \r\n        });\r\n\r\n        console.log('here is data res:', data)\r\n        setSearchResults([]);\r\n        setTeachersValue([])\r\n        setSelectedTeacherData([])\r\n        setSearchTerm(\"\");\r\n        \r\n        if(data && !errors) {\r\n            message.success('Updateed EnrollTeacher  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n    \r\n        return (\r\n            <>\r\n              {!loading?  <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Update Enroll Teacher to ${courseInfo?.name} Course`}\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={onCancel}>\r\n                      Return\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={handleOk}>\r\n                      Update\r\n                    </Button>,\r\n                  ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.teacherInfo?.programme?.id,\r\n                //     gender: props.teacherInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    \r\n                    {teachersValue?.length > 0 && !loading ?  <SelectedPerson selectedInfo={teachersValue?.length > 0? selectedTeacherData : courseInfo.teachers} handleDeleteSelectedData={handleDeleteSelectedTeacher} /> : <Empty description={`${teachersValue?.length} Teacher`} />}\r\n\r\n                    <Form.Item label={'Teachers'}\r\n                    // name=\"teacher\"\r\n                  \r\n                    >\r\n                    \r\n                \r\n\r\n                 <Input\r\n                  onChange={handleSearchTeacherChange}\r\n                  placeholder={'Search Teacher'}\r\n                  onFocus={() => setShowTeacher(true)}\r\n                  value={searchTerm} />\r\n\r\n                  <ul\r\n                   className=\"teacher_list\"\r\n                  style={{\r\n                      display: `${!showTeachers?'none':'block'}`,\r\n                      transition: '0.5s'\r\n                  }}>\r\n                      {searchResults?.map(((teacher: any) => (\r\n                          <li key={teacher.id} onClick={() => onSelectedTeacher(teacher)}>{teacher?.name}</li>\r\n                      )))}\r\n                  </ul>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>:<p>Loading...</p>}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst UpdateEnrollTeacher= connect(mapStateToProps, {})(UpdateEnrollTeacherModal);\r\n\r\nexport default UpdateEnrollTeacher;","D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\upload.ts",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\ProfilePage.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\SelectedPerson.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\studentPage\\TranscriptPage.tsx",["1454"],"import { useQuery } from '@apollo/client';\r\nimport moment  from \"moment\";\r\nimport React, { Fragment } from 'react';\r\nimport { Card, Empty, Space, Table, Tag } from 'antd';\r\n\r\nimport { GET_STUDENT_GRADE_BY_ID } from '../../graphql/grade';\r\nimport { CreditSum, Final_Mark_Fixed1, WeightedMarkSum } from '../../utils/sum';\r\nimport StudentClassification from '../../components/Students/StudentClassification';\r\nimport Loading from '../../components/Loading';\r\n\r\nconst TranscriptPage = ({ studentId, studentInfo }: any) => {\r\n    \r\n    const { data, loading, error } = useQuery(GET_STUDENT_GRADE_BY_ID, {\r\n        variables: {\r\n            studentId: studentId,\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        skip: !studentId\r\n\r\n    });\r\n\r\n  \r\n\r\n    const transcript = data&&data.getGradeByStudentID;\r\n\r\n  \r\n     if(loading || error) {\r\n         return <Loading />\r\n     }\r\n     \r\n    console.log('here is studentINfo', studentInfo)\r\n     const TotalCredit = CreditSum(transcript||[]);\r\n     const TotalWeightedMark = WeightedMarkSum(transcript||[])\r\n     \r\n\r\n    const finalMark = Final_Mark_Fixed1(TotalCredit, TotalWeightedMark);\r\n   \r\n\r\n\r\n     const columns = [\r\n        {\r\n          title: 'Academic Year',\r\n          dataIndex: 'academicYear',\r\n          key: 'academicYear',\r\n          render: (academicYear: any) => (\r\n            <span>\r\n             \r\n                  <Tag color={'geekblue'} key={'academicYear'}>\r\n                     {academicYear?.academicYearName}\r\n                  </Tag>\r\n    \r\n            </span>\r\n          ),\r\n        },\r\n        {\r\n          title: 'Semester',\r\n          dataIndex: 'semester',\r\n          key: 'semester',\r\n          render: (semester: any) => (\r\n            <span>\r\n             \r\n                  <Tag color={'geekblue'} key={'semester'}>\r\n                     {semester?.semesterName}\r\n                  </Tag>\r\n    \r\n            </span>\r\n          ),\r\n        },\r\n\r\n        {\r\n          title: 'Course',\r\n          dataIndex: 'course',\r\n          key: 'course',\r\n          render: (subject: any) => (\r\n            <span>\r\n             \r\n                  <Tag color={'geekblue'} key={'subject'}>\r\n                     {subject?.name}\r\n                  </Tag>\r\n    \r\n            </span>\r\n          ),\r\n        },\r\n        {\r\n          title: 'Mark',\r\n          dataIndex: 'mark',\r\n          key: 'mark',\r\n          align: \"center\" as \"center\"\r\n        },\r\n        {\r\n            title: 'Credit',\r\n            dataIndex: 'credit',\r\n            key: 'credit',\r\n            align: \"center\" as \"center\"\r\n        },\r\n        {\r\n          title: 'Weighted Mark',\r\n          dataIndex: 'weightedMark',\r\n          key: 'weightedMark',\r\n          align: \"center\" as \"center\"\r\n        }\r\n    \r\n      ];\r\n\r\n    return (\r\n        <div style={{\r\n          margin: '1rem 0rem'\r\n        }}>\r\n\r\n            <p> <b>Name:</b> {studentInfo?.fullName} </p>\r\n            <p> <b>ID:</b>{studentInfo?.studentId}</p>\r\n            <p> <b>Programme:</b> {studentInfo?.programme?.name} </p>\r\n            <p> <b>Academic Year:</b> {studentInfo?.studentAcademicYear} </p>\r\n              { transcript?.length > 0 ? <Fragment>\r\n\r\n        <Table columns={columns}\r\n\r\n       dataSource={transcript} \r\n       bordered\r\n       rowKey='id'\r\n       pagination={false}\r\n      \r\n      />\r\n\r\n        <Space>\r\n           <Card bordered={false}>\r\n                    Total Credit: <Tag color=\"geekblue\">\r\n                      {TotalCredit}\r\n                </Tag>\r\n           </Card>\r\n\r\n           <Card bordered={false}>\r\n           Final Mark of Degree Programme: <Tag color=\"geekblue\">\r\n                      {finalMark}\r\n                </Tag>\r\n           </Card>\r\n        </Space>\r\n  \r\n\r\n       </Fragment>: <Empty />}\r\n\r\n       <StudentClassification studentInfo={studentInfo} studentGrade={finalMark}  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TranscriptPage;\r\n","D:\\labc-web\\labc-web-admin\\src\\graphql\\semester.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\programmeTypes.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Avatar.tsx",["1455","1456","1457","1458","1459","1460","1461","1462"],"import React, { useEffect, useState } from 'react';\r\nimport { Upload, message } from 'antd';\r\nimport moment from 'moment';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Input } from 'antd';\r\n\r\nimport { UploadImageMutation } from \"../../graphql/upload\";\r\nimport { start } from 'nprogress';\r\nimport Loading from '../Loading';\r\n\r\n// function getBase64(img: any, callback: any) {\r\n//   const reader = new FileReader();\r\n//   reader.addEventListener('load', () => callback(reader.result));\r\n//   reader.readAsDataURL(img);\r\n// }\r\n\r\n\r\n\r\nconst  Avatar = ({ handleSetImage, edit=false, image_src=false, create_img=false, resetFile, resetUpdateFile }: any) => {\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [showImageInput, setShowImageInput] = useState(false);\r\n \r\n  const [imageUrl, setImageUrl] = useState(image_src || '');\r\n  const [startUpload, setStartUpload] = useState(false);\r\n  const [myUrl, setMyUrl] = useState(\"\")\r\n  const [uploadPostImgMutation] = useMutation(UploadImageMutation);\r\n  var Avatar_From_Com = imageUrl?image_src:null;\r\n  const beforeUpload = (file: any) => {\r\n      Avatar_From_Com = null;\r\n      setStartUpload(true);\r\n      handleAvatarUploadImg(file);\r\n\r\n      const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n      if (!isJpgOrPng) {\r\n        message.error('You can only upload JPG/PNG file!');\r\n      }\r\n      const isLt2M = file.size / 1024 / 1024 < 2;\r\n      if (!isLt2M) {\r\n        message.error('Image must smaller than 2MB!');\r\n      }\r\n      return isJpgOrPng && isLt2M;\r\n    }\r\n\r\n\r\n    /**\r\n   * formatFile name for post image\r\n   * @param {*} e\r\n   */\r\n\r\n \r\n  const formatFilenamePost = (filename: any) => {\r\n      // console.log('here is post', filename);\r\n      const date = moment().format(\"YYYYMMDD\");\r\n      const randomString = Math.random().toString(36).substring(2, 7);\r\n      const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n      const newFilename = `ssbu_student/${cleanFileName}-${randomString}-${date}`;\r\n      return newFilename.substring(0, 60);\r\n\r\n    };\r\n\r\n    const handleAvatarUploadImg = async (file: any) => {\r\n      /**\r\n        * handle Background Image\r\n        */\r\n\r\n \r\n        if(/^image\\//.test(file.type)) {\r\n          \r\n       setLoading(true);\r\n      \r\n    \r\n       const { data, errors } = await uploadPostImgMutation({\r\n         variables: {\r\n           file,\r\n           filename: formatFilenamePost(file.name),\r\n         },\r\n       });\r\n\r\n \r\n        let url = data && data.UploadImageReq.image_url;\r\n\r\n        setImageUrl(url);\r\n        handleSetImage(url)\r\n        setMyUrl(url);\r\n        Avatar_From_Com = url;\r\n        setLoading(false);\r\n        message.success(\"Upload Successfully!\")\r\n      //   localStorage.setItem(\"s_avatar_url\", JSON.stringify(url));\r\n\r\n        }\r\n }\r\n\r\n\r\n  const handleChange = (info: any) => {\r\n \r\n   \r\n    if (info.file.status === 'uploading') {\r\n      //  setImageUrl('')\r\n    \r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      // Get this url from response in real world.\r\n    \r\n      // getBase64(info.file.originFileObj, imageUrl);\r\n      setLoading(false)\r\n    }\r\n  };\r\n\r\n  const handleUploadImageURL = () => {\r\n    // console.log('here is url: img', imageUrl)\r\n    handleSetImage(imageUrl)\r\n    setShowImageInput(false)\r\n    resetFile = !resetFile;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStartUpload(!startUpload);\r\n \r\n }, [edit&&imageUrl])\r\n\r\n  useEffect(() => {\r\n     setImageUrl(image_src);\r\n  }, [startUpload])\r\n\r\n  const uploadButton = (\r\n      <div>\r\n        {/* <Icon type={loading ? 'loading' : 'plus'} /> */}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n\r\n    const dummyRequest = ({ file, onSuccess }: any) => {\r\n      setTimeout(() => {\r\n        onSuccess(\"ok\");\r\n      }, 0);\r\n    };\r\n   \r\nconsole.log('hre is edit:', edit, myUrl)\r\n    return (\r\n      <>\r\n        {loading&&  <Loading /> }\r\n         <Upload\r\n          name=\"avatar\"\r\n          listType=\"picture-card\"\r\n          className=\"avatar-uploader\"\r\n          showUploadList={false}\r\n          // action={'https://www.mocky.io/v2/5cc8019d300000980a055e76'}\r\n          customRequest={dummyRequest}\r\n          beforeUpload={beforeUpload}\r\n          onChange={handleChange}\r\n          \r\n        >\r\n        \r\n          {/* {imageUrl ? <img src={!startUpload&&Avatar_From_Com||imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton} */}\r\n       \r\n           {edit && myUrl ?  <img src={myUrl} alt=\"avatar\" style={{ width: '100%' }} /> :\r\n           !resetFile&&imageUrl?(\r\n             create_img || image_src || imageUrl ?\r\n              <img src={(!startUpload || image_src &&Avatar_From_Com||imageUrl).toString()} alt=\"avatar\" style={{ width: '100%' }} /> : \r\n              \r\n              uploadButton\r\n          ):uploadButton}\r\n\r\n        </Upload>\r\n\r\n         <a>\r\n            <span onClick={e => setShowImageInput(true)}>Click Import Image with URL:</span>\r\n         </a>\r\n         {showImageInput&&(\r\n           <Modal\r\n           onCancel={() => setShowImageInput(false)}\r\n           visible={showImageInput}\r\n           title=\"Upload Image with URL\"\r\n           centered\r\n           onOk={e => handleUploadImageURL()}\r\n           >\r\n               <Input value={(imageUrl).toString()} onChange={e => setImageUrl(e.target.value)} />\r\n           </Modal>\r\n         )}\r\n    \r\n        \r\n   \r\n\r\n\r\n\r\n      </>\r\n    );\r\n  \r\n}\r\n\r\nexport default Avatar;","D:\\labc-web\\labc-web-admin\\src\\constants\\NottificationType.ts",[],"D:\\labc-web\\labc-web-admin\\src\\hooks\\useNotitications.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\CreateProfile.tsx",["1463"],"import React, {  useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal,   Form, Input, message, DatePicker } from 'antd';\r\n\r\n\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { CREATE_TEACHER_PROFILE, GET_TEACHER_PROFILE } from \"../../graphql/teacher\";\r\n\r\n\r\n\r\n\r\n\r\nconst CreateTeacherProfileModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    // const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n\r\n    const [CreateTeacherProfileMutation] = useMutation(CREATE_TEACHER_PROFILE)\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const create_Profile_Input = {\r\n        \r\n        \r\n\r\n            teacherId: props.teacherInfo?.id, \r\n            dateOfBirth: values?.dateofbirth,\r\n            placeOfBirth: values.placeofbirth,\r\n            nationality: values.nationality,\r\n            languages: values.languages,\r\n            ielts: values.ielts,\r\n            passportNoOrNRCNo: values.passportNoOrNRCNo\r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await CreateTeacherProfileMutation({\r\n            variables: {\r\n                input: create_Profile_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_TEACHER_PROFILE,\r\n                variables: {\r\n                    teacherId: props.teacherInfo?.id,\r\n                },\r\n            \r\n            }],\r\n            awaitRefetchQueries: true\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Added ${props.teacherInfo?.fullName}'s Profile Successfully!`)\r\n\r\n            // setSuccess(false);\r\n            // setError(false);\r\n \r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Create ${props.teacherInfo?.fullName}'s Profile`}\r\n                centered\r\n                onOk={handleOk}\r\n                getContainer={false}\r\n                width={'750px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n\r\n                    <Form.Item label={'Date of Birth'}\r\n                    name=\"dateofbirth\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Place Of Birth'}\r\n                    name=\"placeofbirth\"\r\n                    rules={[\r\n                        { required: true, message: 'place of birth is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Place Of Birth' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Nationality'}\r\n                    name=\"nationality\"\r\n                    rules={[\r\n                        { required: true, message: 'nationality is empty.' },\r\n                        { min: 3, message: 'nationality must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Nationality' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Languages'}\r\n                    name=\"languages\"\r\n                    rules={[\r\n                        { required: true, message: 'language is empty.' },\r\n                        { min: 3, message: 'language must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='Language' />\r\n                    \r\n                    </Form.Item>\r\n                    \r\n                    <Form.Item label={'IELTS'}\r\n                    name=\"ielts\"\r\n                    rules={[\r\n                        { required: true, message: 'IELTS is empty.' },\r\n                        { min: 3, message: 'IELTS must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='IELTS' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'PASSPORT NO / NRC NO'}\r\n                    name=\"passportNoOrNRCNo\"\r\n                    rules={[\r\n                        { required: true, message: 'PASSPORT NO / NRC NO is empty.' },\r\n                        { min: 3, message: 'PASSPORT NO / NRC NO must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder='PASSPORT NO / NRC NO' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n               \r\n                  \r\n\r\n                      \r\n\r\n                      {/* @ Location or Address */}\r\n\r\n                      {/* <Form.Item label={'Address'} \r\n                            name=\"location\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                                <Input\r\n                                    maxLength={200}\r\n                                \r\n                                    placeholder='Address' />\r\n                        \r\n                        </Form.Item> */}\r\n\r\n\r\n                \r\n                    \r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst createProfile= connect(mapStateToProps, {  })(CreateTeacherProfileModal);\r\n\r\nexport default createProfile;","D:\\labc-web\\labc-web-admin\\src\\components\\Teachers\\EditProfile.tsx",["1464","1465"],"import React, { useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, DatePicker, Button} from 'antd';\r\n\r\n// import Avatar from './Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_TEACHER_PROFILE, GET_TEACHER_PROFILE } from \"../../graphql/teacher\";\r\n\r\n\r\n\r\n\r\nconst EditTeacherProfileModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    // const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n\r\n    const [EditTeacherProfileMutation] = useMutation(UPDATE_TEACHER_PROFILE,{\r\n        refetchQueries: [{\r\n    \r\n            query: GET_TEACHER_PROFILE,\r\n            variables: {\r\n                teacherId: props.teacherInfo?.id,\r\n            },\r\n    }],\r\n    awaitRefetchQueries: true\r\n      });\r\n\r\n    \r\n\r\n      useEffect(() => {\r\n        form.setFieldsValue({\r\n \r\n            dateOfBirth: moment(props.profileInfo?.dateOfBirth),\r\n            placeOfBirth: props.profileInfo?.placeOfBirth,\r\n            nationality: props.profileInfo?.nationality,\r\n            languages: props.profileInfo?.languages,\r\n            ielts: props.profileInfo?.ielts,\r\n            passportNoOrNRCNo: props.profileInfo?.passportNoOrNRCNo,\r\n\r\n        })\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const update_Profile_Input = {\r\n        \r\n        \r\n            id: props.profileInfo?.id,\r\n            teacherId: props.teacherInfo?.id, \r\n            dateOfBirth: values.dateOfBirth,\r\n            placeOfBirth: values.placeOfBirth,\r\n            nationality: values.nationality,\r\n            languages: values.languages,\r\n            ielts: values.ielts,\r\n            passportNoOrNRCNo: values.passportNoOrNRCNo\r\n        }\r\n\r\n\r\n    \r\n        const { data, errors } = await EditTeacherProfileMutation({\r\n            variables: {\r\n                input: update_Profile_Input\r\n            }\r\n        });\r\n        if(data && !errors) {\r\n            message.success(`Update ${props.teacherInfo?.fullName}'s Profile Successfully!`)\r\n        \r\n            // setSuccess(false);\r\n            // setError(false);\r\n \r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Edit ${props.teacherInfo?.fullName}'s Profile`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key={'return'} onClick={onCancel}>\r\n                        Return\r\n                    </Button>,\r\n                        <Button key={'update'} type={'primary'} onClick={handleOk}>\r\n                        Update\r\n                    </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n\r\n\r\n                    <Form.Item label={'Date of Birth'}\r\n                    name=\"dateOfBirth\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Place Of Birth'}\r\n                    name=\"placeOfBirth\"\r\n                    rules={[\r\n                        { required: true, message: 'place of birth is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Place Of Birth' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Nationality'}\r\n                    name=\"nationality\"\r\n                    rules={[\r\n                        { required: true, message: 'nationality is empty.' },\r\n                        { min: 3, message: 'nationality must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Nationality' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Languages'}\r\n                    name=\"languages\"\r\n                    rules={[\r\n                        { required: true, message: 'language is empty.' },\r\n                        { min: 3, message: 'language must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='Language' />\r\n                    \r\n                    </Form.Item>\r\n                    \r\n                    <Form.Item label={'IELTS'}\r\n                    name=\"ielts\"\r\n                    rules={[\r\n                        { required: true, message: 'IELTS is empty.' },\r\n                        { min: 3, message: 'IELTS must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='IELTS' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'PASSPORT NO / NRC NO'}\r\n                    name=\"passportNoOrNRCNo\"\r\n                    rules={[\r\n                        { required: true, message: 'PASSPORT NO / NRC NO is empty.' },\r\n                        { min: 3, message: 'PASSPORT NO / NRC NO must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder='PASSPORT NO / NRC NO' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditProfile= connect(mapStateToProps, {  })(EditTeacherProfileModal);\r\n\r\nexport default EditProfile;","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaffEducation.tsx",["1466"],"import React, {  useEffect, useState } from 'react';\r\n// import { connect } from 'react-redux';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal,   Form, Input, message, DatePicker, Button, Checkbox } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ADD_STAFF_EDUCATION, GET_STAFF_PROFILE } from \"../../graphql/staff\";\r\n\r\n\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\n\r\nconst CreateStaffEducationModal = ({ toggleVisible, staffInfo, visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { t } = useTranslation();\r\n    \r\n    const [formData, setFormData] = useState({\r\n        current: false,\r\n      });\r\n\r\n   \r\n      \r\n    // const handleOnChange = (e: any) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n\r\n    const [CreateStaffEducationMutation] = useMutation(ADD_STAFF_EDUCATION)\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const create_StaffEdu_Input = {\r\n        \r\n        \r\n\r\n            staffId: staffInfo?.id, \r\n            school: values.school,\r\n            degree: values.degree,\r\n            fieldofstudy: values.fieldofstudy,\r\n            from: values.from,\r\n            to: values.to,\r\n            current,\r\n            description: values.description,\r\n        }\r\n   \r\n       \r\n        const { data, errors } = await CreateStaffEducationMutation({\r\n            variables: {\r\n                input: create_StaffEdu_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STAFF_PROFILE,\r\n                variables: {\r\n                    staffId: staffInfo?.id,\r\n                },\r\n            \r\n            }],\r\n            awaitRefetchQueries: true\r\n        });\r\n\r\n        if(data && !errors) {\r\n            message.success(`Added ${staffInfo?.fullName}'s Education Successfully!`)\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n\r\n    \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        const {\r\n         \r\n            current\r\n          } = formData;\r\n\r\n          \r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"staffs.education.add_education\")}\r\n                centered\r\n                onOk={handleOk}\r\n                getContainer={false}\r\n                width={'750px'}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                        {t(\"return\")}\r\n                    </Button>,\r\n                    <Button key=\"submit\" type={'primary'} onClick={() => handleOk()}>\r\n                      {t(\"submit\")}\r\n                    </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                   <Form.Item label={t(\"staffs.education.school\")}\r\n                    name=\"school\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.education.school_req\") },\r\n                        { min: 3, message: t(\"staffs.education.school_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.education.school\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.education.degree\")}\r\n                    name=\"degree\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.education.degree_req\") },\r\n                        { min: 3, message: t(\"staffs.education.degree_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.education.degree\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.education.fieldOfStudy\")}\r\n                    name=\"fieldofstudy\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.education.fieldOfStudy_req\") },\r\n                        { min: 3, message: t(\"staffs.education.fieldOfStudy_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.education.fieldOfStudy\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.education.from\")}\r\n                    name=\"from\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n              \r\n\r\n                    <Form.Item label={t(\"staffs.education.current\")}\r\n                    name=\"current\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                    <Checkbox checked={current}   onChange={() => setFormData({ ...formData, current: !current })} />\r\n                     \r\n                 \r\n\r\n                    </Form.Item>\r\n                    \r\n\r\n                    <Form.Item label={t(\"staffs.education.to\")}\r\n                    name=\"to\"\r\n                    \r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker disabled={current} format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                   \r\n\r\n                    <Form.Item label={t(\"staffs.education.description\")}\r\n                    name=\"description\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.education.description_req\") },\r\n                        { min: 3, message: t(\"staffs.education.description_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <TextArea\r\n                                maxLength={500}\r\n                                placeholder={t(\"staffs.education.description\")} />\r\n                    \r\n                    </Form.Item>\r\n                \r\n                    \r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n// const mapStateToProps = (state: any) => ({\r\n\r\n//     authUser: state.auth.user\r\n// });\r\n\r\n// const createProfile= connect(mapStateToProps, {  })(CreateStaffEducationModal);\r\n\r\nexport default CreateStaffEducationModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateProfile.tsx",["1467"],"import React, {  useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Modal,   Form, Input, message, DatePicker, Button } from 'antd';\r\n\r\nimport { CREATE_STAFF_PROFILE, GET_STAFF_PROFILE } from \"../../graphql/staff\";\r\n\r\n\r\n\r\nconst CreateStaffProfileModal = ({ toggleVisible, staffInfo, visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n    const [CreateStaffProfileMutation] = useMutation(CREATE_STAFF_PROFILE)\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const create_Profile_Input = {\r\n        \r\n        \r\n\r\n            staffId: staffInfo?.id, \r\n            dateOfBirth: values?.dateOfBirth,\r\n            placeOfBirth: values.placeOfBirth,\r\n            nationality: values.nationality,\r\n            languages: values.languages,\r\n            passportNoOrNRCNo: values.passportNoOrNRCNo,\r\n            parentName: values.parentName,\r\n            phoneNo: values.phoneNo,\r\n            currentPosition: values.currentPosition,\r\n            hobby: values.hobby\r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await CreateStaffProfileMutation({\r\n            variables: {\r\n                input: create_Profile_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STAFF_PROFILE,\r\n                variables: {\r\n                    staffId: staffInfo?.id,\r\n                },\r\n            \r\n            }],\r\n            awaitRefetchQueries: true\r\n        });\r\n\r\n   \r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(t(\"added_successfully\"))\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n\r\n    \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        // parentName,\r\n        // phoneNo,\r\n        // currentPosition,\r\n        // hobby\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"staffs.profile.add_profile\")}\r\n                centered\r\n                onOk={handleOk}\r\n                getContainer={false}\r\n                width={'750px'}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                     {t(\"return\")}\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                      {t(\"submit\")}\r\n                    </Button>\r\n                  ]}\r\n\r\n                  \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n\r\n\r\n                   <Form.Item label={t(\"staffs.profile.dateOfBirth\")}\r\n                    name=\"dateOfBirth\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.placeOfBirth\")}\r\n                    name=\"placeOfBirth\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.placeOfBirth_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.placeOfBirth_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.profile.placeOfBirth\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.nationality\")}\r\n                    name=\"nationality\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.nationality_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.nationality_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.profile.nationality\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.language\")}\r\n                    name=\"languages\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.language_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.language_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder={t(\"staffs.profile.language\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.passportNo\")}\r\n                    name=\"passportNoOrNRCNo\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.passportNo_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.passportNo_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.passportNo\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.parentName\")}\r\n                    name=\"parentName\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.parentName_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.parentName_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.parentName\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.phoneNo\")}\r\n                    name=\"phoneNo\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.phoneNo_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.phoneNo_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.phoneNo\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.currentPosition\")}\r\n                    name=\"currentPosition\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.currentPosition_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.currentPosition_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.currentPosition\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.hobby\")}\r\n                    name=\"hobby\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.hobby_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.hobby_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.hobby\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n\r\n                \r\n                    \r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst createProfile= connect(mapStateToProps, {  })(CreateStaffProfileModal);\r\n\r\nexport default createProfile;","D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\CreateStaffExperience.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Staffs\\EditProfile.tsx",["1468","1469"],"import React, { useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, DatePicker, Button} from 'antd';\r\n\r\n// import Avatar from './Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_STAFF_PROFILE, GET_STAFF_PROFILE } from \"../../graphql/staff\";\r\n\r\n\r\n\r\n\r\n\r\nconst EditStaffProfileModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    // const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n\r\n    const [EditStaffProfileMutation] = useMutation(UPDATE_STAFF_PROFILE);\r\n\r\n    \r\n\r\n      useEffect(() => {\r\n        form.setFieldsValue({\r\n \r\n            dateOfBirth: moment(props.profileInfo?.dateOfBirth),\r\n            placeOfBirth: props.profileInfo?.placeOfBirth,\r\n            nationality: props.profileInfo?.nationality,\r\n            languages: props.profileInfo?.languages,\r\n            ielts: props.profileInfo?.ielts,\r\n            passportNoOrNRCNo: props.profileInfo?.passportNoOrNRCNo,\r\n            parentName: props.profileInfo?.parentName,\r\n            phoneNo: props.profileInfo?.phoneNo,\r\n            currentPosition: props.profileInfo?.currentPosition,\r\n            hobby: props.profileInfo?.hobby\r\n\r\n        })\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const update_Profile_Input = {\r\n        \r\n        \r\n            id: props.profileInfo?.id,\r\n            staffId: props.staffInfo?.id, \r\n            dateOfBirth: values.dateOfBirth,\r\n            placeOfBirth: values.placeOfBirth,\r\n            nationality: values.nationality,\r\n            languages: values.languages,\r\n            ielts: values.ielts,\r\n            passportNoOrNRCNo: values.passportNoOrNRCNo,\r\n            parentName: values.parentName,\r\n            phoneNo: values.phoneNo,\r\n            currentPosition: values.currentPosition,\r\n            hobby: values.hobby\r\n        }\r\n\r\n\r\n    \r\n        const { data, errors } = await EditStaffProfileMutation({\r\n            variables: {\r\n                input: update_Profile_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                    query: GET_STAFF_PROFILE,\r\n                    variables: {\r\n                        staffId: props.staffInfo?.id,\r\n                    },\r\n            }],\r\n            awaitRefetchQueries: true\r\n        });\r\n        if(data && !errors) {\r\n            message.success(`Update ${props.staffInfo?.fullName}'s Profile Successfully!`)\r\n        \r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={t(\"staffs.profile.edit_profile\")}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'805px'}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                      {t(\"return\")}\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                     {t(\"submit\")}\r\n                    </Button>\r\n                  ]}\r\n\r\n                  \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n\r\n\r\n                    <Form.Item label={t(\"staffs.profile.dateOfBirth\")}\r\n                    name=\"dateOfBirth\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.placeOfBirth\")}\r\n                    name=\"placeOfBirth\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.placeOfBirth_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.placeOfBirth_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.profile.placeOfBirth\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.nationality\")}\r\n                    name=\"nationality\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.nationality_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.nationality_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder={t(\"staffs.profile.nationality\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.language\")}\r\n                    name=\"languages\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.language_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.language_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder={t(\"staffs.profile.language\")} />\r\n                    \r\n                    </Form.Item>\r\n                    \r\n                   \r\n\r\n                    <Form.Item label={t(\"staffs.profile.passportNo\")}\r\n                    name=\"passportNoOrNRCNo\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.passportNo_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.passportNo_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.passportNo\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.parentName\")}\r\n                    name=\"parentName\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.parentName_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.parentName_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.parentName\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.phoneNo\")}\r\n                    name=\"phoneNo\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.phoneNo_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.phoneNo_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.phoneNo\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.currentPosition\")}\r\n                    name=\"currentPosition\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.currentPosition_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.currentPosition_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.currentPosition\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={t(\"staffs.profile.hobby\")}\r\n                    name=\"hobby\"\r\n                    rules={[\r\n                        { required: true, message: t(\"staffs.profile.hobby_req\") },\r\n                        { min: 3, message: t(\"staffs.profile.hobby_min_msg\") }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder={t(\"staffs.profile.hobby\")} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditProfile= connect(mapStateToProps, {  })(EditStaffProfileModal);\r\n\r\nexport default EditProfile;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudentEducation.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateStudentAddress.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Grade.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\CreateProfile.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\EditProfile.tsx",["1470"],"import React, { useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, DatePicker} from 'antd';\r\n\r\n// import Avatar from './Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_STUDENT_PROFILE, GET_STUDENT_PROFILE } from \"../../graphql/student\";\r\n\r\n\r\n\r\n\r\nconst EditStudentProfileModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          order_id: (props.totalLength || 0) + 1,\r\n       })\r\n    }, [props]);\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n    // const [error, setError] = useState(false);\r\n    // const [filename, setFileName] = useState('');\r\n    // const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n\r\n    const [EditStudentProfileMutation] = useMutation(UPDATE_STUDENT_PROFILE,{\r\n        refetchQueries: [{\r\n    \r\n            query: GET_STUDENT_PROFILE,\r\n            variables: {\r\n                studentId: props.studentInfo?.id,\r\n            },\r\n    }],\r\n    awaitRefetchQueries: true\r\n      });\r\n\r\n    \r\n\r\n      useEffect(() => {\r\n        form.setFieldsValue({\r\n \r\n            dateOfBirth: moment(props.profileInfo?.dateOfBirth),\r\n            placeOfBirth: props.profileInfo?.placeOfBirth,\r\n            nationality: props.profileInfo?.nationality,\r\n            languages: props.profileInfo?.languages,\r\n            ielts: props.profileInfo?.ielts,\r\n            passportNoOrNRCNo: props.profileInfo?.passportNoOrNRCNo,\r\n\r\n        });\r\n        /* eslint-disable react-hooks/exhaustive-deps */\r\n    \r\n    }, [props]);\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n\r\n\r\n        const update_Profile_Input = {\r\n        \r\n        \r\n            id: props.profileInfo?.id,\r\n            studentId: props.studentInfo?.id, \r\n            dateOfBirth: values.dateOfBirth,\r\n            placeOfBirth: values.placeOfBirth,\r\n            nationality: values.nationality,\r\n            languages: values.languages,\r\n            ielts: values.ielts,\r\n            passportNoOrNRCNo: values.passportNoOrNRCNo\r\n        }\r\n\r\n\r\n    \r\n        const { data, errors } = await EditStudentProfileMutation({\r\n            variables: {\r\n                input: update_Profile_Input\r\n            }\r\n        });\r\n        if(data && !errors) {\r\n            message.success(`Update ${props.studentInfo?.fullName}'s Profile Successfully!`)\r\n        \r\n            // setSuccess(false);\r\n            // setError(false);\r\n \r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n    const dateFormat = 'DD/MM/YYYY';\r\n      \r\n  \r\n    //  const onBlurSelect = () => {\r\n    //     console.log('blur');\r\n    //   }\r\n      \r\n    //  const onFocusSelect = () => {\r\n    //     console.log('focus');\r\n    //   }\r\n      \r\n    //  const onSearchSelect = (val: any) => {\r\n    //     console.log('search:', val);\r\n    //   }\r\n\r\n    //   const onChangeSelect = (url: any) => {\r\n\r\n    // }\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Edit ${props.studentInfo?.fullName}'s Profile`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n\r\n\r\n                    <Form.Item label={'Date of Birth'}\r\n                    name=\"dateOfBirth\"\r\n                  \r\n                    >\r\n                    \r\n\r\n                        <DatePicker format={dateFormat} />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Place Of Birth'}\r\n                    name=\"placeOfBirth\"\r\n                    rules={[\r\n                        { required: true, message: 'place of birth is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Place Of Birth' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Nationality'}\r\n                    name=\"nationality\"\r\n                    rules={[\r\n                        { required: true, message: 'nationality is empty.' },\r\n                        { min: 3, message: 'nationality must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Nationality' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Languages'}\r\n                    name=\"languages\"\r\n                    rules={[\r\n                        { required: true, message: 'language is empty.' },\r\n                        { min: 3, message: 'language must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='Language' />\r\n                    \r\n                    </Form.Item>\r\n                    \r\n                    <Form.Item label={'IELTS'}\r\n                    name=\"ielts\"\r\n                    rules={[\r\n                        { required: true, message: 'IELTS is empty.' },\r\n                        { min: 3, message: 'IELTS must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={50}\r\n                                placeholder='IELTS' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'PASSPORT NO / NRC NO'}\r\n                    name=\"passportNoOrNRCNo\"\r\n                    rules={[\r\n                        { required: true, message: 'PASSPORT NO / NRC NO is empty.' },\r\n                        { min: 3, message: 'PASSPORT NO / NRC NO must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={30}\r\n                                placeholder='PASSPORT NO / NRC NO' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                     \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditProfile= connect(mapStateToProps, {  })(EditStudentProfileModal);\r\n\r\nexport default EditProfile;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentSemester\\UpdateStudentSemester.tsx",["1471","1472"],"import React, { useEffect, useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { UPDATE_STUDENT_SEMESTER, GET_STUDENT_SEMESTER } from '../../../graphql/semester';\r\n\r\nconst UpdateStudentSemesterModal = ({ \r\n     studentInfo,\r\n     toggleVisible, \r\n     visible,\r\n     semesterInfo,\r\n     academicYearId\r\n     \r\n     }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n        \r\n            semesterName: semesterInfo?.semesterName,\r\n        })\r\n     }, [visible]);\r\n\r\n    const [UpdateStudentUpdateStudentSemesterModalMutation] = useMutation(UPDATE_STUDENT_SEMESTER);\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n        if(!academicYearId) {\r\n            message.warn(\"Academic ID Not Found!\");\r\n            return false;\r\n        }\r\n\r\n        const update_Semester_Input = {\r\n            id: semesterInfo?.id,\r\n            studentId: studentInfo?.id, \r\n            semesterName: values.semesterName,\r\n            academicYearId\r\n      \r\n        }\r\n\r\n     \r\n         console.log('here si aca id:', academicYearId)\r\n        const { data, errors } = await UpdateStudentUpdateStudentSemesterModalMutation({\r\n            variables: {\r\n                input: update_Semester_Input\r\n            },\r\n            refetchQueries: [{\r\n            \r\n                        query: GET_STUDENT_SEMESTER,\r\n                        variables: {\r\n                            studentId: studentInfo?.id,\r\n                        },\r\n             }],\r\n             awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Update ${studentInfo?.fullName}'s UpdateStudentSemester Successfully!`)\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Update ${studentInfo?.fullName}'s Semester`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Semester Name'}\r\n                    name=\"semesterName\"\r\n                    rules={[\r\n                        { required: true, message: 'semester name is empty.' },\r\n                        { min: 2, message: 'semester must be at least 2 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                \r\n                                placeholder='Enter Semester' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default UpdateStudentSemesterModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentSemester\\CreateStudentSemester.tsx",["1473","1474"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { CREATE_STUDENT_SEMESTER, GET_STUDENT_SEMESTER } from '../../../graphql/semester';\r\nimport { GET_STUDENT_ACADEMIC_YEAR } from \"../../../graphql/academicYear\";\r\n\r\nconst CreateStudentSemesterModal = ({ \r\n     studentInfo,\r\n     toggleVisible, \r\n     visible,\r\n     academicYearId\r\n     }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateStudentSemesterModalMutation] = useMutation(CREATE_STUDENT_SEMESTER);\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n        const create_Semester_Input = {\r\n        \r\n            studentId: studentInfo?.id, \r\n            semesterName: values.semesterName,\r\n            academicYearId,\r\n      \r\n        }\r\n\r\n        if(!academicYearId) {\r\n            message.warn(\"Academic ID Not Found!\");\r\n            return false;\r\n        }\r\n\r\n        const { data, errors } = await CreateStudentSemesterModalMutation({\r\n            variables: {\r\n                input: create_Semester_Input\r\n            },\r\n            refetchQueries: [{\r\n            \r\n                        query: GET_STUDENT_ACADEMIC_YEAR,\r\n                        variables: {\r\n                            studentId: studentInfo?.id,\r\n                        },\r\n             }],\r\n             awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Add ${studentInfo?.fullName}'s CreateStudentSemesterModal Successfully!`)\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Create ${studentInfo?.fullName}'s Semester`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Semester Name'}\r\n                    name=\"semesterName\"\r\n                    rules={[\r\n                        { required: true, message: 'semester name is empty.' },\r\n                        { min: 2, message: 'semester must be at least 2 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                \r\n                                placeholder='Enter Semester Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default CreateStudentSemesterModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentAcademicYear\\UpdateStudentAcademicYear.tsx",["1475","1476"],"import React, { useEffect, useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { UPDATE_STUDENT_ACADEMIC_YEAR, GET_STUDENT_ACADEMIC_YEAR } from '../../../graphql/academicYear';\r\n\r\nconst UpdateStudentAcademicYearModal = ({ \r\n     studentInfo,\r\n     toggleVisible, \r\n     visible,\r\n     academicYearInfo\r\n     }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n        \r\n            academicYearName: academicYearInfo?.academicYearName,\r\n        })\r\n     }, [visible]);\r\n\r\n    const [UpdateStudentUpdateStudentAcademicYearModalMutation] = useMutation(UPDATE_STUDENT_ACADEMIC_YEAR);\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n        const update_AcademicYear_Input = {\r\n            id: academicYearInfo?.id,\r\n            studentId: studentInfo?.id, \r\n            academicYearName: values.academicYearName,\r\n      \r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await UpdateStudentUpdateStudentAcademicYearModalMutation({\r\n            variables: {\r\n                input: update_AcademicYear_Input\r\n            },\r\n            refetchQueries: [{\r\n            \r\n                        query: GET_STUDENT_ACADEMIC_YEAR,\r\n                        variables: {\r\n                            studentId: studentInfo?.id,\r\n                        },\r\n             }],\r\n             awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Update ${studentInfo?.fullName}'s UpdateStudentAcademicYear Successfully!`)\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Update ${studentInfo?.fullName}'s AcademicYear`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'AcademicYear Name'}\r\n                    name=\"academicYearName\"\r\n                    rules={[\r\n                        { required: true, message: 'academicYear name is empty.' },\r\n                        { min: 6, message: 'academicYear must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                \r\n                                placeholder='Enter AcademicYear' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default UpdateStudentAcademicYearModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentAcademicYear\\CreateStudentAcademicYear.tsx",["1477"],"import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { CREATE_STUDENT_ACADEMIC_YEAR, GET_STUDENT_ACADEMIC_YEAR } from '../../../graphql/academicYear';\r\n\r\nconst CreateStudentAcademicYearModal = ({ \r\n     studentInfo,\r\n     toggleVisible, \r\n     visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateStudentCreateStudentAcademicYearModalMutation] = useMutation(CREATE_STUDENT_ACADEMIC_YEAR);\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n        const create_AcademicYear_Input = {\r\n        \r\n            studentId: studentInfo?.id, \r\n            academicYearName: values.academicYearName,\r\n      \r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await CreateStudentCreateStudentAcademicYearModalMutation({\r\n            variables: {\r\n                input: create_AcademicYear_Input\r\n            },\r\n            refetchQueries: [{\r\n            \r\n                        query: GET_STUDENT_ACADEMIC_YEAR,\r\n                        variables: {\r\n                            studentId: studentInfo?.id,\r\n                        },\r\n             }],\r\n             awaitRefetchQueries: true\r\n\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Add ${studentInfo?.fullName}'s CreateStudentAcademicYear Successfully!`)\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Create ${studentInfo?.fullName}'s AcademicYear`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'AcademicYear Name'}\r\n                    name=\"academicYearName\"\r\n                    rules={[\r\n                        { required: true, message: 'academicYear name is empty.' },\r\n                        { min: 6, message: 'academicYear must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                \r\n                                placeholder='Enter AcademicYear Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default CreateStudentAcademicYearModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\Address\\StudentAddress.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\AcademicQualification\\AcademicQualification.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Courses\\EnrollStudent\\EnrollStudent.tsx",["1478","1479","1480","1481","1482","1483"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select, Empty, Button } from 'antd';\r\n\r\nimport { GET_COURSES, ENROLL_STUDENT } from \"../../../graphql/course\";\r\nimport { GET_STUDENTS } from \"../../../graphql/student\";\r\nimport './style.less';\r\nimport SelectedPerson from './SelectedPerson';\r\n\r\n\r\nconst CreateEnrollStudentModal = ({ visible, courseInfo,  toggleVisible }: any) => {\r\n    \r\n    const [form] = Form.useForm();\r\n    const [studentsValue, setStudentsValue] = useState([])\r\n    const [showStudents, setShowStudent] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedStudentData, setSelectedStudentData ] = useState([]);\r\n\r\n    const [CreateEnrollStudentMutation] = useMutation(ENROLL_STUDENT);\r\n\r\n    const { data, loading } = useQuery(GET_STUDENTS,{\r\n        variables: {\r\n            authUserId: null,\r\n            skip: 0,\r\n            limit: 0\r\n        },\r\n        fetchPolicy: \"network-only\",\r\n        skip: !visible\r\n    });\r\n\r\n    const students = data&&data.getStudents;\r\n\r\n    if(loading) {\r\n       <p>Efafe</p>\r\n    }\r\n\r\n\r\n\r\n \r\n \r\n \r\n     useEffect(() => {\r\n         setSearchResults(students);\r\n \r\n     }, [data]);\r\n\r\n    useEffect(() => {\r\n\r\n        const results = students?.filter((student: any) => student?.name?.toLowerCase().includes(searchTerm))\r\n        setSearchResults(results);\r\n\r\n    }, [searchTerm]);\r\n\r\n\r\n\r\n\r\n    const handleSelectStudentData = (data: any) => {\r\n         setSelectedStudentData([...selectedStudentData, data]);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        \r\n        setSearchResults([]);\r\n        setStudentsValue([])\r\n        setSelectedStudentData([])\r\n        setSearchTerm(\"\");\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false);\r\n\r\n       \r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSearchStudentChange = (e: any) => {\r\n        // setShowStudent(!showStudents);\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const onSelectedStudent = (value: any) => {\r\n          \r\n        \r\n          const studentId = value?.id;\r\n     \r\n         let checkValue = studentsValue.includes(studentId);\r\n         if(checkValue) {\r\n             return message.warn(\"This student already enrolled!\")\r\n         }\r\n        \r\n         const newSearch = searchResults.filter(x => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n         setSearchResults(newSearch)\r\n    \r\n         handleSelectStudentData(value);\r\n\r\n         setStudentsValue([...studentsValue, studentId])\r\n    }\r\n\r\n    const handleDeleteSelectedStudent = async (value: any) => {\r\n\r\n\r\n       const newData = selectedStudentData.filter((x: any) => {\r\n            return x.id != value?.id;\r\n          })\r\n\r\n\r\n       setSelectedStudentData(newData);\r\n       const newStudentValue = studentsValue.filter((x: any) => {\r\n           return x != value?.id;\r\n       })\r\n       setStudentsValue(newStudentValue);\r\n\r\n       const checkStudent = searchResults.includes(value?.id);\r\n       if(!checkStudent) {\r\n         setSearchResults([...searchResults, value])\r\n       }\r\n      \r\n        \r\n     \r\n    }\r\n\r\n \r\n// console.log('here i s student Vlaue:', studentsValue)\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n           \r\n            courseId: courseInfo?.id,\r\n            students: studentsValue\r\n           \r\n        \r\n        }\r\n\r\n        const { data, errors } = await CreateEnrollStudentMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getCourses } = cache.readQuery({ query: GET_COURSES, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newCourse = data?.enrollStudent;\r\n                   cache.writeQuery({\r\n                       query: GET_COURSES,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { getCourses: {\r\n                           courses: [...getCourses.courses, newCourse]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n    \r\n       \r\n        });\r\n\r\n        setSearchResults([]);\r\n        setStudentsValue([])\r\n        setSelectedStudentData([])\r\n        setSearchTerm(\"\");\r\n        \r\n        if(data && !errors) {\r\n            message.success('Added EnrollStudent  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n      \r\n        return (\r\n            <>\r\n              {!loading?  <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Enroll Student to ${courseInfo?.name} Course`}\r\n                centered\r\n                onOk={handleOk}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => onCancel()}>\r\n                      Return\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\"  onClick={handleOk}>\r\n                      Submit\r\n                    </Button>\r\n                  ]}\r\n\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n\r\n                    \r\n                    {selectedStudentData.length > 0 && !loading ?  <SelectedPerson selectedInfo={selectedStudentData} handleDeleteSelectedData={handleDeleteSelectedStudent} /> : <Empty description={`${studentsValue?.length} Student`} />}\r\n\r\n                    <Form.Item label={'Students'}\r\n                    // name=\"student\"\r\n                  \r\n                    >\r\n                    \r\n                \r\n\r\n                 <Input\r\n                  onChange={handleSearchStudentChange}\r\n                  placeholder={'Search Student'}\r\n                  onFocus={() => setShowStudent(true)}\r\n                  value={searchTerm} />\r\n\r\n                  <ul\r\n                   className=\"student_list\"\r\n                  style={{\r\n                      display: `${!showStudents?'none':'block'}`,\r\n                      transition: '0.5s'\r\n                  }}>\r\n                      {searchResults?.map(((student: any) => (\r\n                          <li key={student.id} onClick={() => onSelectedStudent(student)}>{student?.name}</li>\r\n                      )))}\r\n                  </ul>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    \r\n\r\n                </Form>\r\n              \r\n            </Modal>:null}\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateEnrollStudent= connect(mapStateToProps, {})(CreateEnrollStudentModal);\r\n\r\nexport default CreateEnrollStudent;","D:\\labc-web\\labc-web-admin\\src\\graphql\\grade.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\sum.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\EditStudentGrade.tsx",["1484","1485"],"import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\n\r\nimport { UPDATE_GRADE } from \"../../../graphql/grade\";\r\nimport { GET_COURSES } from \"../../../graphql/course\";\r\nimport { GET_STUDENT_SEMESTER } from '../../../graphql/semester';\r\nconst { Option } = Select;\r\n\r\nconst EditStudentGradeModal = ({ \r\n     studentInfo,\r\n     semesterId,\r\n     toggleVisible, \r\n     gradeInfo,\r\n     academicYearId,\r\n     visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [input, setInputValue] = useState({});\r\n    const [courseId, setCourseId] = useState('');\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            subject: gradeInfo?.course?.id\r\n        })\r\n        setInputValue({\r\n            mark: gradeInfo.mark,\r\n            credit: gradeInfo.credit,\r\n            \r\n        })\r\n\r\n        setCourseId(gradeInfo?.course?.id)\r\n    \r\n    }, [gradeInfo]);\r\n\r\n\r\n\r\n\r\n    const [EditStudentGradeMutation] = useMutation(UPDATE_GRADE)\r\n      const { data, loading } = useQuery(GET_COURSES);\r\n    const courses = data&&data.getCourses?.courses;\r\n\r\n\r\n \r\n\r\n    // if(loading) {\r\n    //     return <p>loading....</p>\r\n    // }\r\n\r\n\r\n    const onHandleInputValue = (e: any) => {\r\n      const { name, value } = e.target;\r\n      return setInputValue({\r\n          ...input,\r\n          [name]: value\r\n      })\r\n    }\r\n  \r\n\r\n      function onChange(value: any) {\r\n        // console.log(`selected ${value}`);\r\n      }\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n\r\n const { mark, credit }: any = input;\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n       if(!semesterId) {\r\n           message.warning('You need to Edit Student Profile First!')\r\n\r\n           onCancel()\r\n\r\n           return false;\r\n       }\r\n\r\n        const update_Grade_Input = {\r\n            \r\n            gradeId: gradeInfo?.id,\r\n            academicYearId,\r\n            semesterId,\r\n            studentId: studentInfo?.id, \r\n            courseId: values.subject,\r\n            mark: parseInt(mark),\r\n            credit: parseInt(credit),\r\n            weightedMark: parseInt(mark) * parseInt(credit)\r\n        \r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await EditStudentGradeMutation({\r\n            variables: {\r\n                input: update_Grade_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STUDENT_SEMESTER,\r\n                variables: {\r\n                    studentId: studentInfo?.id,\r\n                },\r\n        }],\r\n        awaitRefetchQueries: true\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Update ${studentInfo?.fullName}'s Grade Successfully!`)\r\n\r\n            // setSuccess(false);\r\n            // setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Edit ${studentInfo?.fullName}'s Grade`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ subject: courseId || gradeInfo?.course?.id }}\r\n                \r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Subject'}\r\n                    name=\"subject\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Subject\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {courses?courses.map((course: any) => {\r\n                        return(\r\n                            <Option key={course.id} value={`${course.id}`}>{course?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Mark'}\r\n                  \r\n                    rules={[\r\n                        { required: true, message: 'mark is empty.' },\r\n                        { min: 1, message: 'mark must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                onChange={onHandleInputValue}\r\n                                name={\"mark\"}\r\n                                value={mark}\r\n\r\n                                placeholder='Mark' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Credit'}\r\n                 \r\n                    rules={[\r\n                        { required: true, message: 'credit is empty.' },\r\n                        { min: 1, message: 'credit must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                name={\"credit\"}\r\n                                value={credit}\r\n                                onChange={onHandleInputValue}\r\n                                placeholder='Credit' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default EditStudentGradeModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\GradeDetail.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\CreateStudentGrade.tsx",["1486"],"import React, { useState } from 'react';\r\n\r\n\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\nimport { GET_COURSES } from \"../../../graphql/course\";\r\nimport { CREATE_GRADE } from '../../../graphql/grade';\r\nimport { GET_STUDENT_SEMESTER } from '../../../graphql/semester';\r\nconst { Option } = Select;\r\n\r\nconst CreateStudentGradeModal = ({ \r\n     studentInfo,\r\n     semesterId,\r\n     toggleVisible, \r\n     academicYearId,\r\n     visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    // const [success, setSuccess] = useState(false);\r\n\r\n    // const [filename, setFileName] = useState('');\r\n    // const [img_src, setImg_Src] = useState('');\r\n    // const [current, setCurrent] = useState(false);\r\n    // const [current_hide, setCurrentHide] = useState(false);\r\n    // const [checked_hide, setCheckedHide] = useState(false);\r\n\r\n    const [input, setInputValue] = useState({\r\n        \r\n    });\r\n\r\n    const [CreateStudentGradeMutation] = useMutation(CREATE_GRADE)\r\n      const { data, loading } = useQuery(GET_COURSES, {\r\n        fetchPolicy: \"network-only\",\r\n        skip: !visible\r\n      });\r\n    const courses = data&&data.getCourses?.courses;\r\n\r\n\r\n \r\n\r\n    // if(loading) {\r\n    //     return <p>loading....</p>\r\n    // }\r\n\r\n\r\n\r\n    const onHandleInputValue = (e: any) => {\r\n      const { name, value } = e.target;\r\n      return setInputValue({\r\n          ...input,\r\n          [name]: value\r\n      })\r\n    }\r\n  \r\n\r\n      function onChange(value: any) {\r\n        // console.log(`selected ${value}`);\r\n      }\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields();\r\n        setInputValue({});\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    // const handleSetImage = (url: any) => {\r\n\r\n    //     setImg_Src(url);\r\n    // }\r\n\r\n const { mark, credit }: any = input;\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n       if(!semesterId) {\r\n           message.warning('You need to Create Student Profile First!')\r\n\r\n           onCancel()\r\n\r\n           return false;\r\n       }\r\n\r\n       if(!values.subject) {\r\n        message.warn(\"Please select a  subject\")\r\n        return false;\r\n    }\r\n    \r\n \r\n    const defaultCredit = credit > 0 ? credit: 20;\r\n        const create_Grade_Input = {\r\n            academicYearId,\r\n            semesterId,\r\n            studentId: studentInfo?.id, \r\n            courseId: values.subject,\r\n            mark: parseInt(mark),\r\n            credit: parseInt(defaultCredit),\r\n            weightedMark: parseInt(mark) * parseInt(defaultCredit)\r\n        \r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await CreateStudentGradeMutation({\r\n            variables: {\r\n                input: create_Grade_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_STUDENT_SEMESTER,\r\n                variables: {\r\n                    studentId: studentInfo?.id,\r\n                },\r\n        }],\r\n        awaitRefetchQueries: true\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Add ${studentInfo?.fullName}'s Grade Successfully!`)\r\n\r\n            // setSuccess(false);\r\n            // setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Create ${studentInfo?.fullName}'s Grade`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n                \r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n\r\n                // initialValues={{ credit: 20 }}\r\n                \r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Subject'}\r\n                    name=\"subject\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Subject\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {courses?courses.map((course: any) => {\r\n                        return(\r\n                            <Option key={course.id} value={`${course.id}`}>{course?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Mark'}\r\n                    name=\"mark\"\r\n                    rules={[\r\n                        { required: true, message: 'mark is empty.' },\r\n                        { min: 1, message: 'mark must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                onChange={onHandleInputValue}\r\n                                name={\"mark\"}\r\n                                placeholder='Mark' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Credit'}\r\n                    name=\"creidt\"\r\n                    rules={[\r\n                        { required: true, message: 'credit is empty.' },\r\n                        { min: 1, message: 'credit must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                defaultValue={20}\r\n                                name={\"credit\"}\r\n                                onChange={onHandleInputValue}\r\n                                placeholder='Credit' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default CreateStudentGradeModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentClassification\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\gradeDetail.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\EditStudentGradeDetail.tsx",["1487"],"import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\n\r\nimport { UPDATE_GRADE_DETAIL, GET_GRADE_DETAILS_GRADE_BY_ID } from \"../../../graphql/gradeDetail\";\r\n\r\nimport { assigmentTypes } from '../../../utils/assigmentTypes';\r\nimport { creditDefaultValue } from '../../../utils/creditDefaultValue';\r\nconst { Option } = Select;\r\n\r\nconst EditStudentGradeDetailModal = ({ \r\n     studentInfo,\r\n     semesterId,\r\n     toggleVisible, \r\n     gradeInfo,\r\n     gradeDetailInfo,\r\n     courseInfo,\r\n     academicYearId,\r\n     visible }: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [selectValue, setSelectValue] = useState('');\r\n\r\n    const [input, setInputValue] = useState({});\r\n    const [name, setName] = useState('');\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            name: gradeDetailInfo?.name,\r\n            // value: gradeDetailInfo?.value,\r\n            // credit: gradeDetailInfo?.credit\r\n\r\n        })\r\n        setInputValue({\r\n\r\n           mark: gradeDetailInfo?.mark,\r\n           credit: gradeDetailInfo?.credit\r\n\r\n        })\r\n\r\n        setName(gradeDetailInfo?.name)\r\n    \r\n    }, [gradeDetailInfo]);\r\n\r\n\r\n\r\n\r\n    const [EditStudentGradeDetailMutation] = useMutation(UPDATE_GRADE_DETAIL)\r\n \r\n\r\n\r\n\r\n\r\n    const onHandleInputValue = (e: any) => {\r\n      const { name, value } = e.target;\r\n      return setInputValue({\r\n          ...input,\r\n          [name]: value\r\n      })\r\n    }\r\n  \r\n\r\n      function onChange(v: any) {\r\n        setSelectValue(v);\r\n\r\n        setInputValue({\r\n           mark: mark,\r\n           credit: creditDefaultValue(v)\r\n      });\r\n      }\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        // setSelectValue('');\r\n        // setInputValue({});\r\n        toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n const { mark, credit }: any = input;\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n           \r\n\r\n\r\n       if(!semesterId) {\r\n           message.warning('You need to Edit Student Profile First!')\r\n\r\n           onCancel()\r\n\r\n           return false;\r\n       }\r\n\r\n        const update_GradeDetail_Input = {\r\n            \r\n            gradeDetailId: gradeDetailInfo?.id,\r\n            semesterId,\r\n            academicYearId,\r\n            gradeId: gradeInfo?.id,\r\n            studentId: studentInfo?.id, \r\n            courseId: courseInfo?.id,\r\n            name: selectValue,\r\n            credit: parseInt(credit),\r\n            mark: parseInt(mark),\r\n            weightedMark: credit*mark\r\n        \r\n        \r\n        }\r\n\r\n     \r\n\r\n        const { data, errors } = await EditStudentGradeDetailMutation({\r\n            variables: {\r\n                input: update_GradeDetail_Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_GRADE_DETAILS_GRADE_BY_ID,\r\n                variables: {\r\n                    gradeId: gradeInfo?.id,\r\n                },\r\n                }],\r\n                awaitRefetchQueries: true\r\n        });\r\n\r\n  \r\n        if(data && !errors) {\r\n            message.success(`Update ${studentInfo?.fullName}'s GradeDetail Successfully!`)\r\n\r\n            // setSuccess(false);\r\n            // setImg_Src('');\r\n            // setCurrent(false);\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title={`Edit ${studentInfo?.fullName}'s GradeDetail`}\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'600px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ name: name || gradeDetailInfo?.name }}\r\n                \r\n                \r\n                >\r\n\r\n\r\n                  <Form.Item label={'Assigment Type'}\r\n                    name=\"name\"\r\n                  \r\n                    >\r\n                    \r\n                    <Select\r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Name\"\r\n                    optionFilterProp=\"children\"\r\n                    onChange={onChange}\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {assigmentTypes?assigmentTypes.map((assigment: any) => {\r\n                        return(\r\n                            <Option key={assigment.id} value={`${assigment.name}`}>{assigment?.name}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n                 \r\n\r\n                    <Form.Item label={'Mark'}\r\n                    // name=\"value\"\r\n                    rules={[\r\n                        { required: true, message: 'value is empty.' },\r\n                        { min: 1, message: 'value must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                onChange={onHandleInputValue}\r\n                                name={\"mark\"}\r\n                                value={mark}\r\n                                placeholder='Mark' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Percent'}\r\n                    // name=\"credit\"\r\n                    rules={[\r\n                        { required: true, message: 'Percent is empty.' },\r\n                        { min: 1, message: 'Percent must be at least  digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                name={\"credit\"}\r\n                                value={credit}\r\n                                onChange={onHandleInputValue}\r\n                                placeholder='Percent' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\nexport default EditStudentGradeDetailModal;","D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentGrade\\CreateStudentGradeDetail.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Students\\StudentClassification\\StudentClassification.tsx",["1488"],"import { useQuery } from '@apollo/client';\r\nimport { Space, Tag } from 'antd';\r\nimport React from 'react'\r\nimport { gradeClassification } from '../../../utils/classification';\r\n// import { GET_STUDENT } from '../../../graphql/student';\r\n\r\nconst StudentClassification = ({ studentInfo, studentGrade }: any) => {\r\n\r\n    // const { data, loading } = useQuery(GET_STUDENT, {\r\n    //     variables: {\r\n    //         studentId: studentInfo?.id,\r\n    //     },\r\n    //     skip: !studentInfo?.id\r\n\r\n    // });\r\n\r\n    console.log('here is studetn Info:', studentInfo)\r\n\r\n    console.log('here is class:', gradeClassification(studentGrade, studentInfo?.programme?.programmeType))\r\n     \r\n\r\n    return (\r\n        <div>\r\n            {parseInt(studentGrade) > 0?<Space>\r\n                Classification: <Tag color={`${studentGrade < 40 ? 'red': 'green'}`}>\r\n             {gradeClassification(studentGrade, studentInfo?.programme?.programmeType)}\r\n             </Tag>\r\n            </Space>: null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentClassification\r\n","D:\\labc-web\\labc-web-admin\\src\\utils\\creditDefaultValue.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\assigmentTypes.ts",[],"D:\\labc-web\\labc-web-admin\\src\\utils\\classification.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\CreatePost.tsx",["1489","1490","1491","1492","1493","1494","1495","1496","1497"],"import React, { useEffect, useState, Fragment } from 'react';\r\nimport moment from 'moment';\r\nimport { message } from 'antd';\r\nimport { useMutation } from \"@apollo/client\";\r\nimport _ from \"lodash\";\r\nimport { connect } from 'react-redux';\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { CloudUploadOutlined } from '@ant-design/icons';\r\n\r\nimport { UploadImageMutation } from '../../graphql/upload';\r\nimport { CREATE_POST, GET_POSTS } from \"../../graphql/post\";\r\nimport { GET_CATEGORIES } from '../../graphql/category';\r\nimport MyUploadAdapter from '../MyUploadAdapter';\r\nimport Tag from \"../Tag\";\r\nimport Button from \"../Button\";\r\nimport AddIcon from '../Icons/AddIcon';\r\nimport \"../TagInput/styles.less\";\r\nimport Loading from '../Loading';\r\nimport \"./style.less\";\r\nimport MyCKEditor from './CKEditor';\r\nimport { LanguageData } from './LanguageData';\r\n              \r\nconst __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\r\nconst __ISIOS__ = navigator.userAgent.match(/iPad|iPhone|iPod/i) ? true : false;\r\n\r\n\r\n\r\nfunction MyCustomUploadAdapterPlugin(editor: any) {\r\n  editor.plugins.get('FileRepository').createUploadAdapter = (loader: any) => {\r\n    return new MyUploadAdapter(loader)\r\n  }\r\n}\r\n\r\n /**\r\n * formatFile name for post image\r\n * @param {*} e\r\n */\r\nconst formatFilenamePost = (filename: string) => {\r\n\r\n  const date = moment().format(\"YYYYMMDD\");\r\n  const randomString = Math.random().toString(36).substring(2, 7);\r\n  const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n  const newFilename = `images/${cleanFileName}-${randomString}-${date}`;\r\n  return newFilename.substring(0, 60);\r\n  \r\n};\r\n\r\n\r\n\r\n/**\r\n * Main Component\r\n */\r\n const CreatePost = (props: any) => {\r\n\r\n  var bgImgUpload: any;\r\n\r\n  /**\r\n   * get editor content from localStorage\r\n   */\r\n\r\n  const EditorContentFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"e-content\")) {\r\n      return JSON.parse(localStorage.getItem(\"e-content\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * get title from localStorage\r\n   */\r\n\r\n  const EditorTitleFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"e-title\")) {\r\n      return JSON.parse(localStorage.getItem(\"e-title\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * get bg url from localStorage\r\n   */\r\n  const EditorBgUrlFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"bgUrl\")) {\r\n      return JSON.parse(localStorage.getItem(\"bgUrl\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n  const [input, setInput] = useState({ equ: \"\" });\r\n  const [uploadLoading, setUploadLoading] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [tagName, setTagName] = useState(\"\");\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [showCategorys, setShowCategorys] = useState(false);\r\n  const [showLanguage, setShowLanguage] = useState(false);\r\n  const [language, setLanguage] = useState(\"\");\r\n\r\n  const [langKey, setLangKey] = useState(\"\");\r\n\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n\r\n  const [backgroundImageUrl, setBackgroundImageUrl] = useState(EditorBgUrlFromLS() || \"\");\r\n    \r\n  const [title, setTitle] = useState(EditorTitleFromLS() || \"\");\r\n  const [contents, setContents] = useState(EditorContentFromLS() || \"\");\r\n\r\n  const [categoriesResult, setCategoriesResult] = useState([]);\r\n\r\n  const [uploadPostImgMutation] = useMutation(UploadImageMutation);\r\n\r\n   \r\n\r\n\r\n\r\n\r\n  const handleTitleChange = (value: any) => {\r\n    setTitle(value);\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.setItem(\"e-title\", JSON.stringify(value));\r\n    }\r\n  };\r\n    \r\n  const handleInputChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    return setInput({\r\n      ...input,\r\n      [name]: value,\r\n    });\r\n  };\r\n    \r\n\r\n\r\n\r\n   useEffect(() => {\r\n      bgImgUpload = document.getElementById(\"bgUpload\");\r\n      \r\n      bgImgUpload.addEventListener(\"change\", startUploadFile, false);\r\n      return () => {\r\n      bgImgUpload.removeEventListener(\"change\", startUploadFile);\r\n      };\r\n  });\r\n\r\n  const handleBgUploadImg = async (file: any) => {\r\n       /**\r\n         * handle Background Image\r\n         */\r\n         if(/^image\\//.test(file.type)) {\r\n               \r\n          setUploadLoading(true);\r\n      \r\n    \r\n        const { data } = await uploadPostImgMutation({\r\n          variables: {\r\n            file,\r\n            filename: formatFilenamePost(file.name),\r\n          },\r\n        });\r\n         \r\n        // console.log(\"here si data upload imagte:\", data)\r\n         let url = data && data?.UploadImageReq.image_url;\r\n \r\n          setUploadLoading(false);\r\n          if(data && url) {\r\n            message.success(\"Upload Background Image Successfully!\")\r\n          }\r\n          setBackgroundImageUrl(url);\r\n          localStorage.setItem(\"bgUrl\", JSON.stringify(url));\r\n          \r\n    \r\n         }\r\n  }\r\n\r\n\r\n  const startUploadFile =() => {\r\n    if(bgImgUpload.files[0]) {\r\n    \r\n     handleBgUploadImg(bgImgUpload.files[0]);\r\n    \r\n    }\r\n  }\r\n\r\n\r\n  const _onBgImgClick = (e: any) => {\r\n    \r\n    e.preventDefault();\r\n    // console.log('hreris click', bgImgUpload)\r\n    if(props.authUser) {\r\n      bgImgUpload.click();\r\n    }else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const onChangeContents = (contents: any) => {\r\n    let _contents = null;\r\n    if (__ISMSIE__) {\r\n      if (contents.indexOf(\"<p><br></p>\") > -1) {\r\n        _contents = contents.replace(/<p><br><\\/p>/gi, \"<p>&nbsp;</p>\");\r\n      }\r\n    }\r\n    \r\n    setContents(_contents || contents);\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.setItem(\"e-content\", JSON.stringify(contents));\r\n    }\r\n  };\r\n  /*for tags*/\r\n  const validateTag = (tagName: any) => {\r\n    const regex = /^[a-z0-9.\\-_$@*!]{2,20}$/;\r\n    // const regex = /^[^~_$@!*%.\\-\\x22].{2,20}$/;\r\n    return regex.test(tagName);\r\n  };\r\n  const sameTag = (tagName: any) => {\r\n    let matched = false;\r\n    tags.map((tag) => {\r\n      if (tag === tagName) matched = true;\r\n    });\r\n    return matched;\r\n  };\r\n  /**add Tag */\r\n  const addTag = (e: any) => {\r\n    e.preventDefault();\r\n    \r\n    if (validateTag(tagName)) {\r\n      if (!sameTag(tagName)) {\r\n        const newTags = tags.concat(tagName);\r\n        setTags(newTags);\r\n        setTagName(\"\");\r\n        setErrorMsg(null);\r\n        props.onChange(newTags);\r\n      } else {\r\n        setErrorMsg({\r\n          errorMsg: \"Same Tag!!\",\r\n        });\r\n      }\r\n    } else {\r\n      setErrorMsg({\r\n        errorMsg:\r\n          \"Tags can only contain small letters and numbers. No space or special characters please. Min 4 and max 20 chars.\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * render Tags\r\n   */\r\n    \r\n  const renderTags = () => {\r\n    return tags.map((tag, i) => {\r\n      return (\r\n        <Tag\r\n          name={tag}\r\n          key={tag}\r\n          withRemove\r\n          removeAction={() => {\r\n            removeTag(i);\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n    /**\r\n     * render Input\r\n     */\r\n  const renderInput = () => {\r\n    const { maxTagCount } = props;\r\n    if (tags?.length < maxTagCount) {\r\n      return (\r\n        <div className=\"inputContainer\">\r\n          <input\r\n            className=\"tagInput\"\r\n            placeholder={\"tags name...\"}\r\n            value={tagName}\r\n            onChange={(e) => handleTagName(e)}\r\n            onKeyPress={(e) => handleKeyPress(e)}\r\n          />\r\n          <Button\r\n            className=\"addButton\"\r\n            onClick={(e: any) => {\r\n              addTag(e);\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n  /**\r\n   * remove Tag\r\n   */\r\n  const removeTag = (position: any) => {\r\n    const newTags = [\r\n      ...tags.slice(0, position),\r\n      ...tags.slice(position + 1, tags.length),\r\n    ];\r\n    setTags(newTags);\r\n    props.onChange(newTags);\r\n  };\r\n  const handleShowCategorys = (e: any) => {\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    setShowCategorys(!showCategorys);\r\n    \r\n    setShowLanguage(false);\r\n\r\n    if(!categoriesResult?.length) {\r\n      return message.warning(\"Please Select Language First!\")\r\n    }\r\n  };\r\n\r\n  const handleTagName = (e: any) => {\r\n    setTagName(e.target.value);\r\n  };\r\n    \r\n  const handleCategoryChange = (e: any, id: any, name: string) => {\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    setCategoryId(id);\r\n    setCategoryName(name);\r\n    setShowCategorys(false);\r\n\r\n\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const Result = props.categories?.categories?.filter((category: any) => {\r\n      return category?.lang == langKey;\r\n    });\r\n\r\n   setCategoriesResult(Result);\r\n\r\n }, [langKey]);\r\n\r\n const handleShowLanguage = (e: any) => {\r\n  e.nativeEvent.stopImmediatePropagation();\r\n  setShowLanguage(!showLanguage);\r\n}\r\n  const handleLanguageChange = (lang: string, langKey: string) => {\r\n    setLanguage(lang);\r\n    setLangKey(langKey);\r\n    setShowLanguage(false);\r\n  \r\n\r\n  }\r\n\r\n  const handleKeyPress = (event: any) => {\r\n    if (event.key === \"Enter\") {\r\n      addTag(event);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * handle publish the post\r\n   */\r\n  const handlePublishPost = async (\r\n    title: string,\r\n    content: string,\r\n    authorId: any,\r\n    categoryId: any,\r\n    backgroundImageUrl: string,\r\n    tags: string[],\r\n    props: any\r\n  ) => {\r\n\r\n    if(!title) {\r\n      message.warning('Please enter title!');\r\n      return false;\r\n    }\r\n    \r\n    if(content === \"<p><br></p>\") {\r\n          \r\n      message.warning('Please enter content!');\r\n      return false;\r\n    }\r\n    if(title === \"\") {\r\n      message.warning('Please enter title!');\r\n    }\r\n    if(categoryId === \"\") {\r\n      message.warning('Please select the  Category !');\r\n      return false;\r\n      // return props.setAlert(\"Please Select the Category!\", \"danger\")\r\n    }\r\n\r\n    const data = await props.createPostMutation({\r\n      variables: {\r\n        input: { title, content, lang: langKey, authorId, bg_img: backgroundImageUrl, categoryId, tags },\r\n      },\r\n    });\r\n    \r\n \r\n\r\n    if(!data) {\r\n      message.warning('Create Failed!');\r\n      return false;\r\n    }\r\n       \r\n    if (data) {\r\n        \r\n      setUploadLoading(false);\r\n      message.success('Create Successfully!');\r\n    }\r\n    handleTitleChange(\"\");\r\n    localStorage.setItem(\"bgUrl\", JSON.stringify(\"\"));\r\n    onChangeContents(\"\");\r\n    return window.location.reload(true);\r\n      \r\n      \r\n  };\r\n\r\n\r\n  const { id } = props.authUser;\r\n\r\n\r\n  return (\r\n    <>\r\n    \r\n   \r\n    <div className=\"main-panel\">\r\n         \r\n           <MyUploadAdapter uploadImageMutation={uploadPostImgMutation} />\r\n           <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                className=\"d-title\"\r\n                value={title}\r\n                placeholder={'Title'}\r\n                onChange={(e) => handleTitleChange(e.target.value)}\r\n              />\r\n           \r\n\r\n            \r\n          {/* Select Language  */}\r\n\r\n          <div className=\"select-dev\" style={{ borderBottom: '1px solid #ddd'}}>\r\n              {/* Categorys: */}\r\n            \r\n              Language :\r\n              <span className=\"topic-menu\" onClick={(e) => handleShowLanguage(e)}>\r\n                {language === \"\" ? \" --select Language--\" : language}\r\n              </span>\r\n              {   \r\n                showLanguage&&(\r\n                  <ul className=\"list-lang\" >\r\n                  {LanguageData.map((lang: any) => {\r\n  \r\n                    return (\r\n                      <li\r\n                      value={lang?.id}\r\n                      onClick={(e) =>\r\n                        handleLanguageChange(lang?.value, lang?.lang)\r\n                      }\r\n                      key={lang?.id}\r\n                    >\r\n                      {\" \"}\r\n                      {lang.value}\r\n                    </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n                )\r\n              }\r\n            </div>\r\n\r\n          {/**here is topics section */}\r\n     \r\n          {props.loadingCategories ? (\r\n             <Loading />\r\n          ) : (\r\n            <div className=\"select-dev\" style={{ borderBottom: '1px solid #ddd'}}>\r\n              {/* Categorys: */}\r\n              Categories : \r\n              <span className=\"topic-menu\" onClick={(e) => handleShowCategorys(e)}>\r\n                {categoryName === \"\" ? \" --select Categories--\" : categoryName}\r\n              </span>\r\n              {showCategorys && (\r\n                <ul className=\"list-topic\" >\r\n                  {categoriesResult?.length > 0 && categoriesResult.map((topic: any, index: any) => {\r\n                    const my_option = (\r\n                      <li\r\n                        value={topic.id}\r\n                        style={{ display: `${showLanguage?'none': 'block'}`}}\r\n                        onClick={(e) =>\r\n                          handleCategoryChange(e, topic.id, topic.name)\r\n                        }\r\n                        key={index}\r\n                      >\r\n                        {\" \"}\r\n                        {topic.name}\r\n                      </li>\r\n                    );\r\n                    return <Fragment key={index}>{my_option}</Fragment>;\r\n                  })}\r\n                </ul>\r\n              )}\r\n            </div>\r\n          )}\r\n        \r\n    \r\n          {/* Here is Background Image  */}\r\n   \r\n          {uploadLoading && <Loading />}\r\n\r\n          <div style={{ borderBottom: '1px solid #ddd', padding: '1rem', cursor: 'pointer'}} \r\n          onClick={ (e) => _onBgImgClick(e)}>\r\n             Background : {\"   \"}  {!backgroundImageUrl&&<>  <CloudUploadOutlined size={50} /> upload </>}\r\n                 \r\n             {backgroundImageUrl&&<img src={backgroundImageUrl} style={{ width: 'auto', height: '120px', padding: '8px'}}/>}\r\n          </div>\r\n          <input type='file' id='bgUpload' style={{ display: \"none\" }} />\r\n          {/* here is tags section  */}\r\n          <div className=\"tags-container\">\r\n            <div className=\"tagContainer\">\r\n              <div className={\"label\"}>\r\n                Tags :\r\n                {/* <FormattedMessage\r\n                  id=\"user.create.post.tags\"\r\n                  defaultMessage=\"Tags\"\r\n                /> */}\r\n              </div>\r\n              {renderTags()}\r\n              {renderInput()}\r\n            </div>\r\n            {errorMsg && <div className={\"errorMsg\"}>{errorMsg.errorMsg}</div>}\r\n          </div>\r\n    \r\n           <MyCKEditor contents={contents} onChangeContents={onChangeContents} />\r\n      <Button className=\"btn\" onClick={(e: any) => handlePublishPost(title, contents,id, categoryId, backgroundImageUrl, tags, props)}> Publish </Button>\r\n\r\n    </div>\r\n\r\n    \r\n    </>\r\n  )\r\n};\r\n\r\nCreatePost.defaultProps = {\r\n  value: [],\r\n  maxTagCount: 3,\r\n  onChange: (tags: any) => { }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  authUser: state.auth&&state.auth.user,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\nconst MainCreatePost = connect(mapStateToProps, {})(CreatePost);\r\n\r\n// export default MainCreatePost;\r\n\r\nexport default compose(\r\n  graphql(CREATE_POST, {\r\n    name: \"createPostMutation\",\r\n    options: ({ values }: any) => ({\r\n      refetchQueries: [\r\n        {\r\n          query: GET_POSTS,\r\n          variables: {\r\n            // authUserId: id,\r\n            skip: 0,\r\n            limit: 0,\r\n          },\r\n        },\r\n      ],\r\n      ...values,\r\n    }),\r\n  }),\r\n  graphql(GET_CATEGORIES, {\r\n    props: ({ data }: any) => ({\r\n      loadingCategories: data.loading,\r\n      categories: data?.getCategories,\r\n    }),\r\n  })\r\n)(MainCreatePost);\r\n","D:\\labc-web\\labc-web-admin\\src\\graphql\\category.ts",[],"D:\\labc-web\\labc-web-admin\\src\\graphql\\post.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\MyUploadAdapter.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\AddIcon.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\CloudUploadIcon.tsx",["1498","1499"],"import * as React from \"react\"\r\n\r\nfunction CloudUploadIcon({width, color}: any) {\r\n      const DEFAULT_WIDTH = '22';\r\n      const DEFAULT_COLOR = '#333';\r\n    \r\n  return (\r\n      <svg\r\n      className=\"prefix__icon\"\r\n      width={60}\r\n      height={30}\r\n      viewBox=\"0 0 1170 1024\"\r\n\r\n    >\r\n      <path\r\n        fill=\"#707070\"\r\n        d=\"M945.538 321.297C912.823 182.724 811.753 0 585.143 0 411.196 0 325.818 78.196 284.858 143.892a292.571 292.571 0 00-35.374 81.654C140.434 256.931 0 345.766 0 531.948 0 673.446 74.207 782.23 208.79 838.35a537.002 537.002 0 00190.171 39.364h26.597v-79.792h-26.597s-319.169 0-319.169-265.974c0-212.78 239.377-239.377 239.377-239.377s0-212.779 265.974-212.779 292.571 319.169 292.571 319.169a196.82 196.82 0 0122.076 0c54.525 0 190.704 17.022 190.704 186.182 0 212.78-319.17 212.78-319.17 212.78H718.13v79.791h53.195c138.04 0 398.96-61.174 398.96-292.571 0-173.415-112.772-248.42-224.747-263.846z\"\r\n      />\r\n      <path\r\n        fill=\"#707070\"\r\n        d=\"M751.377 538.597a39.896 39.896 0 0029.257-67.025L621.049 298.689a39.098 39.098 0 00-39.098-10.905 39.098 39.098 0 00-38.566 10.107L370.502 473.966a39.896 39.896 0 1056.918 56.12l104.528-106.39v560.408a39.896 39.896 0 0079.792 0V406.142l110.38 119.689a39.63 39.63 0 0029.257 12.766z\"\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default CloudUploadIcon;\r\n","D:\\labc-web\\labc-web-admin\\src\\components\\Button\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Button\\Button.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Icons\\CloseIcon.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Tag\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Tag\\Tag.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\CreatePost\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\CKEditor.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\CreatePost\\LanguageData.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Category\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Category\\Category.tsx",["1500"],"D:\\labc-web\\labc-web-admin\\src\\components\\Category\\Categories.tsx",["1501","1502"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport {  useMutation, useQuery } from \"@apollo/client\";\r\nimport { connect } from \"react-redux\";\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, FileAddFilled } from '@ant-design/icons';\r\nimport EditCategory from './EditCategory';\r\nimport { DELETE_CATEGORY, GET_CATEGORIES } from '../../graphql/category';\r\nimport CreateCategory from './CreateCategory';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loading from '../Loading';\r\nimport { getLanguage } from '../../utils/getLanguage';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Categories = ({ authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n  const { t } = useTranslation();\r\n  \r\n  const { data, loading, error } = useQuery(GET_CATEGORIES, {\r\n    variables: {\r\n      authUserId: null,\r\n      skip: 0,\r\n      limit: 0\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n  const categories = data&&data.getCategories.categories;\r\n\r\n\r\n  const [DeleteCategoryMutation] = useMutation(DELETE_CATEGORY)\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowEditCategory, setIsShowEditCategory] = useState(false);\r\n  const [isShowCreateCategory, setIsShowCreateCategory] = useState(false);\r\n  \r\n  const [categoryInfo, setCategoryInfo] = useState({});\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 100);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n  const toggleShowEditCategory = (visible: boolean) => {\r\n    setIsShowEditCategory(visible);\r\n}\r\nconst handleEditCategory = (record: object) => {\r\n    toggleShowEditCategory(true);\r\n    setCategoryInfo(record);\r\n}\r\n\r\nconst toggleShowCreateCategory = (visible: boolean) => {\r\n  setIsShowCreateCategory(visible);\r\n}\r\nconst handleCreateCategory = (record: object) => {\r\n  \r\n   if(!privileges?.create) return false;\r\n\r\n  toggleShowCreateCategory(true);\r\n  setCategoryInfo(record);\r\n}\r\n\r\nconst handleDeleteCategory = async (record: any) => {\r\n   if(!privileges?.delete) return false;\r\n\r\n   await DeleteCategoryMutation({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_CATEGORIES,\r\n      variables: {\r\n        authUserId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      },\r\n    }],\r\n    awaitRefetchQueries: true\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n    const columns = [\r\n      // {\r\n      //   title: t('p_id'),\r\n      //   dataIndex: 'categoryId',\r\n      //   key: 'categoryId',\r\n      //   width: '15%',\r\n     \r\n      //   ...getColumnSearchProps('categoryId'),\r\n      // },\r\n      {\r\n        title: t('p_name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n   \r\n        width: '20%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n        title: \"Creator\",\r\n        key: 'creator',\r\n        width: '14%',\r\n        render: (record: any) => (\r\n          <span >\r\n                {\r\n                   <Tag  key={record?.id} color={'blue'}>\r\n                      {record?.creator?.name}\r\n                  </Tag>\r\n                }\r\n          </span>\r\n          )\r\n      },\r\n      {\r\n        title: t('p_intro'),\r\n        dataIndex: 'introduction',\r\n        key: 'introduction',\r\n    \r\n        width: '25%',\r\n        ...getColumnSearchProps('introduction'),\r\n      },\r\n      {\r\n        title: \"Language\",\r\n        dataIndex: 'lang',\r\n        key: 'lang',\r\n        width: '25%',\r\n        render: (lang: any) => {\r\n      \r\n          return (\r\n            <span >\r\n                  {\r\n                     <Tag  key={\"lang\"} color={'blue'}>\r\n                        {getLanguage(lang)}\r\n                    </Tag>\r\n                  }\r\n            </span>\r\n            )\r\n        }\r\n      },\r\n      {\r\n          title: `${(privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n        key: 'action',\r\n        render: ( record: any) => (\r\n          <div>\r\n                \r\n                    {privileges?.update&&<span>\r\n                      <EditOutlined />\r\n                      <Tag  color={\"blue\"} \r\n                      onClick={() => handleEditCategory(record)}\r\n                      >\r\n                          <a>\r\n                          Edit\r\n                          </a>\r\n                      </Tag>\r\n                      </span>}\r\n          \r\n                    {privileges?.delete&&<span>\r\n                      <Popconfirm title='Are you Sure to Delete？' \r\n                    onConfirm={() => handleDeleteCategory(record)} \r\n                    >\r\n                    <a>\r\n                    <span className='my-a'>\r\n                        <Divider type='vertical' />\r\n                        <DeleteOutlined />\r\n                      \r\n                            Delete\r\n                    </span>\r\n                    </a>\r\n                   </Popconfirm>\r\n                      </span>}\r\n         \r\n          </div>\r\n        ),\r\n      },\r\n     \r\n    ];\r\n\r\n    if(loading || error) {\r\n      return <Loading />\r\n    }\r\n         const checkPagination: any = categories?.length > 10;\r\n     \r\n    return <>\r\n\r\n        {privileges?.create&&<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateCategory}\r\n        >\r\n           <FileAddFilled />\r\n            Create Category\r\n        </Button>}\r\n\r\n\r\n\r\n    <Table\r\n    rowKey={'id'}\r\n    scroll={{ x: 480 }}\r\n    pagination={checkPagination}\r\n    columns={columns} \r\n    dataSource={categories} />\r\n  \r\n     {!loading && <EditCategory visible={isShowEditCategory} categoryInfo={categoryInfo} toggleVisible={toggleShowEditCategory}  />}\r\n    \r\n     {!loading && <CreateCategory authUser={authUser} visible={isShowCreateCategory} categoryInfo={categoryInfo} toggleVisible={toggleShowCreateCategory} />}\r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(Categories);","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\CreateCategory.tsx",["1503"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\nimport { GET_CATEGORIES, CREATE_CATEGORY } from \"../../graphql/category\";\r\nimport { LanguageData } from '../CreatePost/LanguageData';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CreateCategoryModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateCategoryMutation] = useMutation(CREATE_CATEGORY);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n        \r\n        \r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            creatorId: props.authUser?.id,\r\n            lang: values.lang\r\n  \r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateCategoryMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getCategories } = cache.readQuery({ query: GET_CATEGORIES, variables: {\r\n                      authUserId: null,\r\n                      skip: 0,\r\n                      limit: 0\r\n                  } });\r\n   \r\n                   const newCategory = data?.createCategory;\r\n\r\n                   cache.writeQuery({\r\n                       query: GET_CATEGORIES,\r\n                       variables: {\r\n                           authUserId: null,\r\n                           skip: 0,\r\n                           limit: 0\r\n                       },\r\n                       data: { \r\n                           getCategories: {\r\n                           categories: [...getCategories.categories, newCategory]\r\n                       }}\r\n                   });\r\n   \r\n               }\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added Category  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        };\r\n        \r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Category'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Language'}\r\n                    name=\"lang\"\r\n                    rules={[\r\n                        { required: true, message: 'Language is empty.' },\r\n                       \r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Language\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n            \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {LanguageData.length > 0 ? LanguageData.map((language: any) => {\r\n                        return(\r\n                            <Option   key={language.id} value={`${language.lang}`}>{language?.value}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateCategory= connect(mapStateToProps, {})(CreateCategoryModal);\r\n\r\nexport default CreateCategory;","D:\\labc-web\\labc-web-admin\\src\\components\\Category\\EditCategory.tsx",["1504"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message, Select } from 'antd';\r\nimport { GET_CATEGORIES, UPDATE_CATEGORY } from \"../../graphql/category\";\r\nimport { LanguageData } from '../CreatePost/LanguageData';\r\n\r\n\r\nconst { Option } = Select;\r\nconst EditCategoryModal = (props: any) => {\r\n    const [EditCategoryMutation] = useMutation(UPDATE_CATEGORY)\r\n    const [form] = Form.useForm();\r\n    const [langKey, setLangKey] = useState('');\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n       \r\n          name: props.categoryInfo.name,\r\n          introduction: props.categoryInfo.introduction,\r\n          lang: props.categoryInfo.lang,\r\n       \r\n\r\n       });\r\n\r\n       setLangKey(props.categoryInfo.lang);\r\n\r\n    }, [props]);\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n \r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n        const lang_Key = values.lang || langKey;\r\n        const edit__Input = {\r\n            id: props.categoryInfo.id,\r\n            name: values.name,\r\n            introduction: values.introduction,\r\n            creatorId: props.categoryInfo?.creator?.id,\r\n            lang: lang_Key\r\n  \r\n        }\r\n\r\n        const { data, errors } = await EditCategoryMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_CATEGORIES,\r\n                variables: {\r\n                    authUserId: null,\r\n                    skip: 0,\r\n                    limit: 0\r\n                },\r\n           }],\r\n           awaitRefetchQueries: true\r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Updated Category  Successfully!')\r\n\r\n            onCancel();\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit Category'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    lang: langKey || props.categoryInfo?.lang\r\n                 }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Introduction'}\r\n                    name=\"introduction\"\r\n                    rules={[\r\n                        { required: true, message: 'Introduction is empty.' },\r\n                        { min: 3, message: 'Introduction must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Introduction' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Language'}\r\n                    name=\"lang\"\r\n                    rules={[\r\n                        { required: true, message: 'Language is empty.' },\r\n                       \r\n                    ]}\r\n                    >\r\n                    \r\n                    <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Language\"\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                    {LanguageData.length > 0 ? LanguageData.map((language: any) => {\r\n                        return(\r\n                            <Option   key={language.id} value={`${language.lang}`}>{language?.value}</Option>\r\n                        )\r\n                    }):null}\r\n            \r\n                </Select>\r\n                        \r\n                    \r\n                    </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditCategory= connect(mapStateToProps, {})(EditCategoryModal);\r\n\r\nexport default EditCategory;","D:\\labc-web\\labc-web-admin\\src\\utils\\getLanguage.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\User\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\User\\Users.tsx",["1505","1506","1507","1508"],"import { Table, Input, Button, Space, Tag, Divider, Popconfirm, message } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { graphql } from 'react-apollo';\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { SearchOutlined, EditOutlined, DeleteOutlined, UserAddOutlined, DeleteFilled } from '@ant-design/icons';\r\n// import User from './User';\r\nimport { GET_USERS, DELETE_USER } from '../../graphql/user';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport CreateUser from \"./CreateUser\";\r\nimport EditUser from \"./EditUser\";\r\nimport { useMutation } from '@apollo/client';\r\nimport Loading from '../Loading';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Users = ({ users,  loadingUsers, authUser }: any) => {\r\n\r\n  let searchInput = useRef(null);\r\n  \r\n  const { privileges } = authUser;\r\n \r\n  const [DeleteUser] = useMutation(DELETE_USER);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchedColumn, setSearchedColumn] = useState('');\r\n  const [isShowViewDetail, setIsShowViewDetail] = useState(false);\r\n  const [isShowCreateUser, setIsShowCreateUser] = useState(false);\r\n  const [isShowEditUser, setIsShowEditUser] = useState(false);\r\n\r\n  const [userInfo, setUserInfo] = useState({});\r\n\r\n  const data = users?.getUsers;\r\n\r\n\r\n  const getColumnSearchProps = (dataIndex: any) => ({\r\n\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n\r\n  \r\n      return(\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            // ref={node => {\r\n            //   searchInput = node;\r\n            // }}\r\n            ref={searchInput}\r\n            placeholder={`Search ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Space>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n              icon={<SearchOutlined />}\r\n              size=\"small\"\r\n              style={{ width: 90 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      )\r\n    },\r\n    filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value: any, record: any) =>\r\n      record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : '',\r\n    onFilterDropdownVisibleChange: (visible: boolean) => {\r\n\r\n      if (visible) {\r\n        setTimeout(() => searchInput.current.select(), 500);\r\n      }\r\n    },\r\n    render: (text: string) =>\r\n      searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0]);\r\n    setSearchedColumn(dataIndex);\r\n  \r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n\r\n    setSearchText('')\r\n  };\r\n\r\n\r\n  const toggleShowViewDetail = (visible: boolean) => {\r\n      setIsShowViewDetail(visible);\r\n  }\r\n\r\n  const handleViewUser = (record: object) => {\r\n      toggleShowViewDetail(true);\r\n      setUserInfo(record);\r\n  }\r\n\r\n  const toggleShowCreateUser = (visible: boolean) => {\r\n    setIsShowCreateUser(visible);\r\n}\r\n\r\nconst handleCreateUser = (record: object) => {\r\n    toggleShowCreateUser(true);\r\n\r\n}\r\n\r\nconst toggleShowEditUser = (visible: boolean) => {\r\n  setIsShowEditUser(visible);\r\n}\r\n\r\nconst handleEditUser = (record: object) => {\r\n  toggleShowEditUser(true);\r\n  setUserInfo(record);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleDeleteUser = async (record: any) => {\r\n\r\n const { data } =  await DeleteUser({\r\n     variables: {\r\n       input: {\r\n         id: record?.id\r\n       }\r\n     },\r\n     refetchQueries: [{\r\n      query: GET_USERS,\r\n      variables: {\r\n        userId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      },\r\n    }],\r\n     awaitRefetchQueries: true\r\n  \r\n   })\r\n\r\nif(data) {\r\n  message.success('Delete User Successfully!')\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nconst ActionObj = (privileges?.read || privileges?.create || privileges?.update || privileges?.delete)?{\r\n  title: `${(privileges?.read || privileges?.create||privileges?.update||privileges?.delete)?'Action':''}`,\r\n  key: 'action',\r\n  render: ( record: any) => (       \r\n    <div>\r\n          \r\n         {privileges?.update&&<span>\r\n            <EditOutlined />\r\n            {\" \"}\r\n            <Tag  color={\"blue\"} \r\n            onClick={() => handleEditUser(record)}\r\n            >\r\n                <a>\r\n                Edit\r\n                </a>\r\n            </Tag>\r\n           </span>}\r\n\r\n\r\n\r\n\r\n\r\n   \r\n        {privileges?.delete&&\r\n              <Popconfirm title='Are you Sure to Delete？' \r\n              icon={<DeleteFilled color={'red'} />}\r\n              onConfirm={() => handleDeleteUser(record)} \r\n              >\r\n              <a>\r\n              <span className='my-a'>\r\n                  <Divider type='vertical' />\r\n                  <DeleteOutlined />\r\n                \r\n                   <Tag color={'red'}>\r\n                   Delete\r\n                   </Tag>\r\n              </span>\r\n              </a>\r\n             </Popconfirm>\r\n        }\r\n\r\n   \r\n    </div>\r\n  ),\r\n}:{};\r\n\r\n\r\n    const columns = [\r\n      {\r\n        title: 'Avatar',\r\n        dataIndex: 'avatar_url',\r\n        key: 'avatar_url',\r\n        align: \"center\" as \"center\",\r\n        width: '5%',\r\n        render: (avatar_url: string) => (\r\n         <Avatar shape=\"square\" src={avatar_url} />\r\n        ),\r\n        // ...getColumnSearchProps('userId'),\r\n      },\r\n      {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '12%',\r\n        ...getColumnSearchProps('name'),\r\n      },\r\n      {\r\n          title: \"Email\",\r\n          dataIndex: \"email\",\r\n          key: \"email\",\r\n          width: '12%',\r\n          ...getColumnSearchProps('email'),\r\n      },\r\n      // {\r\n      //   title: 'Department',\r\n      //   dataIndex: 'department',\r\n      //   key: 'department',\r\n      //   width: '10%',\r\n      //   render: (department: any) => (\r\n      //     <span>\r\n           \r\n      //           <Tag color={'geekblue'} key={'department'}>\r\n      //              {department&&department.name}\r\n      //           </Tag>\r\n\r\n      //     </span>\r\n      //   ),\r\n        \r\n      // },\r\n      \r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n      \r\n        width: '8%',\r\n        ...getColumnSearchProps('gender'),\r\n      },\r\n      ActionObj\r\n     \r\n    ];\r\n\r\n    const newColumns = columns.filter(value => JSON.stringify(value) !== '{}');\r\n   \r\n    const checkPagination: any = data?.length > 10;\r\n\r\n    if(loadingUsers) {\r\n      return <Loading />\r\n    }\r\n    return <>\r\n\r\n            {privileges?.create&&<Button\r\n              type={'primary'}\r\n              style={{\r\n                        margin: '1rem 0rem'\r\n                        }}\r\n                        onClick={handleCreateUser}\r\n                        >\r\n              <UserAddOutlined />\r\n                 Create User\r\n             </Button>}\r\n\r\n             \r\n    <Table \r\n     columns={newColumns}\r\n     scroll={{ x: 500 }}\r\n     pagination={checkPagination}\r\n     dataSource={data}   \r\n     bordered\r\n     rowKey='id' />\r\n    \r\n    {/* {!loadingUsers &&  <User visible={isShowViewDetail} userInfo={userInfo} toggleVisible={toggleShowViewDetail}  />} */}\r\n   \r\n    {!loadingUsers && privileges?.create&& <CreateUser visible={isShowCreateUser} userInfo={userInfo} toggleVisible={toggleShowCreateUser}  />}\r\n    {!loadingUsers && privileges?.update&& <EditUser  visible={isShowEditUser} userInfo={userInfo} toggleVisible={toggleShowEditUser} />}\r\n\r\n   \r\n    </>;\r\n  \r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\nconst UsersPages = connect(MapStateToProps, {})(Users);\r\nexport default compose(\r\n  graphql(GET_USERS, {\r\n    options: (props) => ({\r\n      variables: {\r\n        userId: null,\r\n        skip: 0,\r\n        limit: 0\r\n      }\r\n    }),\r\n    props: ({ data }) => ({\r\n      loadingUsers: data.loading,\r\n      users: data\r\n    })\r\n  })\r\n)(UsersPages);","D:\\labc-web\\labc-web-admin\\src\\components\\User\\EditUser.tsx",["1509","1510","1511","1512"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\n\r\nimport Avatar from '../Students/Avatar';\r\n// import { CREATE_UNI_GOVERNANCE, GET_GROUP_UNI_GOV } from \"../../../src/graphql/supreme\";\r\nimport { UPDATE_USER, GET_USERS } from \"../../graphql/user\";\r\nimport { GET_DEPARTMENTS } from \"../../graphql/department\";\r\nimport Loading from '../Loading';\r\nimport { PrivilegesDetect } from '../../utils/PrivilegesDetect';\r\n\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst EditUserModal = (props: any) => {\r\n    const [EditUserMutation] = useMutation(UPDATE_USER);\r\n    const [defaultPrivileges, setDefaultPrvileges] = useState([]);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n          fullName: props.userInfo.fullName,\r\n          name: props.userInfo.name,\r\n          email: props.userInfo.email,\r\n          gender: props.userInfo.gender,\r\n          role: props.userInfo.role,\r\n          privileges: PrivilegesDetect(props?.userInfo?.privileges)\r\n          \r\n       });\r\n\r\n     \r\n       setImg_Src(props?.userInfo?.avatar_url)\r\n    }, [props.userInfo]);\r\n\r\n    useEffect(() => {\r\n        const myData = PrivilegesDetect(props?.userInfo?.privileges)\r\n       \r\n        setDefaultPrvileges(myData);\r\n             \r\n    }, [props?.userInfo?.privileges]);\r\n\r\n    // let privileges_ = PrivilegesDetect(props?.userInfo?.privileges);\r\n\r\n    console.log(\"here si privileges__:\", defaultPrivileges)\r\n    const [img_src, setImg_Src] = useState('');\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        setDefaultPrvileges([]);\r\n        form.resetFields();\r\n        props.toggleVisible(false);\r\n\r\n      \r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    };\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n        \r\n        const privileges_Value = {\r\n            create: values.privileges?.includes('create') || defaultPrivileges?.includes('create'),\r\n            read: values.privileges?.includes('read') || defaultPrivileges?.includes(\"read\"),\r\n            update: values.privileges?.includes('update') || defaultPrivileges?.includes(\"update\"),\r\n            delete: values.privileges?.includes('delete') || defaultPrivileges?.includes(\"delete\")\r\n\r\n        };\r\n\r\n        const edit__Input = {\r\n\r\n            id: props.userInfo?.id,\r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            avatar_url: img_src, \r\n            gender: values.gender,\r\n            privileges: privileges_Value\r\n           \r\n            \r\n        };\r\n\r\n        const { data, errors } = await EditUserMutation({\r\n            variables: {\r\n                input: edit__Input\r\n            },\r\n            refetchQueries: [{\r\n\r\n                query: GET_USERS,\r\n                variables: {\r\n                   userId: null,\r\n                   skip: 0,\r\n                   limit: 0\r\n                },\r\n            }],\r\n         awaitRefetchQueries: true\r\n        });\r\n\r\n        if(data && !errors) {\r\n            message.success('Edit User  Successfully!')\r\n            setImg_Src('');\r\n        \r\n            onCancel();\r\n\r\n             if(img_src !== props?.userInfo?.avatar_url) {\r\n               return window.location.reload(false);\r\n             }\r\n          }\r\n    }\r\n  \r\n    \r\n\r\n\r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n     \r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                // forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Edit User Account'\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key={'back'} onClick={onCancel}> Cancel </Button>,\r\n                    <Button key={'submit'} type={'primary'} onClick={handleOk}> Submit </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                initialValues={{ \r\n                    // privileges: PrivilegesDetect(),\r\n                    privileges: defaultPrivileges,\r\n                    gender: props.userInfo?.gender\r\n                 }}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n\r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)}\r\n                           edit={true}\r\n                           resetFile={!img_src} \r\n                           image_src={props.userInfo.avatar_url}\r\n\r\n                           />\r\n                       \r\n\r\n                            \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    \r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       {/* <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item> */}\r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                   </Form.Item>\r\n\r\n                   {/** Role */}\r\n\r\n                   \r\n                    <Form.Item label={'Role'} \r\n                            name=\"role\"\r\n                            rules={[\r\n                                { required: true, message: 'Role is empty.' }\r\n                            ]}\r\n                          >\r\n                       \r\n                        <Select\r\n                                showSearch\r\n                                style={{ width: 200 }}\r\n                                placeholder=\"Select User Role\"\r\n                                optionFilterProp=\"children\"\r\n                            \r\n                                filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            \r\n                                        <Option value={100}>Admin</Option>\r\n                                        <Option value={10}>Editor</Option>\r\n                \r\n                          </Select>\r\n                    \r\n                        </Form.Item>\r\n\r\n                           {/** User Privileges */}\r\n\r\n                    <Form.Item label={'Privileges'} \r\n                            name=\"privileges\"\r\n                            rules={[\r\n                                { required: true, message: 'Privileges is empty.' },\r\n                            ]}\r\n                          >\r\n                       \r\n                        <Select\r\n                                showSearch\r\n                                mode={\"multiple\"}\r\n                                style={{ width: 200 }}\r\n                                placeholder=\"Select User Privileges\"\r\n                                optionFilterProp=\"children\"\r\n                             \r\n                                filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            \r\n                                        <Option value={'create'}> Create </Option>\r\n                                        <Option value={'read'}> Read </Option>\r\n                                        <Option value={'update'}> Update </Option>\r\n                                        <Option value={'delete'}> Delete </Option>\r\n\r\n                          </Select>\r\n                        </Form.Item>\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst EditUser= connect(mapStateToProps, {})(EditUserModal);\r\n\r\nexport default EditUser;","D:\\labc-web\\labc-web-admin\\src\\components\\User\\CreateUser.tsx",["1513","1514"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Select,   Form, Input, message, Button } from 'antd';\r\n\r\nimport Avatar from '../Students/Avatar';\r\n\r\nimport { GET_USERS, SIGN_UP } from \"../../graphql/user\";\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nconst CreateUserModal = (props: any) => {\r\n    const [CreateUserMutation] = useMutation(SIGN_UP)\r\n    const [form] = Form.useForm();\r\n\r\n    console.log(\"here is prps: \", props)\r\n    useEffect(() => {\r\n       form.setFieldsValue({\r\n        \r\n       })\r\n    }, [props]);\r\n\r\n    const [img_src, setImg_Src] = useState('');\r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n    const handleSetImage = (url: any) => {\r\n\r\n        setImg_Src(url);\r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n     \r\n            if(img_src === ''){\r\n                message.error('Please Upload Avatar!!!')\r\n                return false\r\n            }\r\n\r\n        const create__Input = {\r\n        \r\n            fullName: values.fullName,\r\n            email: values.email,\r\n            name: values.name,\r\n            password: values.password,\r\n            avatar_url: img_src, \r\n            gender: values.gender,\r\n            role: values.role,\r\n            logged: false,\r\n            privileges: {\r\n                create: values.privileges?.includes('create'),\r\n                read: values.privileges?.includes('read'),\r\n                update: values.privileges?.includes('update'),\r\n                delete: values.privileges?.includes('delete')\r\n\r\n            }\r\n        }\r\n        const { data, errors } = await CreateUserMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            update: (cache, { data }) => {\r\n                let { getUsers } = cache.readQuery({\r\n                    query: GET_USERS,\r\n                    variables: {\r\n                        userId: null, \r\n                        skip: 0,\r\n                        limit: 0\r\n                    }\r\n                });\r\n                const newUser = data.signup?.user;\r\n                cache.writeQuery({\r\n                    query: GET_USERS,\r\n                    variables: {\r\n                        userId: null,\r\n                        skip: 0,\r\n                        limit: 0,\r\n                     \r\n                    },\r\n                    data: { getUsers: [...getUsers, newUser]\r\n                    }\r\n                })\r\n            }\r\n        //     refetchQueries: [{\r\n    \r\n        //         query: GET_USERS,\r\n        //         variables: {\r\n        //            userId: null,\r\n        //            skip: 0,\r\n        //            limit: 0\r\n        //         },\r\n        // }],\r\n        // awaitRefetchQueries: true\r\n        \r\n        });\r\n\r\n\r\n        if(data && !errors) {\r\n            message.success('Added User  Successfully!')\r\n            setImg_Src('');\r\n            onCancel();\r\n          }\r\n\r\n    }\r\n  \r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        }\r\n\r\n        function onChange(value: any) {\r\n            console.log(`selected ${value}`);\r\n          }\r\n\r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                forceRender \r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create User Account'\r\n                centered\r\n                onOk={handleOk}\r\n               \r\n                width={'785px'}\r\n                footer={[\r\n                    <Button key={'back'} onClick={onCancel}>\r\n                        Cancel\r\n                    </Button>,\r\n                    <Button key={'submit'} onClick={handleOk}>\r\n                        Submit\r\n                    </Button>\r\n                ]}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                \r\n                >\r\n\r\n\r\n                    <Form.Item label={'Avatar'}>\r\n                          \r\n                          <Avatar  handleSetImage={(url: any) => handleSetImage(url)} create_img={img_src} resetFile={!img_src} />\r\n                       \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item label={'Full Name'}\r\n                    name=\"fullName\"\r\n                    rules={[\r\n                        { required: true, message: 'full name is empty.' },\r\n                        { min: 3, message: 'full Name must be at least 3 digits' }\r\n                    ]}\r\n                    >\r\n                       \r\n                         <Input\r\n                         maxLength={80}\r\n                         placeholder='Full Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                    {/* email */}\r\n\r\n                    <Form.Item label={'email'}\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: true, message: 'email is empty.' },\r\n                        { min: 3, message: 'email must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='email' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                       {/* password */}\r\n\r\n                       <Form.Item label={'password'}\r\n                    name=\"password\"\r\n                    rules={[\r\n                        { required: true, message: 'password is empty.' },\r\n                        { min: 3, message: 'password must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                type=\"password\"\r\n\r\n                                placeholder='password' />\r\n                    \r\n                    </Form.Item>\r\n\r\n\r\n                  \r\n                      {/* @gender */}\r\n\r\n                      <Form.Item label={'Gender'} \r\n                            name=\"gender\"\r\n                            rules={[\r\n                                { required: true, message: 'Address is empty.' },\r\n                                { min: 3, message: 'Address must be at least 3 digits!' }\r\n                            ]}\r\n                          >\r\n                       \r\n                       <Select\r\n                    \r\n                    showSearch\r\n                    style={{ width: 200 }}\r\n                    placeholder=\"Select a Gender\"\r\n                    optionFilterProp=\"children\"\r\n                  \r\n                    filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                >\r\n                   \r\n                            <Option value=\"Male\">Male</Option>\r\n                            <Option value=\"Female\">Female</Option>\r\n                \r\n            \r\n                </Select>\r\n                        \r\n                        </Form.Item>\r\n\r\n                   {/** Role */}\r\n\r\n                   \r\n                    <Form.Item label={'Role'} \r\n                            name=\"role\"\r\n                            rules={[\r\n                                { required: true, message: 'Role is empty.' }\r\n                            ]}\r\n                          >\r\n                       \r\n                        <Select\r\n                                showSearch\r\n                                style={{ width: 200 }}\r\n                                placeholder=\"Select User Role\"\r\n                                optionFilterProp=\"children\"\r\n                            \r\n                                filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            \r\n                                        <Option value={100}>Admin</Option>\r\n                                        <Option value={10}>Editor</Option>\r\n                \r\n                          </Select>\r\n                    \r\n                        </Form.Item>\r\n\r\n                           {/** User Privileges */}\r\n\r\n                    <Form.Item label={'Privileges'} \r\n                            name=\"privileges\"\r\n                            rules={[\r\n                                { required: true, message: 'Privileges is empty.' },\r\n                            ]}\r\n                          >\r\n                       \r\n                        <Select\r\n                                showSearch\r\n                                mode={\"multiple\"}\r\n                                style={{ width: 200 }}\r\n                                placeholder=\"Select User Privileges\"\r\n                                optionFilterProp=\"children\"\r\n                            \r\n                                filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            \r\n                                        <Option value={'create'}> Create </Option>\r\n                                        <Option value={'read'}> Read </Option>\r\n                                        <Option value={'update'}> Update </Option>\r\n                                        <Option value={'delete'}> Delete </Option>\r\n\r\n                          </Select>\r\n                        </Form.Item>\r\n\r\n\r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateUser= connect(mapStateToProps, {  })(CreateUserModal);\r\n\r\nexport default CreateUser;","D:\\labc-web\\labc-web-admin\\src\\utils\\PrivilegesDetect.ts",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\GetNoticeAndEvents.tsx",["1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525"],"import React, { Component, useState, useEffect, useRef } from 'react';\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { graphql } from 'react-apollo';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport Highlighter from 'react-highlight-words';\r\nimport _ from \"lodash\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nimport { Table, Card, message,  Tag,  Input, Button, Space,  Divider,  Popconfirm } from 'antd';\r\nimport { GET_POSTS, DELETE_POST } from '../../graphql/post';\r\nimport UpdateNoticeandEvents from './UpdateNoticeandEvents';\r\nimport { formatDate } from \"../../utils/date\";\r\nimport { getLanguage } from '../../utils/getLanguage';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst GetNoticeAndEvents = (props: any) =>  {\r\n      let searchInput = useRef(null);\r\n\r\n      const [posts, setPosts] = useState([]);\r\n      const [postsLoading, setPostsLoading] = useState(false);\r\n      const [pagination, setPagination] = useState({\r\n             total: 0,\r\n             current: 1,  //前台分页是从1开始的，后台分页是从0开始的，所以要注意一下\r\n             pageSize: 10,\r\n             showQuickJumper: true\r\n      });\r\n      const [searchText, setSearchText] = useState('');\r\n      const [searchedColumn, setSearchedColumn] = useState('');\r\n      const [postInfo, setPostInfo] = useState({});\r\n      const [ isShowUpdateModal, setIsShowUpdateModal] = useState(false);\r\n      \r\n      const getColumnSearchProps = (dataIndex: any) => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: filterDropdownProps) => {\r\n    \r\n          return(\r\n            <div style={{ padding: 8 }}>\r\n              <Input\r\n                // ref={node => {\r\n                //   searchInput = node;\r\n                // }}\r\n                ref={searchInput}\r\n                placeholder={`Search ${dataIndex}`}\r\n                value={selectedKeys[0]}\r\n                onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n              />\r\n              <Space>\r\n                <Button\r\n                  type=\"primary\"\r\n                  onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                  icon={<SearchOutlined />}\r\n                  size=\"small\"\r\n                  style={{ width: 90 }}\r\n                >\r\n                  Search\r\n                </Button>\r\n                <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                  Reset\r\n                </Button>\r\n              </Space>\r\n            </div>\r\n          )\r\n        },\r\n        filterIcon: (filtered: any) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilter: (value: any, record: any) =>\r\n          record[dataIndex]\r\n            ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n            : '',\r\n        onFilterDropdownVisibleChange: (visible: boolean) => {\r\n    \r\n          if (visible) {\r\n            setTimeout(() => searchInput.current.select(), 100);\r\n          }\r\n        },\r\n        render: (text: string) =>\r\n          searchedColumn === dataIndex ? (\r\n            <Highlighter\r\n              highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n              searchWords={[searchText]}\r\n              autoEscape\r\n              textToHighlight={text ? text.toString() : ''}\r\n            />\r\n          ) : (\r\n            text\r\n          ),\r\n      });\r\n    \r\n      const handleSearch = (selectedKeys: any, confirm: any, dataIndex: any) => {\r\n        confirm();\r\n        setSearchText(selectedKeys[0]);\r\n        setSearchedColumn(dataIndex);\r\n      \r\n      };\r\n    \r\n      const handleReset = (clearFilters: any) => {\r\n        clearFilters();\r\n    \r\n        setSearchText('')\r\n      };\r\n\r\n      useEffect((page = 1) => {\r\n          setPostsLoading(false);\r\n          setPosts(props.posts);\r\n          setPagination({\r\n            ...pagination,\r\n            total: props.posts.total,\r\n            current: page\r\n          })\r\n      }, [props])\r\n\r\n\r\n         const toggleShowUpdateModal = (visible: boolean) => {\r\n            setIsShowUpdateModal(visible);\r\n        }\r\n\r\n       const handleUpatePost = (record: any) => {\r\n           toggleShowUpdateModal(true);\r\n           setPostInfo(record)\r\n      }\r\n\r\n\r\n        const handleDeletePost = async (record: any) => {\r\n          \r\n    \r\n\r\n        const { data } = await props.deletePostMutation({\r\n            variables: {\r\n              input: { id: record.id },\r\n            },\r\n          });\r\n          if(data) {\r\n            return message.success('Delete SuccessFully!')\r\n          }\r\n\r\n\r\n         }\r\n\r\n         const closeInfoModal = () => {\r\n\r\n         }\r\n\r\n      const columns = [\r\n            {\r\n                title: 'Background',\r\n                dataIndex: 'bg_img',\r\n                key: 'bg_img',\r\n                render: (avatar_url: string) => {\r\n                    // console.log('here is img', avatar_url)\r\n                    return(\r\n                 \r\n                    // <Avatar src={avatar_url}/>\r\n                    <img alt=\"bg\" src={avatar_url} className=\"bg-img\" style={{ width: '120px'}} />\r\n                   )\r\n                }\r\n            },\r\n             {\r\n                title: 'Title',\r\n                dataIndex: 'title',\r\n                key: 'slug',\r\n                render: (text: string) => <a>{text}</a>,\r\n                ...getColumnSearchProps('title'),\r\n              },\r\n              // {\r\n              //   title: 'Content',\r\n              //   dataIndex: 'content',\r\n              //   key: 'content',\r\n              //   render: content => (\r\n              //       <span>\r\n                     \r\n              //             <Tag color={'blue'} key={'ven_name'}>\r\n              //                {/* {this.Member_gender(gender)} */}\r\n              //                {content}\r\n              //             </Tag>\r\n  \r\n              //       </span>\r\n              //     ),\r\n              // },\r\n              {\r\n                title: 'Date',\r\n                dataIndex: 'createdAt',\r\n                key: 'createdAt',\r\n                render: (text:string) => <a> {formatDate(text)} </a>,\r\n              },\r\n              {\r\n                title: 'Language',\r\n                dataIndex: 'lang',\r\n                key: 'lang',\r\n                render: (lang:string) => <a>\r\n                       <Tag color={'green'} key={'lang'}>\r\n                       {getLanguage(lang)}\r\n                        </Tag>\r\n                    </a>,\r\n              \r\n              },\r\n              {\r\n                title: 'Author',\r\n                dataIndex: 'author',\r\n                key: 'author',\r\n                render: (author: any) => (\r\n                  <span>\r\n                   \r\n                        <Tag color={'geekblue'} key={'author'}>\r\n                           {author&&author.name}\r\n                        </Tag>\r\n\r\n                  </span>\r\n                ),\r\n              },\r\n              {\r\n                title: 'Category',\r\n                dataIndex: 'category',\r\n                key: 'category',\r\n                render: (category: any) => (\r\n                    <span>\r\n                     \r\n                          <Tag color={'geekblue'} key={'position'}>\r\n                             {category&&category.name}\r\n                          </Tag>\r\n  \r\n                    </span>\r\n                  ),\r\n              },\r\n              {\r\n                title: 'Action',\r\n                key: 'action',\r\n                render: (text: string, record: any) => (\r\n                  <span>\r\n                   \r\n                    <Tag  color={\"green\"} onClick={() => handleUpatePost(record)} >\r\n                        <a>\r\n                        Edit\r\n                        </a>\r\n                     </Tag>\r\n                 \r\n                  \r\n                            <Popconfirm title='Are you Sure to Delete？' onConfirm={() => handleDeletePost(record)}>\r\n                            <a>\r\n                            <span className='my-a'>\r\n                                <Divider type='vertical' />\r\n                                {/* <Icon type='delete' /> */}\r\n                                delete\r\n                            </span>\r\n                            </a>\r\n                           </Popconfirm>\r\n                 \r\n                  </span>\r\n                ),\r\n              },\r\n          ];\r\n\r\n        //  console.log('here is posts:', this.props.posts.getPosts);\r\n          // console.log('here is Post:', columns);\r\n\r\n          const allPosts = props.posts.getPosts;\r\n          const checkPagination: any =  allPosts?.length > 10;\r\n\r\n      return (\r\n            <div>\r\n                  <Card bordered={false}>\r\n\r\n                  <div style={{ marginBottom: 16, textAlign: 'right' }}>\r\n            \r\n                  </div>\r\n\r\n                  <Table\r\n                  bordered\r\n                \r\n                  rowKey='id'\r\n                  columns={columns}\r\n                  dataSource={allPosts}\r\n                  loading={props.loadingPosts}\r\n                  // rowSelection={rowSelection}\r\n                  pagination={checkPagination}\r\n                  // pagination={pagination}\r\n                  // onChange={this.onTableChange}\r\n                  />\r\n                  </Card>\r\n                  <UpdateNoticeandEvents \r\n                  visible={isShowUpdateModal}\r\n                   post={postInfo} \r\n                    toggleVisible={toggleShowUpdateModal} \r\n                    onCancel={closeInfoModal}\r\n\r\n                     />\r\n            </div>\r\n      );\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n      loading: state,\r\n})\r\n\r\nconst MainGetNoticeAndEvents = connect(mapStateToProps, {}) (GetNoticeAndEvents);\r\n\r\nexport default compose(\r\n      graphql(GET_POSTS, {\r\n            options: (props) => ({ variables: {\r\n                  skip: 0,\r\n                  limit: 0,\r\n            }}),\r\n            props: ({ data }) => ({\r\n                  loadingPosts: data.loading,\r\n                  posts: data\r\n            })\r\n      }),\r\n      graphql(DELETE_POST, {\r\n        name: \"deletePostMutation\",\r\n        options: ({ values }: any) => ({\r\n          refetchQueries: [\r\n            {\r\n              query: GET_POSTS,\r\n              variables: {\r\n                 skip: 0,\r\n                 limit: 0,\r\n              }\r\n            }\r\n          ]\r\n        })\r\n      })\r\n)(MainGetNoticeAndEvents);\r\n","D:\\labc-web\\labc-web-admin\\src\\pages\\GetNoticeAndEvents\\UpdateNoticeandEvents.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\EditPost\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\EditPost\\EditPost.tsx",["1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541"],"import React, { useEffect, useState, Fragment } from 'react';\r\nimport moment from 'moment';\r\nimport { message } from 'antd';\r\nimport  { CKEditor }  from '@ckeditor/ckeditor5-react';\r\n\r\n import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\r\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\r\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\r\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\r\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\r\n\r\nimport Underline from \"@ckeditor/ckeditor5-basic-styles/src/underline\";\r\nimport Strikethrough from \"@ckeditor/ckeditor5-basic-styles/src/strikethrough\";\r\nimport BlockQuote from \"@ckeditor/ckeditor5-block-quote/src/blockquote\";\r\nimport Link from \"@ckeditor/ckeditor5-link/src/link\";\r\nimport MediaEmbed from \"@ckeditor/ckeditor5-media-embed/src/mediaembed\";\r\nimport PasteFromOffice from \"@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice\";\r\nimport Heading from \"@ckeditor/ckeditor5-heading/src/heading\";\r\nimport Font from \"@ckeditor/ckeditor5-font/src/font\";\r\nimport Image from \"@ckeditor/ckeditor5-image/src/image\";\r\nimport ImageStyle from \"@ckeditor/ckeditor5-image/src/imagestyle\";\r\nimport ImageToolbar from \"@ckeditor/ckeditor5-image/src/imagetoolbar\";\r\nimport ImageUpload from \"@ckeditor/ckeditor5-image/src/imageupload\";\r\nimport ImageResize from \"@ckeditor/ckeditor5-image/src/imageresize\";\r\nimport ImageCaption from \"@ckeditor/ckeditor5-image/src/imagecaption\";\r\nimport List from \"@ckeditor/ckeditor5-list/src/list\";\r\nimport Alignment from \"@ckeditor/ckeditor5-alignment/src/alignment\";\r\nimport Table from \"@ckeditor/ckeditor5-table/src/table\";\r\nimport TableToolbar from \"@ckeditor/ckeditor5-table/src/tabletoolbar\";\r\nimport TextTransformation from \"@ckeditor/ckeditor5-typing/src/texttransformation\";\r\nimport Indent from \"@ckeditor/ckeditor5-indent/src/indent\";\r\nimport IndentBlock from \"@ckeditor/ckeditor5-indent/src/indentblock\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { useMutation } from \"@apollo/client\";\r\n\r\nimport _ from \"lodash\";\r\nimport { flowRight as compose } from \"lodash\";\r\nimport { graphql } from \"react-apollo\";\r\n\r\nimport \"../CreatePost/style.less\";\r\n\r\nimport { UploadImageMutation } from \"../../graphql/upload\";\r\nimport { GET_CATEGORIES } from \"../../graphql/category\";\r\nimport { GET_POSTS, UPDATE_POST } from \"../../graphql/post\";\r\n\r\nimport MyUploadAdapter from '../MyUploadAdapter';\r\n\r\n\r\nimport Tag from \"../Tag\";\r\nimport Button from \"../Button\";\r\nimport AddIcon from '../Icons/AddIcon';\r\nimport CloudUploadIcon from '../Icons/CloudUploadIcon';\r\nimport Loading from '../Loading';\r\n\r\nimport \"../TagInput/styles.less\";\r\nimport { LanguageData } from '../CreatePost/LanguageData';\r\nimport { getLanguage } from '../../utils/getLanguage';\r\n\r\n\r\nconst __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\r\nconst __ISIOS__ = navigator.userAgent.match(/iPad|iPhone|iPod/i) ? true : false;\r\n\r\nlet onKeyEvent = false;\r\n\r\nfunction MyCustomUploadAdapterPlugin(editor: any) {\r\n  editor.plugins.get('FileRepository').createUploadAdapter = (loader: any) => {\r\n    return new MyUploadAdapter(loader)\r\n  }\r\n}\r\n\r\n/**\r\n * formatFile name for post image\r\n * @param {*} e\r\n */\r\nconst formatFilenamePost = (filename: string) => {\r\n  // console.log('here is post', filename);\r\n  const date = moment().format(\"YYYYMMDD\");\r\n  const randomString = Math.random().toString(36).substring(2, 7);\r\n  const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\r\n  const newFilename = `images/${cleanFileName}-${randomString}-${date}`;\r\n  return newFilename.substring(0, 60);\r\n};\r\n\r\n\r\n\r\n\r\nconst EditPost = (props: any) => {\r\n  const EditorContentFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"e-content\")) {\r\n      return JSON.parse(localStorage.getItem(\"e-content\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n  // editor title\r\n  // console.log('hre is categories', props)\r\n \r\n  const EditorTitleFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"e-title\")) {\r\n      return JSON.parse(localStorage.getItem(\"e-title\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * get bg url from localStorage\r\n   */\r\n  const EditorBgUrlFromLS = () => {\r\n    if (typeof window === \"undefined\") {\r\n      return false;\r\n    }\r\n    if (localStorage.getItem(\"bgUrl\")) {\r\n      return JSON.parse(localStorage.getItem(\"bgUrl\"));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n  const [input, setInput] = useState({ equ: \"\" });\r\n  const [uploadLoading, setUploadLoading] = useState(false);\r\n  const [tags, setTags] = useState([]);\r\n  const [tagName, setTagName] = useState(\"\");\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [showCategorys, setShowCategorys] = useState(false);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [cursorPosition, setCursorPosition] = useState(0);\r\n  const [showEquation, setShowEquation] = useState(false);\r\n  const [backgroundImageUrl, setBackgroundImageUrl] = useState(EditorBgUrlFromLS() || \"\");\r\n\r\n  const [showLanguage, setShowLanguage] = useState(false);\r\n  const [language, setLanguage] = useState(\"\");\r\n  const [langKey, setLangKey] = useState(\"\");\r\n\r\n\r\n  const [title, setTitle] = useState(EditorTitleFromLS() || \"\");\r\n  const [contents, setContents] = useState(props.post&&props.post.content);\r\n  var bgImgUpload: any;\r\n\r\n\r\n\r\n   const [uploadPostImgMutation] = useMutation(UploadImageMutation);\r\n\r\n  const handleTitleChange = (value: any) => {\r\n    setTitle(value);\r\n    if (typeof window !== \"undefined\") {\r\n      localStorage.setItem(\"e-title\", JSON.stringify(value));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    return setInput({\r\n      ...input,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  let authorId = props.post && props.post.author.id;\r\n  let authUserId = props.authUser && props.authUser.id;\r\n console.log(\"here is langKey:\", props?.post.lang)\r\n  useEffect(() => {\r\n\r\n    if (props.post) {\r\n      \r\n      // if (authUserId !== authorId) {\r\n\r\n      //   return (window.location.href = process.env.REACT_APP_FRONT_END_URL);\r\n      // }\r\n      setContents(props.post.content);\r\n      setBackgroundImageUrl(props.post && props.post.bg_img);\r\n      setTitle(props.post && props.post.title);\r\n      setTags(props.post && props.post.tags);\r\n      setCategoryId(props.post && props.post.category && props.post.category.id);\r\n      setCategoryName(props.post && props.post.category && props.post.category.name);\r\n      setLangKey(props.post?.lang);\r\n      setLanguage(getLanguage(props.post?.lang))\r\n    }\r\n  }, [props.post]);\r\n\r\n  console.log(\"langKey\", langKey)\r\n  useEffect(() => {\r\n      bgImgUpload = document.getElementById(\"bgUpload\");\r\n      bgImgUpload.addEventListener(\"change\", startUploadFile, false);\r\n      return () => {\r\n      bgImgUpload.removeEventListener(\"change\", startUploadFile);\r\n      };\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n      document.addEventListener(\"click\", handleCloseOutside, false);\r\n     \r\n    return () => {\r\n      document.removeEventListener(\"click\", handleCloseOutside, false);\r\n   \r\n    };\r\n  });\r\n\r\n\r\n  const handleCloseOutside = (event: any) => {\r\n    closeOnClickOutside();\r\n  };\r\n\r\n  const closeOnClickOutside = () => {\r\n    setShowCategorys(false);\r\n  };\r\n\r\n  const handleCloseEquation = (e: any) => {\r\n    e.preventDefault();\r\n    setShowEquation(false);\r\n    setInput({\r\n      equ: \"\",\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const startUploadFile =() => {\r\n    if(bgImgUpload.files[0]) {\r\n\r\n     handleBgUploadImg(bgImgUpload.files[0]);\r\n\r\n    }\r\n  }\r\n\r\n  const _onBgImgClick = (e: any) => {\r\n    e.preventDefault();\r\n    // console.log('hreris click', bgImgUpload)\r\n    if(props.authUser) {\r\n      bgImgUpload.click();\r\n    }else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  const handleBgUploadImg = async (file: any) => {\r\n       /**\r\n         * handle Background Image\r\n         */\r\n         if(/^image\\//.test(file.type)) {\r\n           \r\n        // setUploadLoading(true);\r\n        // console.log('hrer is bg img upload', file )\r\n\r\n        const { data } = await uploadPostImgMutation({\r\n          variables: {\r\n            file,\r\n            filename: formatFilenamePost(file.name),\r\n          },\r\n        });\r\n\r\n         let url = data && data.UploadImageReq.image_url;\r\n          setUploadLoading(false);\r\n          setBackgroundImageUrl(url);\r\n          localStorage.setItem(\"bgUrl\", JSON.stringify(url));\r\n      \r\n\r\n         }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const onChangeContents = (contents: any) => {\r\n    let _contents = null;\r\n    if (__ISMSIE__) {\r\n      if (contents.indexOf(\"<p><br></p>\") > -1) {\r\n        _contents = contents.replace(/<p><br><\\/p>/gi, \"<p>&nbsp;</p>\");\r\n      }\r\n    }\r\n\r\n    // console.log('here is content:', contents);\r\n\r\n    setContents(_contents || contents);\r\n    // if (typeof window !== \"undefined\") {\r\n    //   localStorage.setItem(\"e-content\", JSON.stringify(contents));\r\n    // }\r\n  };\r\n  /*for tags*/\r\n  const validateTag = (tagName: any) => {\r\n    // const regex = /^[a-z0-9.\\-_$@*!]{2,20}$/;\r\n    const regex = /^[^~_$@!*%.\\-\\x22].{2,20}$/;\r\n    return regex.test(tagName);\r\n  };\r\n  const sameTag = (tagName: any) => {\r\n    let matched = false;\r\n    tags.map((tag) => {\r\n      if (tag === tagName) matched = true;\r\n    });\r\n    return matched;\r\n  };\r\n  /**add Tag */\r\n  const addTag = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    if (validateTag(tagName)) {\r\n      if (!sameTag(tagName)) {\r\n        const newTags = tags.concat(tagName);\r\n        setTags(newTags);\r\n        setTagName(\"\");\r\n        setErrorMsg(null);\r\n        props.onChange(newTags);\r\n      } else {\r\n        setErrorMsg({\r\n          errorMsg: \"Same Tag!!\",\r\n        });\r\n      }\r\n    } else {\r\n      setErrorMsg({\r\n        errorMsg:\r\n          \"Tags can only contain small letters and numbers. No space or special characters please. Min 4 and max 20 chars.\",\r\n      });\r\n    }\r\n  };\r\n  /**\r\n   * remove Tag\r\n   */\r\n  const removeTag = (position: any) => {\r\n    const newTags = [\r\n      ...tags.slice(0, position),\r\n      ...tags.slice(position + 1, tags.length),\r\n    ];\r\n    setTags(newTags);\r\n    props.onChange(newTags);\r\n  };\r\n  const handleShowCategorys = (e: any) => {\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    setShowCategorys(!showCategorys);\r\n  };\r\n  const handleTagName = (e: any) => {\r\n    setTagName(e.target.value);\r\n  };\r\n\r\n  const handleCategoryChange = (e: any, id: any, name: any) => {\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    setCategoryId(id);\r\n    setCategoryName(name);\r\n    setShowCategorys(false);\r\n  };\r\n  const handleKeyPress = (event: any) => {\r\n    if (event.key === \"Enter\") {\r\n      addTag(event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * render Tags\r\n   */\r\n\r\n  const renderTags = () => {\r\n    return tags.map((tag, i) => {\r\n      return (\r\n        <Tag\r\n          name={tag}\r\n          key={tag}\r\n          withRemove\r\n          removeAction={() => {\r\n            removeTag(i);\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  const renderInput = () => {\r\n    const { maxTagCount } = props;\r\n    if (tags.length < maxTagCount) {\r\n      return (\r\n        <div className=\"inputContainer\">\r\n          <input\r\n            className=\"tagInput\"\r\n            placeholder={\"tags name...\"}\r\n            value={tagName}\r\n            onChange={(e) => handleTagName(e)}\r\n            onKeyPress={(e) => handleKeyPress(e)}\r\n          />\r\n          <Button\r\n            className=\"addButton\"\r\n            onClick={(e: any) => {\r\n              addTag(e);\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n\r\n\r\n  /**\r\n   * handle publish the post\r\n   */\r\n  const handlePublishPost = async (\r\n    slug: string,\r\n    title: string,\r\n    content: string,\r\n    id: string,\r\n    categoryId: string,\r\n    backgroundImageUrl: string,\r\n    tags: string[],\r\n    props: any\r\n  ) => {\r\n\r\n\r\n\r\n    // console.log('hre is content', content, title, categoryId);\r\n\r\n    if(content === \"<p><br></p>\") {\r\n      \r\n      message.warning('Please enter content!');\r\n      return false;\r\n    }\r\n    if(title === \"\") {\r\n      message.warning('Please enter title!');\r\n      return false;\r\n    }\r\n    if(categoryId === \"\") {\r\n      message.warning('Please select the  Category !');\r\n      return false;\r\n      // return props.setAlert(\"Please Select the Category!\", \"danger\")\r\n    }\r\n  \r\n    const Data_ = { slug, title, content, authorId: id,  bg_img: backgroundImageUrl, categoryId, tags, lang: langKey };\r\n   \r\n    const data = await props.updatePostMutation({\r\n      variables: {\r\n        input: Data_,\r\n      },\r\n    });\r\n\r\n\r\n    if(!data) {\r\n      message.warning('Create Failed!');\r\n      return false;\r\n    }\r\n\r\n    if (data) {\r\n    \r\n      setUploadLoading(false);\r\n      message.success('Create Successfully!');\r\n      props.onHandleCancel();\r\n    }\r\n    handleTitleChange(\"\");\r\n    localStorage.setItem(\"bgUrl\", JSON.stringify(\"\"));\r\n    onChangeContents(\"\");\r\n\r\n    // return (window.location.href = `${process.env.REACT_APP_FRONT_END_URL}`);\r\n  \r\n  \r\n  };\r\n  \r\n  \r\n const handleShowLanguage = (e: any) => {\r\n  e.nativeEvent.stopImmediatePropagation();\r\n  setShowLanguage(!showLanguage);\r\n}\r\n  const handleLanguageChange = (lang: string, langKey: string) => {\r\n    setLanguage(lang);\r\n    setLangKey(langKey);\r\n    setShowLanguage(false);\r\n  \r\n  }\r\n\r\n  if(!props.authUser) {\r\n    // return Router.replace('/login');\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log('her is handleOK', props.handleOk)\r\n    if(props.handleOk) {\r\n       handlePublishPost(slug, title, contents, id, categoryId, backgroundImageUrl, tags, props);\r\n    \r\n    }else {\r\n      return;\r\n    }\r\n }, [props.handleOk]);\r\n\r\n const custom_config = {\r\n  extraPlugins: [ MyCustomUploadAdapterPlugin ],\r\n  plugins: [  Essentials,\r\n    Paragraph,\r\n    Bold,\r\n    Italic,\r\n    Heading,\r\n    Indent,\r\n    IndentBlock,\r\n    Underline,\r\n    Strikethrough,\r\n    BlockQuote,\r\n    Font,\r\n    Alignment,\r\n    List,\r\n    Link,\r\n    MediaEmbed,\r\n    PasteFromOffice,\r\n    Image,\r\n    ImageStyle,\r\n    ImageToolbar,\r\n    ImageUpload,\r\n    ImageResize,\r\n    ImageCaption,\r\n\r\n    Table,\r\n    TableToolbar,\r\n    TextTransformation ],\r\n  \r\n  toolbar: {\r\n    items: [\r\n      \"heading\",\r\n    \r\n      \"bold\",\r\n      \"italic\",\r\n      \"underline\",\r\n      'fontSize',\r\n       'fontFamily', \r\n       'fontColor',\r\n        'fontBackgroundColor',\r\n      \"|\",\r\n      \"alignment\",\r\n      \"outdent\",\r\n      \"indent\",\r\n      \"bulletedList\",\r\n      \"numberedList\",\r\n      \"blockQuote\",\r\n      \"|\",\r\n      \"link\",\r\n      \"insertTable\",\r\n      \"imageUpload\",\r\n      \"mediaEmbed\",\r\n      \"|\",\r\n      \"undo\",\r\n      \"redo\"\r\n    ]\r\n  },\r\n  fontSize: {\r\n    options: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 29, 31, 33, 35]\r\n},\r\nfontFamily: {\r\n  options: [\r\n      'default',\r\n      'Ubuntu, Arial, sans-serif',\r\n      'Ubuntu Mono, Courier New, Courier, monospace'\r\n  ]\r\n},\r\nalignment: {\r\n    options: [\"justify\", \"left\", \"center\", \"right\"]\r\n},\r\ntable: {\r\n    contentToolbar: [\"tableColumn\", \"tableRow\", \"mergeTableCells\"]\r\n},\r\nimage: {\r\n    resizeUnit: \"px\",\r\n    toolbar: [\r\n        \"imageStyle:alignLeft\",\r\n        \"imageStyle:full\",\r\n        \"imageStyle:alignRight\",\r\n        \"|\",\r\n        \"imageTextAlternative\"\r\n    ],\r\n    styles: [\"full\", \"alignLeft\", \"alignRight\"]\r\n},\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  const { id, username } = props.authUser;\r\n\r\n  const { slug } = props.post;\r\n\r\n  return (\r\n    <Fragment>\r\n     \r\n\r\n   \r\n     \r\n      <div className=\"main-panel\">\r\n         <MyUploadAdapter uploadImageMutation={uploadPostImgMutation} />\r\n         \r\n          <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"d-title\"\r\n              value={title}\r\n              placeholder={'Title'}\r\n              onChange={(e) => handleTitleChange(e.target.value)}\r\n            />\r\n       \r\n        {/**here is topics section */}\r\n    \r\n        {uploadLoading && <Loading />}\r\n         \r\n          {/* Select Language  */}\r\n\r\n          <div className=\"select-dev\" style={{ borderBottom: '1px solid #ddd'}}>\r\n              {/* Categorys: */}\r\n            \r\n              Language :\r\n              <span className=\"topic-menu\" onClick={(e) => handleShowLanguage(e)}>\r\n                {language === \"\" ? \" --select Language--\" : language}\r\n              </span>\r\n              {   \r\n                showLanguage&&(\r\n                  <ul className=\"list-lang\">\r\n                  {LanguageData.map((lang: any) => {\r\n  \r\n                    return (\r\n                      <li\r\n                      value={lang?.id}\r\n                      onClick={(e) =>\r\n                        handleLanguageChange(lang?.value, lang?.lang)\r\n                      }\r\n                      key={lang?.id}\r\n                    >\r\n                      {\" \"}\r\n                      {lang.value}\r\n                    </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n                )\r\n              }\r\n            </div>\r\n\r\n        {props.loadingCategories ? (\r\n          <Loading />\r\n        ) : (\r\n          <div className=\"select-dev\">\r\n            {/* Categorys: */}\r\n      \r\n            Categories :\r\n            <span className=\"topic-menu\" onClick={(e) => handleShowCategorys(e)}>\r\n              {categoryName === \"\" ? \" --select Categories--\" : categoryName}\r\n            </span>\r\n            {showCategorys && (\r\n              <ul className=\"list-topic\">\r\n                {props.categories.categories.map((topic: any, index: any) => {\r\n                  const my_option = (\r\n                    <li\r\n                      value={topic.id}\r\n                      style={{ display: `${showLanguage?'none': 'block'}`}}\r\n                      onClick={(e) =>\r\n                        handleCategoryChange(e, topic.id, topic.name)\r\n                      }\r\n                      key={index}\r\n                    >\r\n                      {\" \"}\r\n                      {topic.name}\r\n                    </li>\r\n                  );\r\n                  return <Fragment key={index}>{my_option}</Fragment>;\r\n                })}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Here is Background Image  */}\r\n        <div style={{ borderBottom: '1px solid #eee', padding: '1rem', cursor: 'pointer'}} \r\n        onClick={ (e) => _onBgImgClick(e)}>\r\n           Background : {\"   \"}  {!backgroundImageUrl&&<><CloudUploadIcon  /> Upload</>}\r\n             \r\n\r\n           {backgroundImageUrl&&<img src={backgroundImageUrl} style={{ width: 'auto', height: '120px', padding: '8px'}}/>}\r\n        </div>\r\n        <input type='file' id='bgUpload' style={{ display: \"none\" }} />\r\n        {/* here is tags section  */}\r\n        <div className=\"tags-container\">\r\n          <div className=\"tagContainer\">\r\n            <div className={\"label\"}>\r\n              Tags :\r\n              {/* <FormattedMessage\r\n                id=\"user.create.post.tags\"\r\n                defaultMessage=\"Tags\"\r\n              /> */}\r\n            </div>\r\n            {renderTags()}\r\n            {renderInput()}\r\n          </div>\r\n          {errorMsg && <div className={\"errorMsg\"}>{errorMsg.errorMsg}</div>}\r\n        </div>\r\n\r\n        <div className=\"main-content\">\r\n        \r\n        </div>\r\n\r\n        {/* Main Editor  */}\r\n        <CKEditor \r\n         editor={ ClassicEditor }\r\n         data={contents}\r\n\r\n          onReady={ (editor: any) => {\r\n            // You can store the \"editor\" and use when it is needed.\r\n            console.log( 'Editor is ready to use!', editor );\r\n        } }\r\n        onChange={ ( event: any, editor: any ) => {\r\n            const data = editor.getData();\r\n            console.log('here is data', data)\r\n            onChangeContents(data);\r\n        } }\r\n        onBlur={ ( event: any, editor: any ) => {\r\n            console.log( 'Blur.', editor );\r\n        } }\r\n\r\n         config={custom_config} />\r\n\r\n\r\n\r\n        <Button className=\"btn\" onClick={(e: any) => handlePublishPost(slug, title, contents, id,  categoryId, backgroundImageUrl, tags, props)}> Update </Button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nEditPost.defaultProps = {\r\n  value: [],\r\n  maxTagCount: 3,\r\n  onChange: (tags: any) => {},\r\n};\r\nconst mapStateToProps = (state: any) => ({\r\n  authUser: state.auth&&state.auth.user,\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\nconst MainEditPost = connect(mapStateToProps, {})(EditPost);\r\nexport default compose(\r\n  graphql(UPDATE_POST, {\r\n    name: \"updatePostMutation\",\r\n    options: ({ values }: any) => ({\r\n      refetchQueries: [\r\n        {\r\n          query: GET_POSTS,\r\n          variables: {\r\n            // authUserId: id,\r\n            skip: 0,\r\n            limit: 0,\r\n          },\r\n        },\r\n      ],\r\n      ...values,\r\n    }),\r\n  }),\r\n  graphql(GET_CATEGORIES, {\r\n    props: ({ data }: any) => ({\r\n      loadingCategories: data.loading,\r\n      categories: data?.getCategories,\r\n    }),\r\n  })\r\n)(MainEditPost);\r\n\r\n","D:\\labc-web\\labc-web-admin\\src\\utils\\date.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Feedback\\ViewFeedback.tsx",["1542","1543"],"import React, { FC, Fragment, useState } from 'react';\r\nimport { Modal,  Descriptions, Empty, Button, Rate } from 'antd';\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface ViewFeedbackProps {\r\n    visible: boolean,\r\n    toggleVisible: any,\r\n    authUser?: any,\r\n    viewFeedbackInfo: ViewFeedbackInfo\r\n}\r\n\r\ninterface ViewFeedbackInfo {\r\n    id?: any,\r\n    title?: string,\r\n    creator?: string,\r\n    rating?: number,\r\n    viewFeedback_id?: string,\r\n    content?: string,\r\n\r\n}\r\n\r\ntype Props = ViewFeedbackInfo & ViewFeedbackProps;\r\n\r\nconst ViewFeedback: FC<Props> = ({ visible, viewFeedbackInfo, toggleVisible, authUser}) => {\r\n\r\n\r\n     const { privileges } = authUser;\r\n\r\n    \r\n    const onCancel = (): void => {\r\n         toggleVisible(false);\r\n    }\r\n\r\n\r\n    const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 14 },\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n           <Modal\r\n            onCancel={onCancel}\r\n            visible={visible}\r\n            title={`Feedback`}\r\n            centered\r\n            width={'780px'}\r\n            onOk={onCancel}\r\n            footer={[\r\n                <Button key=\"back\" onClick={() => onCancel()}>\r\n                  Return\r\n                </Button>,\r\n             \r\n              ]}\r\n            {...formItemLayout}\r\n            >\r\n            \r\n            {\r\n                viewFeedbackInfo? <>\r\n            \r\n         \r\n             <Descriptions\r\n                \r\n                bordered>\r\n \r\n                  <Descriptions.Item>\r\n\r\n                  \r\n                  <p> <b> Title : </b> {viewFeedbackInfo.title} </p> <hr  className=\"line\" /> <br />\r\n                  <p> <b> Content : </b> {viewFeedbackInfo?.content} </p> <hr  className=\"line\" />  <br />\r\n                  <p> <b> Rating : </b>   <Rate value={viewFeedbackInfo?.rating} disabled />  </p>\r\n                  <p> Feedback By : {viewFeedbackInfo?.creator} </p>\r\n                  </Descriptions.Item>\r\n              </Descriptions>\r\n\r\n\r\n\r\n                </>: <Fragment>\r\n                 \r\n                  <Empty />\r\n              </Fragment>\r\n              \r\n            }\r\n            \r\n         </Modal>\r\n      </>\r\n  )\r\n}\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n    authUser: state?.auth?.user,\r\n}))\r\nexport default connect(MapStateToProps, {})(ViewFeedback);","D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\index.tsx",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\Labcs.tsx",["1544","1545","1546"],"import { Table, Button, Rate } from 'antd';\r\nimport React, { useState, useRef } from 'react';\r\nimport {  useQuery } from \"@apollo/client\";\r\nimport { connect } from \"react-redux\";\r\nimport {  FileAddFilled } from '@ant-design/icons';\r\nimport CreateLabc from './CreateLabc';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Loading from '../Loading';\r\nimport { GET_LABC_BY_TYPE } from '../../graphql/labc';\r\n\r\n\r\ninterface filterDropdownProps {\r\n  setSelectedKeys: any, \r\n  selectedKeys: any,\r\n  confirm: any,\r\n  clearFilters: any\r\n}\r\nconst Categories = ({ authUser }: any) => {\r\n\r\n  const { privileges } = authUser;\r\n  const { t } = useTranslation();\r\n  \r\n  const { data, loading, error } = useQuery(GET_LABC_BY_TYPE, {\r\n    variables: {\r\n       type: \"labc-web\"\r\n    },\r\n    \r\n  \r\n  });\r\n\r\n\r\n  \r\n  const labc = data&&data.getLabcByType;\r\n\r\n  const [isShowCreateLabc, setIsShowCreateLabc] = useState(false);\r\n  \r\n  const toggleShowCreateLabc = (visible: boolean) => {\r\n    setIsShowCreateLabc(visible);\r\n  };\r\n\r\n  const handleReset = (clearFilters: any) => {\r\n    clearFilters();\r\n  };\r\n\r\n\r\n  console.log(\"here is efaef\", labc)\r\nconst handleCreateLabc = (record: object) => {\r\n  \r\n   if(!privileges?.create) return false;\r\n   toggleShowCreateLabc(true);\r\n};\r\n\r\n\r\n  const columns = [\r\n      {\r\n        title: t('p_name'),\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        width: '20%',\r\n\r\n      },\r\n      {\r\n        title: \"Type\",\r\n        dataIndex: 'type',\r\n        key: 'type',\r\n        width: '20%',\r\n\r\n      },\r\n      {\r\n        title: \"Average Rating\",\r\n        dataIndex: \"averageRating\",\r\n        key: \"averageRating\",\r\n        width: \"20%\",\r\n        render: (rating: any) => (\r\n          <span>\r\n               <Rate value={rating} disabled />\r\n\r\n          </span>\r\n        )\r\n      }\r\n    ];\r\n\r\n    if(loading || error) {\r\n      return <Loading />\r\n    }\r\n \r\n    \r\n    return <>\r\n        {privileges?.create&&<Button\r\n         type={'primary'}\r\n         style={{\r\n          margin: '1rem 0rem'\r\n         }}\r\n        onClick={handleCreateLabc}\r\n        >\r\n           <FileAddFilled />\r\n            Create Labc\r\n        </Button>}\r\n\r\n     <Table\r\n      rowKey={'id'}\r\n      scroll={{ x: 480 }}\r\n      pagination={false}\r\n      columns={columns} \r\n      dataSource={[labc]}\r\n\r\n      />\r\n  \r\n     {!loading && <CreateLabc \r\n       authUser={authUser}\r\n       visible={isShowCreateLabc} \r\n       toggleVisible={toggleShowCreateLabc} />}\r\n    </>;\r\n  \r\n};\r\n\r\n\r\nconst MapStateToProps = ((state: any) => ({\r\n  authUser: state?.auth?.user\r\n}))\r\n\r\nexport default connect(MapStateToProps, {})(Categories);","D:\\labc-web\\labc-web-admin\\src\\graphql\\labc.ts",[],"D:\\labc-web\\labc-web-admin\\src\\components\\Labc\\CreateLabc.tsx",["1547"],"import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Modal, Form, Input, message } from 'antd';\r\nimport { GET_LABC_BY_TYPE, CREATE_LABC } from \"../../graphql/labc\";\r\n\r\nconst CreateCategoryModal = (props: any) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [CreateLabcMutation] = useMutation(CREATE_LABC);\r\n\r\n    const onCancel = () => {\r\n        \r\n        form.resetFields()\r\n        props.toggleVisible(false)\r\n\r\n    }\r\n     const handleOk = () => {\r\n     \r\n      const values = form.getFieldsValue();\r\n\r\n      onRegister(values);\r\n      \r\n   \r\n    }\r\n\r\n\r\n const onRegister =  async (values: any) => {\r\n  \r\n\r\n        const create__Input = {\r\n    \r\n            name: values.name,\r\n            type: values.type\r\n\r\n        }\r\n\r\n        const { data, errors } = await CreateLabcMutation({\r\n            variables: {\r\n                input: create__Input\r\n            },\r\n            refetchQueries: [{\r\n    \r\n                query: GET_LABC_BY_TYPE,\r\n                variables: {\r\n                   type: \"labc-web\"\r\n                },\r\n            }],\r\n            awaitRefetchQueries: true\r\n      \r\n        });\r\n\r\n        console.log(\"here is data:\", data)\r\n\r\n        if(data && !errors) {\r\n            message.success('Added LABC  Successfully!')\r\n\r\n\r\n            onCancel();\r\n\r\n\r\n          }\r\n    }\r\n  \r\n      \r\n\r\n\r\n    \r\n   \r\n        const { visible } = props;\r\n\r\n        const formItemLayout = {\r\n            labelCol: { span: 6 },\r\n            wrapperCol: { span: 14 },\r\n        };\r\n        \r\n\r\n        return (\r\n            <>\r\n            <Modal\r\n                onCancel={onCancel}\r\n                visible={visible}\r\n                title='Create Labc '\r\n                centered\r\n                onOk={handleOk}\r\n                // getContainer={false}\r\n                width={'785px'}\r\n            >\r\n                  \r\n                <Form\r\n                form={form}\r\n                {...formItemLayout}\r\n                onFinish={handleOk}\r\n                // initialValues={{ \r\n                //     programme: props.studentInfo?.programme?.id,\r\n                //     gender: props.studentInfo?.gender\r\n                //  }}\r\n                \r\n                >\r\n\r\n                    <Form.Item label={'Name'}\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Name is empty.' },\r\n                        { min: 3, message: 'Name must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Name' />\r\n                    \r\n                    </Form.Item>\r\n\r\n                    <Form.Item label={'Type'}\r\n                    name=\"type\"\r\n                    rules={[\r\n                        { required: true, message: 'Type is empty.' },\r\n                        { min: 3, message: 'Type must be at least 3 digits!' }\r\n                    ]}\r\n                    >\r\n                       \r\n                            <Input\r\n                                maxLength={100}\r\n                                placeholder='Type' />\r\n                    \r\n                    </Form.Item>\r\n\r\n            \r\n\r\n                </Form>\r\n              \r\n            </Modal>\r\n            </>\r\n        );\r\n    }\r\nconst mapStateToProps = (state: any) => ({\r\n\r\n    authUser: state.auth.user\r\n});\r\n\r\nconst CreateCategory= connect(mapStateToProps, {})(CreateCategoryModal);\r\n\r\nexport default CreateCategory;","D:\\KWARM\\antd-cms-dev\\src\\index.tsx",["1548"],"import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport en_US from \"antd/lib/locale/en_US\";\r\n\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport store from \"./store\";\r\nimport \"./i18n\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Preloader from \"./components/Preloader\";\r\n\r\nconst App = lazy(() => import(\"./App\"));\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConfigProvider locale={en_US}>\r\n      <Suspense fallback={<Preloader />}>\r\n        <ThemeSwitcherProvider themeMap={themes} defaultTheme={\"light\"}>\r\n          <App />\r\n        </ThemeSwitcherProvider>\r\n      </Suspense>\r\n    </ConfigProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["1549","1550"],"D:\\KWARM\\antd-cms-dev\\src\\i18n.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\reportWebVitals.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\App.tsx",["1551"],"import { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport { Login } from \"./components/Login\";\r\n\r\nimport { LoadableComponent } from \"./utils/LoadableComponent\";\r\nimport \"./App.less\";\r\nimport \"nprogress/nprogress.css\";\r\n\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\n\r\n// import Loading from './components/Loading';\r\nconst IndexPage = LoadableComponent(import(\"./pages/IndexPage\"));\r\nconst ChangePasswordPage = LoadableComponent(\r\n  import(\"./components/ChangePassword\")\r\n);\r\nconst ForgotPasswordPage = LoadableComponent(\r\n  import(\"./components/ForgotPassword\")\r\n);\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path={\"/login\"} component={Login} />\r\n          <Route\r\n            path={\"/change-password/:token\"}\r\n            component={ChangePasswordPage}\r\n          />\r\n\r\n          <Route path={\"/forgot-password\"} component={ForgotPasswordPage} />\r\n\r\n          <Route path={\"/\"} component={IndexPage} />\r\n\r\n          {/* <PrivateRoute path={\"/\"} component={IndexPage} /> */}\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MapStateToProps = (state: any) => ({\r\n  auth: state.auth,\r\n});\r\nexport default connect(MapStateToProps)(App);\r\n","D:\\KWARM\\antd-cms-dev\\src\\store\\index.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Preloader\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\LoadableComponent.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\PrivateRoute\\index.tsx",["1552"],"D:\\KWARM\\antd-cms-dev\\src\\components\\ChangePassword\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Login\\index.tsx",["1553"],"D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Preloader\\Preloader.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\reducers\\index.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Login\\LoginForm.tsx",["1554","1555","1556"],"D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\ForgotPassword.tsx",["1557","1558","1559","1560","1561"],"D:\\KWARM\\antd-cms-dev\\src\\components\\ChangePassword\\ChangePassword.tsx",["1562","1563","1564","1565","1566"],"import React, { useState } from \"react\";\r\nimport { Form, Input, message, Button } from \"antd\";\r\nimport { Redirect, useParams } from \"react-router\";\r\nimport { CHANGE_PASSWORD } from \"../../graphql/password\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst ChangePassword = ({}: any) => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const { t } = useTranslation();\r\n  const { token }: any = useParams();\r\n\r\n  const handleOk = () => {\r\n    const values = form.getFieldsValue();\r\n\r\n    onRegister(values);\r\n  };\r\n\r\n  const onHandlePasswordChange = (e: any) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const onRegister = async (values: any) => {\r\n    // const { data, errors } = await ChangePasswordMutation({\r\n    //     variables: {\r\n    //          token,\r\n    //          newPassword: values.newPassword\r\n    //     }\r\n    // });\r\n    // if(data?.changePassword && !errors) {\r\n    //     message.success(t('forgot_password.msg_success'))\r\n    //     setSuccess(true);\r\n    //   }\r\n  };\r\n\r\n  const formItemLayout = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { span: 14 },\r\n  };\r\n  const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\n  if (success) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"password-form\">\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        {...formItemLayout}\r\n        onFinish={handleOk}\r\n        // initialValues={{\r\n        //     programme: props.studentInfo?.programme?.id,\r\n        //     gender: props.studentInfo?.gender\r\n        //  }}\r\n      >\r\n        <Form.Item\r\n          label={t(\"forgot_password.new_password\")}\r\n          name=\"newPassword\"\r\n          rules={[\r\n            { required: true, message: \"New Password is empty.\" },\r\n            { min: 6, message: \"New Password must be at least 6 digits!\" },\r\n          ]}\r\n        >\r\n          <Input\r\n            onChange={onHandlePasswordChange}\r\n            maxLength={20}\r\n            type={\"password\"}\r\n            placeholder={t(\"forgot_password.new_password\")}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={t(\"forgot_password.comfirm_password\")}\r\n          name=\"comofirmPassword\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: t(\"forgot_password.req_msg_comfirm_password\"),\r\n            },\r\n            { min: 6, message: t(\"forgot_password.min_msg\") },\r\n            {\r\n              validator: async (_rule, value) => {\r\n                if (\r\n                  value.length >= 6 &&\r\n                  password.toUpperCase() !== value.toUpperCase()\r\n                ) {\r\n                  throw new Error(t(\"forgot_password.p_not_eql\"));\r\n                }\r\n              },\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            maxLength={20}\r\n            type={\"password\"}\r\n            placeholder={t(\"forgot_password.comfirm_password\")}\r\n          />\r\n        </Form.Item>\r\n\r\n        <div className=\"submit-btn\">\r\n          <Button key=\"link\">\r\n            <Link to={\"/\"}>\r\n              {/* Return */}\r\n              {t(\"return\")}\r\n            </Link>\r\n          </Button>\r\n          <Button key=\"submit\" type=\"primary\" onClick={handleOk}>\r\n            {/* Submit */}\r\n            {t(\"submit\")}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n","D:\\KWARM\\antd-cms-dev\\src\\components\\Loading\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\useWindowSize.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MyContent.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MyHeader.tsx",["1567","1568"],"D:\\KWARM\\antd-cms-dev\\src\\reducers\\auth.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\randomNum.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\password.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\user.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\actions\\auth.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Loading\\Loading.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\Setting.tsx",["1569","1570","1571"],"D:\\KWARM\\antd-cms-dev\\src\\actions\\actionTypes.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\LanguageChanger\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Notice\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\ForgotPassword\\ForgotPasswordModal.tsx",["1572","1573","1574"],"D:\\KWARM\\antd-cms-dev\\src\\components\\LanguageChanger\\LanguageChanger.tsx",["1575","1576"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { GlobalOutlined } from \"@ant-design/icons\";\r\nimport \"./style.less\";\r\nimport { Menu } from \"antd\";\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst LanguageChanger = () => {\r\n  let [lang, setLang] = useState(localStorage.getItem(\"LANGUAGE\") || \"en\");\r\n  const { i18n } = useTranslation();\r\n\r\n  const handleChangeLang = useCallback((lang) => {\r\n    i18n.changeLanguage(lang);\r\n    setLang(lang);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    i18n.changeLanguage(lang);\r\n    // @ts-ignore\r\n    // setData(MyProjectsData[lang]);\r\n    localStorage.setItem(\"LANGUAGE\", lang);\r\n  }, [lang]);\r\n\r\n  const displayLanguage = (lang: string) => {\r\n    if (lang === \"en\") {\r\n      return \"Eng\";\r\n    }\r\n    if (lang === \"shn\") {\r\n      return \"Tai\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notice\">\r\n      <Menu mode={\"horizontal\"}>\r\n        <SubMenu\r\n          key={1}\r\n          icon={<GlobalOutlined />}\r\n          title={displayLanguage(lang)}\r\n        >\r\n          <Menu.Item key=\"en\" onClick={() => handleChangeLang(\"en\")}>\r\n            Eng\r\n          </Menu.Item>\r\n          <Menu.Item key=\"shn\" onClick={() => handleChangeLang(\"shn\")}>\r\n            Tai\r\n          </Menu.Item>\r\n        </SubMenu>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LanguageChanger;\r\n","D:\\KWARM\\antd-cms-dev\\src\\components\\Notice\\Notice.tsx",["1577","1578","1579","1580","1581"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Tabs, Dropdown, Badge, Spin, List, Avatar, Tag } from \"antd\";\r\n// import { withApollo } from \"react-apollo\";\r\n// import { ReactComponent as NoticeSvg } from '../../asset/icon/notice.svg';\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { NotificationIcon } from \"../../components/Icons\";\r\nimport { GET_ME } from \"../../graphql/user\";\r\nimport { UPDATE_NOTIFICATION_SEEN } from \"../../graphql/notification\";\r\n// import { getNoticeList } from 'api/layout.api';\r\nimport \"./style.less\";\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst HeaderNoticeComponent = ({ authUser }: any) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [noticeList, setNoticeList] = useState(\r\n    authUser?.newNotifications || []\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [isShowViewFeedback, setIsShowViewFeedback] = useState(false);\r\n  const [feedbackInfo, setFeedbackInfo] = useState({});\r\n\r\n  const noticeListFilter = (type: any) => {\r\n    return noticeList.filter((notice: any) => notice.type === type);\r\n  };\r\n\r\n  const toggleShowViewFeedback = (visible: boolean) => {\r\n    setIsShowViewFeedback(visible);\r\n  };\r\n  const handleViewFeedback = (record: object) => {\r\n    toggleShowViewFeedback(true);\r\n\r\n    setFeedbackInfo(record);\r\n  };\r\n\r\n  const getNotice = async () => {\r\n    setLoading(true);\r\n    // const { status, result } = await getNoticeList();\r\n    setLoading(false);\r\n    // status && setNoticeList(result);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNotice();\r\n  }, []);\r\n\r\n  const handleVisible = (v: any) => {\r\n    setVisible(v);\r\n\r\n    if (!v) {\r\n      setNoticeList([]);\r\n      const updateNotificationSeen = async () => {\r\n        try {\r\n          // const { data } = await client.mutate({\r\n          //   mutation: UPDATE_NOTIFICATION_SEEN,\r\n          //   variables: {\r\n          //     input: {\r\n          //       userId: authUser.id,\r\n          //     },\r\n          //   },\r\n          //   refetchQueries: () => [{ query: GET_ME }],\r\n          // });\r\n          // console.log(\"here si data:\", data);\r\n        } catch (error) {\r\n          console.log(\"here is updateNotification\", error);\r\n        }\r\n      };\r\n      updateNotificationSeen();\r\n    }\r\n  };\r\n\r\n  const tabs = (\r\n    <div>\r\n      <Spin tip=\"Loading...\" indicator={antIcon} spinning={loading}>\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab={`Notification(${noticeList.length})`} key=\"1\">\r\n            <List\r\n              dataSource={noticeList}\r\n              renderItem={(item: any) => (\r\n                <List.Item>\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Avatar size=\"large\">\r\n                        {\" \"}\r\n                        {item?.feedback?.creator?.slice(0, 1)}{\" \"}\r\n                      </Avatar>\r\n                    }\r\n                    title={\r\n                      <a\r\n                        href={item.title}\r\n                        onClick={() => handleViewFeedback(item?.feedback)}\r\n                      >\r\n                        {item?.feedback?.creator} Feedbacked Kwarm Website!\r\n                      </a>\r\n                    }\r\n                    description={item.datetime}\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </TabPane>\r\n\r\n          <TabPane\r\n            tab={`Message(${noticeListFilter(\"message\").length})`}\r\n            key=\"2\"\r\n          >\r\n            <List\r\n              dataSource={noticeListFilter(\"message\")}\r\n              renderItem={(item: any) => (\r\n                <List.Item>\r\n                  <List.Item.Meta\r\n                    avatar={<Avatar src={item.avatar} />}\r\n                    title={<a href={item.title}>{item.title}</a>}\r\n                    description={\r\n                      <div className=\"notice-description\">\r\n                        <div className=\"notice-description-content\">\r\n                          {item.description}\r\n                        </div>\r\n                        <div className=\"notice-description-datetime\">\r\n                          {item.datetime}\r\n                        </div>\r\n                      </div>\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </TabPane>\r\n          <TabPane tab={`Event(${noticeListFilter(\"event\").length})`} key=\"3\">\r\n            <List\r\n              dataSource={noticeListFilter(\"event\")}\r\n              renderItem={(item: any) => (\r\n                <List.Item>\r\n                  <List.Item.Meta\r\n                    title={\r\n                      <div className=\"notice-title\">\r\n                        <div className=\"notice-title-content\">{item.title}</div>\r\n                        {/* <Tag color={EventStatus[item.status]}>{item.extra}</Tag> */}\r\n                      </div>\r\n                    }\r\n                    description={item.description}\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </TabPane>\r\n        </Tabs>\r\n      </Spin>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Dropdown\r\n        overlay={tabs}\r\n        placement=\"bottomRight\"\r\n        trigger={[\"click\"]}\r\n        visible={visible}\r\n        onVisibleChange={handleVisible}\r\n        overlayStyle={{\r\n          width: 320,\r\n          padding: \"8px\",\r\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.15)\",\r\n\r\n          borderRadius: 4,\r\n        }}\r\n      >\r\n        <div className=\"notice\" id=\"notice-center\">\r\n          <Badge count={noticeList.length} overflowCount={999}>\r\n            {/* <NoticeSvg className=\"anticon\" />\r\n             */}\r\n            <NotificationIcon />\r\n            {/* <BellOutlined width={20} height={100} /> */}\r\n          </Badge>\r\n        </div>\r\n      </Dropdown>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderNoticeComponent;\r\n","D:\\KWARM\\antd-cms-dev\\src\\graphql\\notification.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\teacher.ts",[],["1582","1583"],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\staff.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\CloseIcon.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\NotificationIcon.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\IndexPage\\MySider.tsx",["1584","1585"],"D:\\KWARM\\antd-cms-dev\\src\\utils\\renderMenu.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\tabs.tsx",["1586","1587","1588","1589"],"import {\r\n  BarChartOutlined,\r\n  DownloadOutlined,\r\n  StockOutlined,\r\n  TeamOutlined,\r\n  EditTwoTone,\r\n  AppstoreAddOutlined,\r\n  CommentOutlined,\r\n  NotificationOutlined,\r\n  HomeTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport { LoadableComponent } from \"../utils/LoadableComponent\";\r\nconst DashboardPage = LoadableComponent(import(\"../components/Dashboard\"));\r\n\r\ntype tagsOpions = {\r\n  [key: string]: any;\r\n};\r\n\r\nlet menu = [\r\n  {\r\n    name: \"dashboard\",\r\n    icon: <BarChartOutlined />,\r\n    key: \"Dashboard\",\r\n    type: \"all\",\r\n  },\r\n\r\n  {\r\n    name: \"admin_name\",\r\n    icon: <StockOutlined />,\r\n    key: \"Admin\",\r\n    admin: true,\r\n    academic: false,\r\n    type: \"admin\",\r\n    children: [\r\n      {\r\n        name: \"dashboard\",\r\n        icon: <BarChartOutlined />,\r\n        key: \"AdminDashboard\",\r\n        type: \"admin\",\r\n      },\r\n\r\n      {\r\n        name: \"Category\",\r\n        icon: <AppstoreAddOutlined />,\r\n        key: \"Category\",\r\n        type: \"admin\",\r\n      },\r\n\r\n      {\r\n        name: \"admin.user\",\r\n        icon: <TeamOutlined />,\r\n        key: \"User\",\r\n      },\r\n\r\n      {\r\n        name: \"academic.feedbacks\",\r\n        icon: <CommentOutlined />,\r\n        key: \"Feedback\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst tabs: tagsOpions = {\r\n  Dashboard: <DashboardPage />,\r\n};\r\n\r\nexport { menu, tabs };\r\n","D:\\KWARM\\antd-cms-dev\\src\\components\\Dashboard\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\pages\\CreatePost\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\feedback.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\academicYear.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Dashboard\\Dashboard.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\Categories.tsx",["1590","1591"],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\student.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\course.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\download.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\data.ts",[],["1592","1593"],"D:\\KWARM\\antd-cms-dev\\src\\utils\\date.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\post.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\getLanguage.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\labc.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\category.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\EditCategory.tsx",["1594"],"D:\\KWARM\\antd-cms-dev\\src\\components\\Category\\CreateCategory.tsx",["1595"],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\department.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\programme.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\constants\\NottificationType.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\hooks\\useNotitications.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\upload.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\semester.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\PrivilegesDetect.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\programmeTypes.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\EditPost\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\grade.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\sum.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\AddIcon.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\MyUploadAdapter.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\EditPost\\EditPost.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Button\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Tag\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\graphql\\gradeDetail.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Icons\\CloudUploadIcon.tsx",["1596","1597"],"D:\\KWARM\\antd-cms-dev\\src\\components\\Button\\Button.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\assigmentTypes.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\creditDefaultValue.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\Tag\\Tag.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\utils\\classification.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\LanguageData.ts",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\index.tsx",[],"D:\\KWARM\\antd-cms-dev\\src\\components\\CreatePost\\CreatePost.tsx",[],{"ruleId":"1598","replacedBy":"1599"},{"ruleId":"1600","replacedBy":"1601"},{"ruleId":"1602","severity":1,"message":"1603","line":14,"column":7,"nodeType":"1604","messageId":"1605","endLine":14,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1606","line":15,"column":7,"nodeType":"1604","messageId":"1605","endLine":15,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1607","line":16,"column":7,"nodeType":"1604","messageId":"1605","endLine":16,"endColumn":18},{"ruleId":"1608","severity":1,"message":"1609","line":8,"column":45,"nodeType":"1610","messageId":"1611","endLine":8,"endColumn":47},{"ruleId":"1612","severity":1,"message":"1613","line":22,"column":9,"nodeType":"1614","endLine":22,"endColumn":28,"suggestions":"1615"},{"ruleId":"1602","severity":1,"message":"1616","line":9,"column":10,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1617","line":9,"column":20,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":30},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1608","severity":1,"message":"1609","line":12,"column":25,"nodeType":"1610","messageId":"1611","endLine":12,"endColumn":34},{"ruleId":"1608","severity":1,"message":"1609","line":11,"column":25,"nodeType":"1610","messageId":"1611","endLine":11,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1619","line":4,"column":22,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1620","line":50,"column":20,"nodeType":"1604","messageId":"1605","endLine":50,"endColumn":29},{"ruleId":"1621","severity":1,"message":"1622","line":187,"column":17,"nodeType":"1623","endLine":187,"endColumn":35},{"ruleId":"1602","severity":1,"message":"1624","line":52,"column":21,"nodeType":"1604","messageId":"1605","endLine":52,"endColumn":33},{"ruleId":"1612","severity":1,"message":"1625","line":63,"column":6,"nodeType":"1614","endLine":63,"endColumn":18,"suggestions":"1626"},{"ruleId":"1602","severity":1,"message":"1627","line":3,"column":23,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1628","line":3,"column":30,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":37},{"ruleId":"1612","severity":1,"message":"1629","line":28,"column":8,"nodeType":"1614","endLine":28,"endColumn":10,"suggestions":"1630"},{"ruleId":"1612","severity":1,"message":"1631","line":17,"column":10,"nodeType":"1614","endLine":17,"endColumn":12,"suggestions":"1632"},{"ruleId":"1612","severity":1,"message":"1633","line":25,"column":8,"nodeType":"1614","endLine":25,"endColumn":14,"suggestions":"1634"},{"ruleId":"1602","severity":1,"message":"1635","line":3,"column":53,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":56},{"ruleId":"1612","severity":1,"message":"1636","line":23,"column":16,"nodeType":"1614","endLine":23,"endColumn":18,"suggestions":"1637"},{"ruleId":"1602","severity":1,"message":"1638","line":18,"column":7,"nodeType":"1604","messageId":"1605","endLine":18,"endColumn":19},{"ruleId":"1602","severity":1,"message":"1639","line":23,"column":19,"nodeType":"1604","messageId":"1605","endLine":23,"endColumn":29},{"ruleId":"1612","severity":1,"message":"1640","line":51,"column":16,"nodeType":"1614","endLine":51,"endColumn":18,"suggestions":"1641"},{"ruleId":"1612","severity":1,"message":"1636","line":22,"column":16,"nodeType":"1614","endLine":22,"endColumn":18,"suggestions":"1642"},{"ruleId":"1612","severity":1,"message":"1636","line":24,"column":16,"nodeType":"1614","endLine":24,"endColumn":18,"suggestions":"1643"},{"ruleId":"1602","severity":1,"message":"1644","line":54,"column":13,"nodeType":"1604","messageId":"1605","endLine":54,"endColumn":14},{"ruleId":"1602","severity":1,"message":"1645","line":1,"column":44,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":51},{"ruleId":"1602","severity":1,"message":"1646","line":1,"column":53,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":63},{"ruleId":"1602","severity":1,"message":"1647","line":5,"column":26,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":38},{"ruleId":"1602","severity":1,"message":"1648","line":5,"column":40,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":54},{"ruleId":"1602","severity":1,"message":"1639","line":20,"column":11,"nodeType":"1604","messageId":"1605","endLine":20,"endColumn":21},{"ruleId":"1602","severity":1,"message":"1649","line":29,"column":17,"nodeType":"1604","messageId":"1605","endLine":29,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1650","line":29,"column":26,"nodeType":"1604","messageId":"1605","endLine":29,"endColumn":31},{"ruleId":"1602","severity":1,"message":"1651","line":124,"column":9,"nodeType":"1604","messageId":"1605","endLine":124,"endColumn":38},{"ruleId":"1608","severity":1,"message":"1609","line":7,"column":39,"nodeType":"1610","messageId":"1611","endLine":7,"endColumn":41},{"ruleId":"1598","replacedBy":"1652"},{"ruleId":"1600","replacedBy":"1653"},{"ruleId":"1654","severity":1,"message":"1655","line":34,"column":31,"nodeType":"1656","messageId":"1657","endLine":34,"endColumn":33},{"ruleId":"1654","severity":1,"message":"1655","line":34,"column":61,"nodeType":"1656","messageId":"1657","endLine":34,"endColumn":63},{"ruleId":"1602","severity":1,"message":"1658","line":87,"column":7,"nodeType":"1604","messageId":"1605","endLine":87,"endColumn":22},{"ruleId":"1602","severity":1,"message":"1659","line":27,"column":10,"nodeType":"1604","messageId":"1605","endLine":27,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1649","line":11,"column":17,"nodeType":"1604","messageId":"1605","endLine":11,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1650","line":11,"column":26,"nodeType":"1604","messageId":"1605","endLine":11,"endColumn":31},{"ruleId":"1660","severity":1,"message":"1661","line":167,"column":17,"nodeType":"1623","endLine":167,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":177,"column":15,"nodeType":"1623","endLine":177,"endColumn":18},{"ruleId":"1662","severity":1,"message":"1663","line":225,"column":22,"nodeType":"1623","messageId":"1664","endLine":225,"endColumn":64,"fix":"1665"},{"ruleId":"1660","severity":1,"message":"1661","line":197,"column":21,"nodeType":"1623","endLine":197,"endColumn":24},{"ruleId":"1660","severity":1,"message":"1661","line":208,"column":21,"nodeType":"1623","endLine":208,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1618","line":2,"column":35,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":44},{"ruleId":"1602","severity":1,"message":"1666","line":29,"column":8,"nodeType":"1604","messageId":"1605","endLine":29,"endColumn":15},{"ruleId":"1660","severity":1,"message":"1661","line":231,"column":7,"nodeType":"1623","endLine":231,"endColumn":10},{"ruleId":"1660","severity":1,"message":"1661","line":237,"column":7,"nodeType":"1623","endLine":237,"endColumn":10},{"ruleId":"1660","severity":1,"message":"1661","line":242,"column":7,"nodeType":"1623","endLine":242,"endColumn":10},{"ruleId":"1660","severity":1,"message":"1661","line":265,"column":17,"nodeType":"1623","endLine":265,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":277,"column":17,"nodeType":"1623","endLine":277,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":294,"column":15,"nodeType":"1623","endLine":294,"endColumn":18},{"ruleId":"1660","severity":1,"message":"1661","line":307,"column":16,"nodeType":"1623","endLine":307,"endColumn":83},{"ruleId":"1660","severity":1,"message":"1661","line":322,"column":15,"nodeType":"1623","endLine":322,"endColumn":18},{"ruleId":"1660","severity":1,"message":"1661","line":203,"column":11,"nodeType":"1623","endLine":203,"endColumn":14},{"ruleId":"1660","severity":1,"message":"1661","line":215,"column":15,"nodeType":"1623","endLine":215,"endColumn":18},{"ruleId":"1660","severity":1,"message":"1661","line":229,"column":15,"nodeType":"1623","endLine":229,"endColumn":18},{"ruleId":"1660","severity":1,"message":"1661","line":200,"column":27,"nodeType":"1623","endLine":200,"endColumn":30},{"ruleId":"1660","severity":1,"message":"1661","line":210,"column":21,"nodeType":"1623","endLine":210,"endColumn":24},{"ruleId":"1660","severity":1,"message":"1661","line":190,"column":17,"nodeType":"1623","endLine":190,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":202,"column":17,"nodeType":"1623","endLine":202,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":217,"column":15,"nodeType":"1623","endLine":217,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1649","line":28,"column":17,"nodeType":"1604","messageId":"1605","endLine":28,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1650","line":28,"column":26,"nodeType":"1604","messageId":"1605","endLine":28,"endColumn":31},{"ruleId":"1660","severity":1,"message":"1661","line":168,"column":17,"nodeType":"1623","endLine":168,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":184,"column":15,"nodeType":"1623","endLine":184,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1650","line":26,"column":26,"nodeType":"1604","messageId":"1605","endLine":26,"endColumn":31},{"ruleId":"1660","severity":1,"message":"1661","line":161,"column":17,"nodeType":"1623","endLine":161,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":171,"column":15,"nodeType":"1623","endLine":171,"endColumn":18},{"ruleId":"1662","severity":1,"message":"1663","line":220,"column":22,"nodeType":"1623","messageId":"1664","endLine":220,"endColumn":64,"fix":"1667"},{"ruleId":"1602","severity":1,"message":"1649","line":25,"column":17,"nodeType":"1604","messageId":"1605","endLine":25,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1650","line":25,"column":26,"nodeType":"1604","messageId":"1605","endLine":25,"endColumn":31},{"ruleId":"1660","severity":1,"message":"1661","line":160,"column":17,"nodeType":"1623","endLine":160,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":170,"column":15,"nodeType":"1623","endLine":170,"endColumn":18},{"ruleId":"1662","severity":1,"message":"1663","line":224,"column":22,"nodeType":"1623","messageId":"1664","endLine":224,"endColumn":64,"fix":"1668"},{"ruleId":"1602","severity":1,"message":"1669","line":3,"column":10,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":21},{"ruleId":"1602","severity":1,"message":"1670","line":7,"column":10,"nodeType":"1604","messageId":"1605","endLine":7,"endColumn":23},{"ruleId":"1602","severity":1,"message":"1649","line":40,"column":17,"nodeType":"1604","messageId":"1605","endLine":40,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1650","line":40,"column":26,"nodeType":"1604","messageId":"1605","endLine":40,"endColumn":31},{"ruleId":"1612","severity":1,"message":"1629","line":50,"column":9,"nodeType":"1614","endLine":50,"endColumn":23,"suggestions":"1671"},{"ruleId":"1602","severity":1,"message":"1672","line":12,"column":10,"nodeType":"1604","messageId":"1605","endLine":12,"endColumn":14},{"ruleId":"1602","severity":1,"message":"1673","line":24,"column":12,"nodeType":"1604","messageId":"1605","endLine":24,"endColumn":21},{"ruleId":"1612","severity":1,"message":"1629","line":38,"column":8,"nodeType":"1614","endLine":38,"endColumn":15,"suggestions":"1674"},{"ruleId":"1612","severity":1,"message":"1675","line":55,"column":7,"nodeType":"1614","endLine":55,"endColumn":35,"suggestions":"1676"},{"ruleId":"1602","severity":1,"message":"1677","line":101,"column":27,"nodeType":"1604","messageId":"1605","endLine":101,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1678","line":7,"column":47,"nodeType":"1604","messageId":"1605","endLine":7,"endColumn":55},{"ruleId":"1612","severity":1,"message":"1629","line":40,"column":8,"nodeType":"1614","endLine":40,"endColumn":15,"suggestions":"1679"},{"ruleId":"1602","severity":1,"message":"1677","line":84,"column":27,"nodeType":"1604","messageId":"1605","endLine":84,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1680","line":16,"column":28,"nodeType":"1604","messageId":"1605","endLine":16,"endColumn":45},{"ruleId":"1612","severity":1,"message":"1629","line":29,"column":8,"nodeType":"1614","endLine":29,"endColumn":15,"suggestions":"1681"},{"ruleId":"1612","severity":1,"message":"1629","line":28,"column":8,"nodeType":"1614","endLine":28,"endColumn":15,"suggestions":"1682"},{"ruleId":"1654","severity":1,"message":"1655","line":60,"column":28,"nodeType":"1656","messageId":"1657","endLine":60,"endColumn":30},{"ruleId":"1654","severity":1,"message":"1655","line":60,"column":60,"nodeType":"1656","messageId":"1657","endLine":60,"endColumn":62},{"ruleId":"1612","severity":1,"message":"1629","line":37,"column":8,"nodeType":"1614","endLine":37,"endColumn":15,"suggestions":"1683"},{"ruleId":"1654","severity":1,"message":"1655","line":65,"column":28,"nodeType":"1656","messageId":"1657","endLine":65,"endColumn":30},{"ruleId":"1654","severity":1,"message":"1655","line":65,"column":60,"nodeType":"1656","messageId":"1657","endLine":65,"endColumn":62},{"ruleId":"1602","severity":1,"message":"1684","line":6,"column":35,"nodeType":"1604","messageId":"1605","endLine":6,"endColumn":55},{"ruleId":"1602","severity":1,"message":"1685","line":7,"column":67,"nodeType":"1604","messageId":"1605","endLine":7,"endColumn":95},{"ruleId":"1612","severity":1,"message":"1629","line":111,"column":8,"nodeType":"1614","endLine":111,"endColumn":21,"suggestions":"1686"},{"ruleId":"1654","severity":1,"message":"1655","line":130,"column":31,"nodeType":"1656","messageId":"1657","endLine":130,"endColumn":33},{"ruleId":"1654","severity":1,"message":"1655","line":130,"column":61,"nodeType":"1656","messageId":"1657","endLine":130,"endColumn":63},{"ruleId":"1660","severity":1,"message":"1661","line":227,"column":9,"nodeType":"1623","endLine":227,"endColumn":12},{"ruleId":"1660","severity":1,"message":"1661","line":239,"column":9,"nodeType":"1623","endLine":239,"endColumn":12},{"ruleId":"1660","severity":1,"message":"1661","line":303,"column":25,"nodeType":"1623","endLine":303,"endColumn":92},{"ruleId":"1660","severity":1,"message":"1661","line":333,"column":25,"nodeType":"1623","endLine":333,"endColumn":92},{"ruleId":"1602","severity":1,"message":"1687","line":2,"column":10,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1688","line":2,"column":18,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":22},{"ruleId":"1602","severity":1,"message":"1650","line":9,"column":28,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1612","severity":1,"message":"1629","line":35,"column":8,"nodeType":"1614","endLine":35,"endColumn":15,"suggestions":"1689"},{"ruleId":"1612","severity":1,"message":"1629","line":43,"column":8,"nodeType":"1614","endLine":43,"endColumn":15,"suggestions":"1690"},{"ruleId":"1654","severity":1,"message":"1655","line":64,"column":34,"nodeType":"1656","messageId":"1657","endLine":64,"endColumn":36},{"ruleId":"1654","severity":1,"message":"1655","line":64,"column":80,"nodeType":"1656","messageId":"1657","endLine":64,"endColumn":82},{"ruleId":"1612","severity":1,"message":"1629","line":29,"column":8,"nodeType":"1614","endLine":29,"endColumn":15,"suggestions":"1691"},{"ruleId":"1654","severity":1,"message":"1655","line":60,"column":34,"nodeType":"1656","messageId":"1657","endLine":60,"endColumn":36},{"ruleId":"1654","severity":1,"message":"1655","line":60,"column":78,"nodeType":"1656","messageId":"1657","endLine":60,"endColumn":80},{"ruleId":"1612","severity":1,"message":"1629","line":25,"column":8,"nodeType":"1614","endLine":25,"endColumn":15,"suggestions":"1692"},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":31,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":40},{"ruleId":"1612","severity":1,"message":"1629","line":27,"column":8,"nodeType":"1614","endLine":27,"endColumn":15,"suggestions":"1693"},{"ruleId":"1612","severity":1,"message":"1629","line":30,"column":8,"nodeType":"1614","endLine":30,"endColumn":15,"suggestions":"1694"},{"ruleId":"1654","severity":1,"message":"1655","line":62,"column":29,"nodeType":"1656","messageId":"1657","endLine":62,"endColumn":31},{"ruleId":"1654","severity":1,"message":"1655","line":62,"column":65,"nodeType":"1656","messageId":"1657","endLine":62,"endColumn":67},{"ruleId":"1612","severity":1,"message":"1629","line":29,"column":8,"nodeType":"1614","endLine":29,"endColumn":15,"suggestions":"1695"},{"ruleId":"1612","severity":1,"message":"1629","line":36,"column":8,"nodeType":"1614","endLine":36,"endColumn":15,"suggestions":"1696"},{"ruleId":"1654","severity":1,"message":"1655","line":62,"column":29,"nodeType":"1656","messageId":"1657","endLine":62,"endColumn":31},{"ruleId":"1654","severity":1,"message":"1655","line":62,"column":63,"nodeType":"1656","messageId":"1657","endLine":62,"endColumn":65},{"ruleId":"1602","severity":1,"message":"1673","line":24,"column":12,"nodeType":"1604","messageId":"1605","endLine":24,"endColumn":21},{"ruleId":"1612","severity":1,"message":"1629","line":38,"column":8,"nodeType":"1614","endLine":38,"endColumn":15,"suggestions":"1697"},{"ruleId":"1612","severity":1,"message":"1675","line":55,"column":7,"nodeType":"1614","endLine":55,"endColumn":35,"suggestions":"1698"},{"ruleId":"1602","severity":1,"message":"1677","line":101,"column":27,"nodeType":"1604","messageId":"1605","endLine":101,"endColumn":33},{"ruleId":"1612","severity":1,"message":"1629","line":27,"column":8,"nodeType":"1614","endLine":27,"endColumn":15,"suggestions":"1699"},{"ruleId":"1612","severity":1,"message":"1629","line":40,"column":8,"nodeType":"1614","endLine":40,"endColumn":15,"suggestions":"1700"},{"ruleId":"1602","severity":1,"message":"1677","line":84,"column":27,"nodeType":"1604","messageId":"1605","endLine":84,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1687","line":2,"column":10,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1688","line":2,"column":18,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":22},{"ruleId":"1602","severity":1,"message":"1650","line":9,"column":28,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1687","line":2,"column":10,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1688","line":2,"column":18,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":22},{"ruleId":"1602","severity":1,"message":"1678","line":7,"column":47,"nodeType":"1604","messageId":"1605","endLine":7,"endColumn":55},{"ruleId":"1612","severity":1,"message":"1629","line":40,"column":8,"nodeType":"1614","endLine":40,"endColumn":15,"suggestions":"1701"},{"ruleId":"1602","severity":1,"message":"1677","line":84,"column":27,"nodeType":"1604","messageId":"1605","endLine":84,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1673","line":23,"column":12,"nodeType":"1604","messageId":"1605","endLine":23,"endColumn":21},{"ruleId":"1612","severity":1,"message":"1629","line":37,"column":8,"nodeType":"1614","endLine":37,"endColumn":15,"suggestions":"1702"},{"ruleId":"1612","severity":1,"message":"1675","line":54,"column":7,"nodeType":"1614","endLine":54,"endColumn":35,"suggestions":"1703"},{"ruleId":"1602","severity":1,"message":"1677","line":100,"column":27,"nodeType":"1604","messageId":"1605","endLine":100,"endColumn":33},{"ruleId":"1612","severity":1,"message":"1704","line":68,"column":8,"nodeType":"1614","endLine":68,"endColumn":20,"suggestions":"1705"},{"ruleId":"1706","severity":1,"message":"1707","line":118,"column":25,"nodeType":"1708","messageId":"1611","endLine":118,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":132,"column":25,"nodeType":"1708","messageId":"1611","endLine":132,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":138,"column":21,"nodeType":"1708","messageId":"1611","endLine":138,"endColumn":23},{"ruleId":"1612","severity":1,"message":"1709","line":68,"column":8,"nodeType":"1614","endLine":68,"endColumn":20,"suggestions":"1710"},{"ruleId":"1706","severity":1,"message":"1707","line":118,"column":25,"nodeType":"1708","messageId":"1611","endLine":118,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":132,"column":25,"nodeType":"1708","messageId":"1611","endLine":132,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":138,"column":21,"nodeType":"1708","messageId":"1611","endLine":138,"endColumn":23},{"ruleId":"1602","severity":1,"message":"1711","line":2,"column":8,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":14},{"ruleId":"1602","severity":1,"message":"1712","line":8,"column":10,"nodeType":"1604","messageId":"1605","endLine":8,"endColumn":15},{"ruleId":"1602","severity":1,"message":"1677","line":73,"column":22,"nodeType":"1604","messageId":"1605","endLine":73,"endColumn":28},{"ruleId":"1612","severity":1,"message":"1713","line":121,"column":5,"nodeType":"1614","endLine":121,"endColumn":21,"suggestions":"1714"},{"ruleId":"1612","severity":1,"message":"1715","line":121,"column":6,"nodeType":"1656","endLine":121,"endColumn":20},{"ruleId":"1612","severity":1,"message":"1716","line":125,"column":6,"nodeType":"1614","endLine":125,"endColumn":19,"suggestions":"1717"},{"ruleId":"1654","severity":1,"message":"1718","line":161,"column":39,"nodeType":"1656","messageId":"1657","endLine":161,"endColumn":41},{"ruleId":"1654","severity":1,"message":"1718","line":161,"column":52,"nodeType":"1656","messageId":"1657","endLine":161,"endColumn":54},{"ruleId":"1660","severity":1,"message":"1661","line":168,"column":10,"nodeType":"1623","endLine":168,"endColumn":13},{"ruleId":"1612","severity":1,"message":"1629","line":24,"column":8,"nodeType":"1614","endLine":24,"endColumn":15,"suggestions":"1719"},{"ruleId":"1612","severity":1,"message":"1629","line":23,"column":8,"nodeType":"1614","endLine":23,"endColumn":15,"suggestions":"1720"},{"ruleId":"1612","severity":1,"message":"1629","line":59,"column":8,"nodeType":"1614","endLine":59,"endColumn":15,"suggestions":"1721"},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":18,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":27},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":18,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":27},{"ruleId":"1612","severity":1,"message":"1629","line":24,"column":8,"nodeType":"1614","endLine":24,"endColumn":15,"suggestions":"1722"},{"ruleId":"1612","severity":1,"message":"1629","line":55,"column":8,"nodeType":"1614","endLine":55,"endColumn":15,"suggestions":"1723"},{"ruleId":"1612","severity":1,"message":"1629","line":23,"column":8,"nodeType":"1614","endLine":23,"endColumn":15,"suggestions":"1724"},{"ruleId":"1602","severity":1,"message":"1725","line":1,"column":28,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":36},{"ruleId":"1612","severity":1,"message":"1726","line":23,"column":9,"nodeType":"1614","endLine":23,"endColumn":18,"suggestions":"1727"},{"ruleId":"1602","severity":1,"message":"1725","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":25},{"ruleId":"1602","severity":1,"message":"1684","line":4,"column":35,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":55},{"ruleId":"1602","severity":1,"message":"1725","line":1,"column":28,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":36},{"ruleId":"1612","severity":1,"message":"1728","line":21,"column":9,"nodeType":"1614","endLine":21,"endColumn":18,"suggestions":"1729"},{"ruleId":"1602","severity":1,"message":"1725","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":25},{"ruleId":"1602","severity":1,"message":"1730","line":6,"column":39,"nodeType":"1604","messageId":"1605","endLine":6,"endColumn":45},{"ruleId":"1612","severity":1,"message":"1704","line":49,"column":9,"nodeType":"1614","endLine":49,"endColumn":15,"suggestions":"1731"},{"ruleId":"1612","severity":1,"message":"1704","line":56,"column":8,"nodeType":"1614","endLine":56,"endColumn":20,"suggestions":"1732"},{"ruleId":"1706","severity":1,"message":"1707","line":107,"column":25,"nodeType":"1708","messageId":"1611","endLine":107,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":121,"column":25,"nodeType":"1708","messageId":"1611","endLine":121,"endColumn":27},{"ruleId":"1706","severity":1,"message":"1707","line":127,"column":21,"nodeType":"1708","messageId":"1611","endLine":127,"endColumn":23},{"ruleId":"1612","severity":1,"message":"1629","line":37,"column":8,"nodeType":"1614","endLine":37,"endColumn":19,"suggestions":"1733"},{"ruleId":"1602","severity":1,"message":"1649","line":43,"column":21,"nodeType":"1604","messageId":"1605","endLine":43,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1649","line":35,"column":21,"nodeType":"1604","messageId":"1605","endLine":35,"endColumn":28},{"ruleId":"1612","severity":1,"message":"1629","line":47,"column":8,"nodeType":"1614","endLine":47,"endColumn":25,"suggestions":"1734"},{"ruleId":"1602","severity":1,"message":"1735","line":1,"column":10,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1736","line":5,"column":8,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":9},{"ruleId":"1602","severity":1,"message":"1737","line":25,"column":7,"nodeType":"1604","messageId":"1605","endLine":25,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1738","line":29,"column":10,"nodeType":"1604","messageId":"1605","endLine":29,"endColumn":37},{"ruleId":"1602","severity":1,"message":"1739","line":139,"column":9,"nodeType":"1604","messageId":"1605","endLine":139,"endColumn":26},{"ruleId":"1612","severity":1,"message":"1740","line":151,"column":21,"nodeType":"1741","endLine":151,"endColumn":56},{"ruleId":"1742","severity":1,"message":"1743","line":231,"column":20,"nodeType":"1744","messageId":"1745","endLine":231,"endColumn":22},{"ruleId":"1706","severity":1,"message":"1746","line":347,"column":29,"nodeType":"1708","messageId":"1611","endLine":347,"endColumn":31},{"ruleId":"1612","severity":1,"message":"1747","line":352,"column":5,"nodeType":"1614","endLine":352,"endColumn":14,"suggestions":"1748"},{"ruleId":"1621","severity":1,"message":"1622","line":528,"column":35,"nodeType":"1623","endLine":528,"endColumn":124},{"ruleId":"1602","severity":1,"message":"1749","line":4,"column":13,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1750","line":5,"column":13,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":26},{"ruleId":"1612","severity":1,"message":"1629","line":48,"column":8,"nodeType":"1614","endLine":48,"endColumn":22,"suggestions":"1751"},{"ruleId":"1660","severity":1,"message":"1661","line":230,"column":27,"nodeType":"1623","endLine":230,"endColumn":30},{"ruleId":"1660","severity":1,"message":"1661","line":240,"column":21,"nodeType":"1623","endLine":240,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1612","severity":1,"message":"1629","line":29,"column":8,"nodeType":"1614","endLine":29,"endColumn":15,"suggestions":"1752"},{"ruleId":"1602","severity":1,"message":"1753","line":34,"column":10,"nodeType":"1604","messageId":"1605","endLine":34,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1754","line":120,"column":9,"nodeType":"1604","messageId":"1605","endLine":120,"endColumn":23},{"ruleId":"1660","severity":1,"message":"1661","line":188,"column":17,"nodeType":"1623","endLine":188,"endColumn":20},{"ruleId":"1660","severity":1,"message":"1661","line":204,"column":15,"nodeType":"1623","endLine":204,"endColumn":18},{"ruleId":"1602","severity":1,"message":"1735","line":5,"column":23,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":31},{"ruleId":"1602","severity":1,"message":"1755","line":11,"column":10,"nodeType":"1604","messageId":"1605","endLine":11,"endColumn":25},{"ruleId":"1602","severity":1,"message":"1666","line":12,"column":8,"nodeType":"1604","messageId":"1605","endLine":12,"endColumn":15},{"ruleId":"1612","severity":1,"message":"1629","line":39,"column":8,"nodeType":"1614","endLine":39,"endColumn":24,"suggestions":"1756"},{"ruleId":"1612","severity":1,"message":"1629","line":25,"column":8,"nodeType":"1614","endLine":25,"endColumn":15,"suggestions":"1757"},{"ruleId":"1602","severity":1,"message":"1758","line":139,"column":18,"nodeType":"1604","messageId":"1605","endLine":139,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1759","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1617","line":4,"column":10,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":20},{"ruleId":"1602","severity":1,"message":"1736","line":7,"column":8,"nodeType":"1604","messageId":"1605","endLine":7,"endColumn":9},{"ruleId":"1602","severity":1,"message":"1760","line":26,"column":14,"nodeType":"1604","messageId":"1605","endLine":26,"endColumn":19},{"ruleId":"1602","severity":1,"message":"1761","line":27,"column":14,"nodeType":"1604","messageId":"1605","endLine":27,"endColumn":26},{"ruleId":"1612","severity":1,"message":"1762","line":117,"column":10,"nodeType":"1614","endLine":117,"endColumn":17,"suggestions":"1763"},{"ruleId":"1660","severity":1,"message":"1661","line":168,"column":43,"nodeType":"1623","endLine":168,"endColumn":46},{"ruleId":"1660","severity":1,"message":"1661","line":190,"column":42,"nodeType":"1623","endLine":190,"endColumn":45},{"ruleId":"1660","severity":1,"message":"1661","line":196,"column":42,"nodeType":"1623","endLine":196,"endColumn":45},{"ruleId":"1660","severity":1,"message":"1661","line":238,"column":25,"nodeType":"1623","endLine":238,"endColumn":28},{"ruleId":"1660","severity":1,"message":"1661","line":245,"column":29,"nodeType":"1623","endLine":245,"endColumn":32},{"ruleId":"1602","severity":1,"message":"1736","line":37,"column":8,"nodeType":"1604","messageId":"1605","endLine":37,"endColumn":9},{"ruleId":"1602","severity":1,"message":"1737","line":62,"column":7,"nodeType":"1604","messageId":"1605","endLine":62,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1764","line":64,"column":5,"nodeType":"1604","messageId":"1605","endLine":64,"endColumn":15},{"ruleId":"1602","severity":1,"message":"1765","line":89,"column":9,"nodeType":"1604","messageId":"1605","endLine":89,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1766","line":134,"column":10,"nodeType":"1604","messageId":"1605","endLine":134,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1767","line":134,"column":26,"nodeType":"1604","messageId":"1605","endLine":134,"endColumn":43},{"ruleId":"1602","severity":1,"message":"1768","line":135,"column":10,"nodeType":"1604","messageId":"1605","endLine":135,"endColumn":22},{"ruleId":"1602","severity":1,"message":"1739","line":158,"column":9,"nodeType":"1604","messageId":"1605","endLine":158,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1769","line":166,"column":7,"nodeType":"1604","messageId":"1605","endLine":166,"endColumn":15},{"ruleId":"1602","severity":1,"message":"1770","line":167,"column":7,"nodeType":"1604","messageId":"1605","endLine":167,"endColumn":17},{"ruleId":"1612","severity":1,"message":"1740","line":190,"column":21,"nodeType":"1741","endLine":190,"endColumn":56},{"ruleId":"1602","severity":1,"message":"1771","line":216,"column":9,"nodeType":"1604","messageId":"1605","endLine":216,"endColumn":28},{"ruleId":"1742","severity":1,"message":"1743","line":301,"column":20,"nodeType":"1744","messageId":"1745","endLine":301,"endColumn":22},{"ruleId":"1612","severity":1,"message":"1772","line":494,"column":5,"nodeType":"1614","endLine":494,"endColumn":21,"suggestions":"1773"},{"ruleId":"1602","severity":1,"message":"1774","line":587,"column":15,"nodeType":"1604","messageId":"1605","endLine":587,"endColumn":23},{"ruleId":"1621","severity":1,"message":"1622","line":684,"column":33,"nodeType":"1623","endLine":684,"endColumn":122},{"ruleId":"1602","severity":1,"message":"1725","line":1,"column":31,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":39},{"ruleId":"1602","severity":1,"message":"1639","line":27,"column":14,"nodeType":"1604","messageId":"1605","endLine":27,"endColumn":24},{"ruleId":"1602","severity":1,"message":"1775","line":2,"column":27,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":33},{"ruleId":"1602","severity":1,"message":"1776","line":12,"column":11,"nodeType":"1604","messageId":"1605","endLine":12,"endColumn":30},{"ruleId":"1602","severity":1,"message":"1777","line":41,"column":9,"nodeType":"1604","messageId":"1605","endLine":41,"endColumn":20},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1778","line":18,"column":7,"nodeType":"1604","messageId":"1605","endLine":18,"endColumn":14},{"ruleId":"1598","replacedBy":"1779"},{"ruleId":"1600","replacedBy":"1780"},{"ruleId":"1602","severity":1,"message":"1781","line":10,"column":8,"nodeType":"1604","messageId":"1605","endLine":10,"endColumn":20},{"ruleId":"1612","severity":1,"message":"1613","line":22,"column":9,"nodeType":"1614","endLine":22,"endColumn":28,"suggestions":"1782"},{"ruleId":"1608","severity":1,"message":"1609","line":8,"column":45,"nodeType":"1610","messageId":"1611","endLine":8,"endColumn":47},{"ruleId":"1602","severity":1,"message":"1619","line":4,"column":22,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1620","line":50,"column":20,"nodeType":"1604","messageId":"1605","endLine":50,"endColumn":29},{"ruleId":"1621","severity":1,"message":"1622","line":187,"column":17,"nodeType":"1623","endLine":187,"endColumn":35},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1628","line":2,"column":23,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":30},{"ruleId":"1608","severity":1,"message":"1609","line":9,"column":25,"nodeType":"1610","messageId":"1611","endLine":9,"endColumn":32},{"ruleId":"1602","severity":1,"message":"1783","line":11,"column":19,"nodeType":"1604","messageId":"1605","endLine":11,"endColumn":29},{"ruleId":"1602","severity":1,"message":"1784","line":12,"column":10,"nodeType":"1604","messageId":"1605","endLine":12,"endColumn":15},{"ruleId":"1602","severity":1,"message":"1628","line":2,"column":23,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":30},{"ruleId":"1602","severity":1,"message":"1785","line":4,"column":10,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":25},{"ruleId":"1608","severity":1,"message":"1609","line":8,"column":25,"nodeType":"1610","messageId":"1611","endLine":8,"endColumn":32},{"ruleId":"1602","severity":1,"message":"1783","line":10,"column":19,"nodeType":"1604","messageId":"1605","endLine":10,"endColumn":29},{"ruleId":"1602","severity":1,"message":"1786","line":13,"column":11,"nodeType":"1604","messageId":"1605","endLine":13,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1624","line":55,"column":21,"nodeType":"1604","messageId":"1605","endLine":55,"endColumn":33},{"ruleId":"1612","severity":1,"message":"1625","line":65,"column":6,"nodeType":"1614","endLine":65,"endColumn":18,"suggestions":"1787"},{"ruleId":"1602","severity":1,"message":"1627","line":3,"column":23,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1628","line":3,"column":30,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":37},{"ruleId":"1612","severity":1,"message":"1629","line":28,"column":8,"nodeType":"1614","endLine":28,"endColumn":10,"suggestions":"1788"},{"ruleId":"1602","severity":1,"message":"1628","line":2,"column":23,"nodeType":"1604","messageId":"1605","endLine":2,"endColumn":30},{"ruleId":"1602","severity":1,"message":"1783","line":13,"column":19,"nodeType":"1604","messageId":"1605","endLine":13,"endColumn":29},{"ruleId":"1602","severity":1,"message":"1784","line":14,"column":10,"nodeType":"1604","messageId":"1605","endLine":14,"endColumn":15},{"ruleId":"1612","severity":1,"message":"1631","line":16,"column":6,"nodeType":"1614","endLine":16,"endColumn":8,"suggestions":"1789"},{"ruleId":"1612","severity":1,"message":"1633","line":23,"column":6,"nodeType":"1614","endLine":23,"endColumn":12,"suggestions":"1790"},{"ruleId":"1602","severity":1,"message":"1635","line":3,"column":53,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":56},{"ruleId":"1602","severity":1,"message":"1791","line":8,"column":10,"nodeType":"1604","messageId":"1605","endLine":8,"endColumn":16},{"ruleId":"1602","severity":1,"message":"1792","line":9,"column":10,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":34},{"ruleId":"1602","severity":1,"message":"1659","line":23,"column":10,"nodeType":"1604","messageId":"1605","endLine":23,"endColumn":28},{"ruleId":"1602","severity":1,"message":"1793","line":24,"column":10,"nodeType":"1604","messageId":"1605","endLine":24,"endColumn":22},{"ruleId":"1598","replacedBy":"1794"},{"ruleId":"1600","replacedBy":"1795"},{"ruleId":"1602","severity":1,"message":"1638","line":17,"column":7,"nodeType":"1604","messageId":"1605","endLine":17,"endColumn":19},{"ruleId":"1612","severity":1,"message":"1636","line":32,"column":6,"nodeType":"1614","endLine":32,"endColumn":8,"suggestions":"1796"},{"ruleId":"1602","severity":1,"message":"1797","line":3,"column":3,"nodeType":"1604","messageId":"1605","endLine":3,"endColumn":19},{"ruleId":"1602","severity":1,"message":"1798","line":6,"column":3,"nodeType":"1604","messageId":"1605","endLine":6,"endColumn":14},{"ruleId":"1602","severity":1,"message":"1799","line":9,"column":3,"nodeType":"1604","messageId":"1605","endLine":9,"endColumn":23},{"ruleId":"1602","severity":1,"message":"1800","line":10,"column":3,"nodeType":"1604","messageId":"1605","endLine":10,"endColumn":14},{"ruleId":"1660","severity":1,"message":"1661","line":230,"column":27,"nodeType":"1623","endLine":230,"endColumn":30},{"ruleId":"1660","severity":1,"message":"1661","line":240,"column":21,"nodeType":"1623","endLine":240,"endColumn":24},{"ruleId":"1598","replacedBy":"1801"},{"ruleId":"1600","replacedBy":"1802"},{"ruleId":"1612","severity":1,"message":"1629","line":29,"column":8,"nodeType":"1614","endLine":29,"endColumn":15,"suggestions":"1803"},{"ruleId":"1602","severity":1,"message":"1618","line":1,"column":17,"nodeType":"1604","messageId":"1605","endLine":1,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1749","line":4,"column":13,"nodeType":"1604","messageId":"1605","endLine":4,"endColumn":26},{"ruleId":"1602","severity":1,"message":"1750","line":5,"column":13,"nodeType":"1604","messageId":"1605","endLine":5,"endColumn":26},"no-native-reassign",["1804"],"no-negated-in-lhs",["1805"],"@typescript-eslint/no-unused-vars","'StudentPage' is assigned a value but never used.","Identifier","unusedVar","'StaffPage' is assigned a value but never used.","'TeacherPage' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'error' and 'loadUser'. Either include them or remove the dependency array. If 'loadUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["1806"],"'Redirect' is defined but never used.","'withRouter' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'focusItem' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'currentTheme' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'switcher', 'themes.dark', and 'themes.light'. Either include them or remove the dependency array.",["1807"],"'Input' is defined but never used.","'message' is defined but never used.","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["1808"],"React Hook useCallback has a missing dependency: 'i18n'. Either include it or remove the dependency array.",["1809"],"React Hook useEffect has a missing dependency: 'i18n'. Either include it or remove the dependency array.",["1810"],"'Tag' is defined but never used.","React Hook useEffect has a missing dependency: 'addPane'. Either include it or remove the dependency array.",["1811"],"'AcademicMenu' is assigned a value but never used.","'privileges' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addPane' and 'adminDefaultPane'. Either include them or remove the dependency array.",["1812"],["1813"],["1814"],"'t' is assigned a value but never used.","'Divider' is defined but never used.","'Popconfirm' is defined but never used.","'EditOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'handleDeleteFeedbackAdminPage' is assigned a value but never used.",["1804"],["1805"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'MapStateToProps' is assigned a value but never used.","'isShowViewFeedback' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"1815","text":"1816"},"'Loading' is defined but never used.",{"range":"1817","text":"1816"},{"range":"1818","text":"1816"},"'useMutation' is defined but never used.","'DELETE_COURSE' is defined but never used.",["1819"],"'FILE' is defined but never used.","'startLoad' is assigned a value but never used.",["1820"],"React Hook useEffect has a missing dependency: 'dataLink'. Either include it or remove the dependency array.",["1821"],"'errors' is assigned a value but never used.","'Progress' is defined but never used.",["1822"],"'setProgramme_Type' is assigned a value but never used.",["1823"],["1824"],["1825"],"'GET_STUDENT_SEMESTER' is defined but never used.","'UPDATE_STUDENT_ACADEMIC_YEAR' is defined but never used.",["1826"],"'Avatar' is defined but never used.","'Card' is defined but never used.",["1827"],["1828"],["1829"],["1830"],["1831"],["1832"],["1833"],["1834"],["1835"],["1836"],["1837"],["1838"],["1839"],["1840"],["1841"],"React Hook useEffect has a missing dependency: 'students'. Either include it or remove the dependency array.",["1842"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","React Hook useEffect has a missing dependency: 'teachers'. Either include it or remove the dependency array.",["1843"],"'moment' is defined but never used.","'start' is defined but never used.","React Hook useEffect has a missing dependency: 'startUpload'. Either include it or remove the dependency array. You can also do a functional update 'setStartUpload(s => ...)' if you only need 'startUpload' in the 'setStartUpload' call.",["1844"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","React Hook useEffect has a missing dependency: 'image_src'. Either include it or remove the dependency array. If 'setImageUrl' needs the current value of 'image_src', you can also switch to useReducer instead of useState and read 'image_src' in the reducer.",["1845"],"Unexpected mix of '||' and '&&'.",["1846"],["1847"],["1848"],["1849"],["1850"],["1851"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'semesterInfo?.semesterName'. Either include them or remove the dependency array.",["1852"],"React Hook useEffect has missing dependencies: 'academicYearInfo?.academicYearName' and 'form'. Either include them or remove the dependency array.",["1853"],"'Select' is defined but never used.",["1854"],["1855"],["1856"],["1857"],"'useQuery' is defined but never used.","'_' is defined but never used.","'__ISIOS__' is assigned a value but never used.","'MyCustomUploadAdapterPlugin' is defined but never used.","'handleInputChange' is assigned a value but never used.","Assignments to the 'bgImgUpload' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'props.categories?.categories'. Either include it or remove the dependency array.",["1858"],"'DEFAULT_WIDTH' is assigned a value but never used.","'DEFAULT_COLOR' is assigned a value but never used.",["1859"],["1860"],"'isShowViewDetail' is assigned a value but never used.","'handleViewUser' is assigned a value but never used.","'GET_DEPARTMENTS' is defined but never used.",["1861"],["1862"],"'onChange' is defined but never used.","'Component' is defined but never used.","'posts' is assigned a value but never used.","'postsLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pagination'. Either include it or remove the dependency array. You can also do a functional update 'setPagination(p => ...)' if you only need 'pagination' in the 'setPagination' call.",["1863"],"'onKeyEvent' is assigned a value but never used.","'EditorContentFromLS' is assigned a value but never used.","'cursorPosition' is assigned a value but never used.","'setCursorPosition' is assigned a value but never used.","'showEquation' is assigned a value but never used.","'authorId' is assigned a value but never used.","'authUserId' is assigned a value but never used.","'handleCloseEquation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'backgroundImageUrl', 'categoryId', 'contents', 'handlePublishPost', 'id', 'props', 'slug', 'tags', and 'title'. Either include them or remove the dependency array.",["1864"],"'username' is assigned a value but never used.","'useRef' is defined but never used.","'filterDropdownProps' is defined but never used.","'handleReset' is assigned a value but never used.","'API_URL' is assigned a value but never used.",["1804"],["1805"],"'PrivateRoute' is defined but never used.",["1865"],"'setSuccess' is assigned a value but never used.","'email' is assigned a value but never used.","'CHANGE_PASSWORD' is defined but never used.","'token' is assigned a value but never used.",["1866"],["1867"],["1868"],["1869"],"'GET_ME' is defined but never used.","'UPDATE_NOTIFICATION_SEEN' is defined but never used.","'feedbackInfo' is assigned a value but never used.",["1804"],["1805"],["1870"],"'DownloadOutlined' is defined but never used.","'EditTwoTone' is defined but never used.","'NotificationOutlined' is defined but never used.","'HomeTwoTone' is defined but never used.",["1804"],["1805"],["1871"],"no-global-assign","no-unsafe-negation",{"desc":"1872","fix":"1873"},{"desc":"1874","fix":"1875"},{"desc":"1876","fix":"1877"},{"desc":"1878","fix":"1879"},{"desc":"1880","fix":"1881"},{"desc":"1882","fix":"1883"},{"desc":"1884","fix":"1885"},{"desc":"1882","fix":"1886"},{"desc":"1882","fix":"1887"},[6373,6373]," rel=\"noreferrer\"",[6340,6340],[6443,6443],{"desc":"1888","fix":"1889"},{"desc":"1890","fix":"1891"},{"desc":"1892","fix":"1893"},{"desc":"1890","fix":"1894"},{"desc":"1890","fix":"1895"},{"desc":"1890","fix":"1896"},{"desc":"1890","fix":"1897"},{"desc":"1898","fix":"1899"},{"desc":"1890","fix":"1900"},{"desc":"1890","fix":"1901"},{"desc":"1890","fix":"1902"},{"desc":"1890","fix":"1903"},{"desc":"1890","fix":"1904"},{"desc":"1890","fix":"1905"},{"desc":"1890","fix":"1906"},{"desc":"1890","fix":"1907"},{"desc":"1890","fix":"1908"},{"desc":"1892","fix":"1909"},{"desc":"1890","fix":"1910"},{"desc":"1890","fix":"1911"},{"desc":"1890","fix":"1912"},{"desc":"1890","fix":"1913"},{"desc":"1892","fix":"1914"},{"desc":"1915","fix":"1916"},{"desc":"1917","fix":"1918"},{"desc":"1919","fix":"1920"},{"desc":"1921","fix":"1922"},{"desc":"1890","fix":"1923"},{"desc":"1890","fix":"1924"},{"desc":"1890","fix":"1925"},{"desc":"1890","fix":"1926"},{"desc":"1890","fix":"1927"},{"desc":"1890","fix":"1928"},{"desc":"1929","fix":"1930"},{"desc":"1931","fix":"1932"},{"desc":"1933","fix":"1934"},{"desc":"1915","fix":"1935"},{"desc":"1936","fix":"1937"},{"desc":"1938","fix":"1939"},{"desc":"1940","fix":"1941"},{"desc":"1942","fix":"1943"},{"desc":"1890","fix":"1944"},{"desc":"1945","fix":"1946"},{"desc":"1890","fix":"1947"},{"desc":"1948","fix":"1949"},{"desc":"1950","fix":"1951"},{"desc":"1872","fix":"1952"},{"desc":"1874","fix":"1953"},{"desc":"1876","fix":"1954"},{"desc":"1878","fix":"1955"},{"desc":"1880","fix":"1956"},{"desc":"1882","fix":"1957"},{"desc":"1890","fix":"1958"},"Update the dependencies array to be: [data?.getMe?.user, error, loadUser]",{"range":"1959","text":"1960"},"Update the dependencies array to be: [isDarkMode, switcher, themes.dark, themes.light]",{"range":"1961","text":"1962"},"Update the dependencies array to be: [form]",{"range":"1963","text":"1964"},"Update the dependencies array to be: [i18n]",{"range":"1965","text":"1966"},"Update the dependencies array to be: [i18n, lang]",{"range":"1967","text":"1968"},"Update the dependencies array to be: [addPane]",{"range":"1969","text":"1970"},"Update the dependencies array to be: [addPane, adminDefaultPane]",{"range":"1971","text":"1972"},{"range":"1973","text":"1970"},{"range":"1974","text":"1970"},"Update the dependencies array to be: [feedbackInfo, form]",{"range":"1975","text":"1976"},"Update the dependencies array to be: [form, props]",{"range":"1977","text":"1978"},"Update the dependencies array to be: [dataLink, props.downloadInfo.links]",{"range":"1979","text":"1980"},{"range":"1981","text":"1978"},{"range":"1982","text":"1978"},{"range":"1983","text":"1978"},{"range":"1984","text":"1978"},"Update the dependencies array to be: [form, studentInfo]",{"range":"1985","text":"1986"},{"range":"1987","text":"1978"},{"range":"1988","text":"1978"},{"range":"1989","text":"1978"},{"range":"1990","text":"1978"},{"range":"1991","text":"1978"},{"range":"1992","text":"1978"},{"range":"1993","text":"1978"},{"range":"1994","text":"1978"},{"range":"1995","text":"1978"},{"range":"1996","text":"1980"},{"range":"1997","text":"1978"},{"range":"1998","text":"1978"},{"range":"1999","text":"1978"},{"range":"2000","text":"1978"},{"range":"2001","text":"1980"},"Update the dependencies array to be: [searchTerm, students]",{"range":"2002","text":"2003"},"Update the dependencies array to be: [searchTerm, teachers]",{"range":"2004","text":"2005"},"Update the dependencies array to be: [startUpload]",{"range":"2006","text":"2007"},"Update the dependencies array to be: [image_src, startUpload]",{"range":"2008","text":"2009"},{"range":"2010","text":"1978"},{"range":"2011","text":"1978"},{"range":"2012","text":"1978"},{"range":"2013","text":"1978"},{"range":"2014","text":"1978"},{"range":"2015","text":"1978"},"Update the dependencies array to be: [form, semesterInfo?.semesterName, visible]",{"range":"2016","text":"2017"},"Update the dependencies array to be: [academicYearInfo?.academicYearName, form, visible]",{"range":"2018","text":"2019"},"Update the dependencies array to be: [data, students]",{"range":"2020","text":"2021"},{"range":"2022","text":"2003"},"Update the dependencies array to be: [form, gradeInfo]",{"range":"2023","text":"2024"},"Update the dependencies array to be: [form, gradeDetailInfo]",{"range":"2025","text":"2026"},"Update the dependencies array to be: [langKey, props.categories?.categories]",{"range":"2027","text":"2028"},"Update the dependencies array to be: [categoryInfo, form]",{"range":"2029","text":"2030"},{"range":"2031","text":"1978"},"Update the dependencies array to be: [form, props.userInfo]",{"range":"2032","text":"2033"},{"range":"2034","text":"1978"},"Update the dependencies array to be: [pagination, props]",{"range":"2035","text":"2036"},"Update the dependencies array to be: [backgroundImageUrl, categoryId, contents, handlePublishPost, id, props, props.handleOk, slug, tags, title]",{"range":"2037","text":"2038"},{"range":"2039","text":"1960"},{"range":"2040","text":"1962"},{"range":"2041","text":"1964"},{"range":"2042","text":"1966"},{"range":"2043","text":"1968"},{"range":"2044","text":"1970"},{"range":"2045","text":"1978"},[667,686],"[data?.getMe?.user, error, loadUser]",[2002,2014],"[isDarkMode, switcher, themes.dark, themes.light]",[784,786],"[form]",[526,528],"[i18n]",[723,729],"[i18n, lang]",[660,662],"[addPane]",[1408,1410],"[addPane, adminDefaultPane]",[607,609],[710,712],[1444,1458],"[feedbackInfo, form]",[1108,1115],"[form, props]",[1443,1471],"[dataLink, props.downloadInfo.links]",[1153,1160],[897,904],[774,781],[1287,1294],[3628,3641],"[form, studentInfo]",[1044,1051],[1311,1318],[923,930],[678,685],[689,696],[844,851],[806,813],[1232,1239],[1098,1105],[1433,1461],[745,752],[1157,1164],[1196,1203],[1093,1100],[1428,1456],[1870,1882],"[searchTerm, students]",[1900,1912],"[searchTerm, teachers]",[3428,3444],"[startUpload]",[3505,3518],"[image_src, startUpload]",[610,617],[671,678],[1831,1838],[747,754],[1901,1908],[663,670],[591,600],"[form, semesterInfo?.semesterName, visible]",[596,605],"[academicYearInfo?.academicYearName, form, visible]",[1373,1379],"[data, students]",[1566,1578],[983,994],"[form, gradeInfo]",[1226,1243],"[form, gradeDetailInfo]",[8937,8946],"[langKey, props.categories?.categories]",[930,944],"[categoryInfo, form]",[852,859],[1245,1261],"[form, props.userInfo]",[614,621],[4280,4287],"[pagination, props]",[13915,13931],"[backgroundImageUrl, categoryId, contents, handlePublishPost, id, props, props.handleOk, slug, tags, title]",[667,686],[1900,1912],[784,786],[512,514],[681,687],[732,734],[852,859]]